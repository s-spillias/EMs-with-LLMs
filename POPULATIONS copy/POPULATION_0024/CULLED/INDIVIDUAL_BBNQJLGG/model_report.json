{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:70:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n   70 |     cots_prev = fmax(cots_prev, eps);   // Prevent negative COTS abundance\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n   71 |     fast_prev = fmax(fast_prev, eps);   // Prevent negative fast coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n   72 |     slow_prev = fmax(slow_prev, eps);   // Prevent negative slow coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:89:19: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n   89 |     K_cots = fmax(K_cots, eps);                                   // Ensure positive carrying capacity\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:102:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  102 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);           // Update COTS abundance (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:110:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  110 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);           // Update fast coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:118:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  118 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);           // Update slow coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:126:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  126 |     Type cots_pred_safe = fmax(cots_pred(t), eps);                // Safe predicted COTS value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:127:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  127 |     Type fast_pred_safe = fmax(fast_pred(t), eps);                // Safe predicted fast coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:128:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  128 |     Type slow_pred_safe = fmax(slow_pred(t), eps);                // Safe predicted slow coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:129:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  129 |     Type cots_obs_safe = fmax(cots_dat(t), eps);                  // Safe observed COTS value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:130:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  130 |     Type fast_obs_safe = fmax(fast_dat(t), eps);                  // Safe observed fast coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:131:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  131 |     Type slow_obs_safe = fmax(slow_dat(t), eps);                  // Safe observed slow coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  134 |     Type sigma_cots_safe = fmax(sigma_cots, min_sd);              // Safe COTS observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  135 |     Type sigma_fast_safe = fmax(sigma_fast, min_sd);              // Safe fast coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:33: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  136 |     Type sigma_slow_safe = fmax(sigma_slow, min_sd);              // Safe slow coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:70:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n   70 |     cots_prev = fmax(cots_prev, eps);   // Prevent negative COTS abundance\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n   71 |     fast_prev = fmax(fast_prev, eps);   // Prevent negative fast coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n   72 |     slow_prev = fmax(slow_prev, eps);   // Prevent negative slow coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:89:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n   89 |     K_cots = fmax(K_cots, eps);                                   // Ensure positive carrying capacity\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:102:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  102 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);           // Update COTS abundance (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:110:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  110 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);           // Update fast coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:118:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  118 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);           // Update slow coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:126:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  126 |     Type cots_pred_safe = fmax(cots_pred(t), eps);                // Safe predicted COTS value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:127:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  127 |     Type fast_pred_safe = fmax(fast_pred(t), eps);                // Safe predicted fast coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:128:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  128 |     Type slow_pred_safe = fmax(slow_pred(t), eps);                // Safe predicted slow coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:129:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  129 |     Type cots_obs_safe = fmax(cots_dat(t), eps);                  // Safe observed COTS value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:130:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  130 |     Type fast_obs_safe = fmax(fast_dat(t), eps);                  // Safe observed fast coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:131:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  131 |     Type slow_obs_safe = fmax(slow_dat(t), eps);                  // Safe observed slow coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  134 |     Type sigma_cots_safe = fmax(sigma_cots, min_sd);              // Safe COTS observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  135 |     Type sigma_fast_safe = fmax(sigma_fast, min_sd);              // Safe fast coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  136 |     Type sigma_slow_safe = fmax(sigma_slow, min_sd);              // Safe slow coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:70:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n   70 |     cots_prev = fmax(cots_prev, eps);   // Prevent negative COTS abundance\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n   71 |     fast_prev = fmax(fast_prev, eps);   // Prevent negative fast coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n   72 |     slow_prev = fmax(slow_prev, eps);   // Prevent negative slow coral cover\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:89:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n   89 |     K_cots = fmax(K_cots, eps);                                   // Ensure positive carrying capacity\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:102:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  102 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);           // Update COTS abundance (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:110:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  110 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);           // Update fast coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:118:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  118 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);           // Update slow coral cover (ensure positive)\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:126:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  126 |     Type cots_pred_safe = fmax(cots_pred(t), eps);                // Safe predicted COTS value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:127:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  127 |     Type fast_pred_safe = fmax(fast_pred(t), eps);                // Safe predicted fast coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:128:31: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  128 |     Type slow_pred_safe = fmax(slow_pred(t), eps);                // Safe predicted slow coral value\n      |                           ~~~~^~~~~~~~~~~~~~~~~~~\n      |                               |\n      |                               Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:129:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  129 |     Type cots_obs_safe = fmax(cots_dat(t), eps);                  // Safe observed COTS value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:130:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  130 |     Type fast_obs_safe = fmax(fast_dat(t), eps);                  // Safe observed fast coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:131:30: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  131 |     Type slow_obs_safe = fmax(slow_dat(t), eps);                  // Safe observed slow coral value\n      |                          ~~~~^~~~~~~~~~~~~~~~~~\n      |                              |\n      |                              Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  134 |     Type sigma_cots_safe = fmax(sigma_cots, min_sd);              // Safe COTS observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  135 |     Type sigma_fast_safe = fmax(sigma_fast, min_sd);              // Safe fast coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:33: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  136 |     Type sigma_slow_safe = fmax(sigma_slow, min_sd);              // Safe slow coral observation error\n      |                                 ^~~~~~~~~~\n      |                                 |\n      |                                 CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: error: \u2018posfun\u2019 was not declared in this scope\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   72 |     fast_prev = posfun(fast_prev, Type(0.0), pen);           // Prevent negative fast coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:73:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   73 |     slow_prev = posfun(slow_prev, Type(0.0), pen);           // Prevent negative slow coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:91:20: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   91 |     K_cots = posfun(K_cots, Type(0.0), pen);                     // Ensure positive carrying capacity\n      |              ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:105:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  105 |     cots_pred(t) = posfun(cots_prev + cots_change, Type(0.0), pen); // Update COTS abundance (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:114:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  114 |     fast_pred(t) = posfun(fast_prev + fast_change, Type(0.0), pen); // Update fast coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:123:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  123 |     slow_pred(t) = posfun(slow_prev + slow_change, Type(0.0), pen); // Update slow coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: error: \u2018posfun\u2019 was not declared in this scope\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  134 |     Type fast_pred_safe = posfun(fast_pred(t), eps, pen);        // Safe predicted fast coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  135 |     Type slow_pred_safe = posfun(slow_pred(t), eps, pen);        // Safe predicted slow coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  136 |     Type cots_obs_safe = posfun(cots_dat(t), eps, pen);          // Safe observed COTS value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:137:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  137 |     Type fast_obs_safe = posfun(fast_dat(t), eps, pen);          // Safe observed fast coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:138:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  138 |     Type slow_obs_safe = posfun(slow_dat(t), eps, pen);          // Safe observed slow coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = double]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2035:7:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: error: \u2018posfun\u2019 was not declared in this scope\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   72 |     fast_prev = posfun(fast_prev, Type(0.0), pen);           // Prevent negative fast coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:73:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   73 |     slow_prev = posfun(slow_prev, Type(0.0), pen);           // Prevent negative slow coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:91:20: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   91 |     K_cots = posfun(K_cots, Type(0.0), pen);                     // Ensure positive carrying capacity\n      |              ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:105:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  105 |     cots_pred(t) = posfun(cots_prev + cots_change, Type(0.0), pen); // Update COTS abundance (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:114:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  114 |     fast_pred(t) = posfun(fast_prev + fast_change, Type(0.0), pen); // Update fast coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:123:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  123 |     slow_pred(t) = posfun(slow_prev + slow_change, Type(0.0), pen); // Update slow coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: error: \u2018posfun\u2019 was not declared in this scope\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  134 |     Type fast_pred_safe = posfun(fast_pred(t), eps, pen);        // Safe predicted fast coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  135 |     Type slow_pred_safe = posfun(slow_pred(t), eps, pen);        // Safe predicted slow coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  136 |     Type cots_obs_safe = posfun(cots_dat(t), eps, pen);          // Safe observed COTS value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:137:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  137 |     Type fast_obs_safe = posfun(fast_dat(t), eps, pen);          // Safe observed fast coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:138:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  138 |     Type slow_obs_safe = posfun(slow_dat(t), eps, pen);          // Safe observed slow coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: error: \u2018posfun\u2019 was not declared in this scope\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   72 |     fast_prev = posfun(fast_prev, Type(0.0), pen);           // Prevent negative fast coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:73:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   73 |     slow_prev = posfun(slow_prev, Type(0.0), pen);           // Prevent negative slow coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:91:20: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   91 |     K_cots = posfun(K_cots, Type(0.0), pen);                     // Ensure positive carrying capacity\n      |              ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:105:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  105 |     cots_pred(t) = posfun(cots_prev + cots_change, Type(0.0), pen); // Update COTS abundance (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:114:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  114 |     fast_pred(t) = posfun(fast_prev + fast_change, Type(0.0), pen); // Update fast coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:123:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  123 |     slow_pred(t) = posfun(slow_prev + slow_change, Type(0.0), pen); // Update slow coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: error: \u2018posfun\u2019 was not declared in this scope\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  134 |     Type fast_pred_safe = posfun(fast_pred(t), eps, pen);        // Safe predicted fast coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  135 |     Type slow_pred_safe = posfun(slow_pred(t), eps, pen);        // Safe predicted slow coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  136 |     Type cots_obs_safe = posfun(cots_dat(t), eps, pen);          // Safe observed COTS value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:137:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  137 |     Type fast_obs_safe = posfun(fast_dat(t), eps, pen);          // Safe observed fast coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:138:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  138 |     Type slow_obs_safe = posfun(slow_dat(t), eps, pen);          // Safe observed slow coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: error: \u2018posfun\u2019 was not declared in this scope\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:72:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   72 |     fast_prev = posfun(fast_prev, Type(0.0), pen);           // Prevent negative fast coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:73:23: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   73 |     slow_prev = posfun(slow_prev, Type(0.0), pen);           // Prevent negative slow coral cover\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:91:20: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n   91 |     K_cots = posfun(K_cots, Type(0.0), pen);                     // Ensure positive carrying capacity\n      |              ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:105:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  105 |     cots_pred(t) = posfun(cots_prev + cots_change, Type(0.0), pen); // Update COTS abundance (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:114:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  114 |     fast_pred(t) = posfun(fast_prev + fast_change, Type(0.0), pen); // Update fast coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:123:26: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  123 |     slow_pred(t) = posfun(slow_prev + slow_change, Type(0.0), pen); // Update slow coral cover (ensure positive)\n      |                    ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:71:23: note: \u2018posfun\u2019 declared here, later in the translation unit\n   71 |     cots_prev = posfun(cots_prev, Type(0.0), pen);           // Prevent negative COTS abundance\n      |                 ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: error: \u2018posfun\u2019 was not declared in this scope\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:134:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  134 |     Type fast_pred_safe = posfun(fast_pred(t), eps, pen);        // Safe predicted fast coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:135:33: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  135 |     Type slow_pred_safe = posfun(slow_pred(t), eps, pen);        // Safe predicted slow coral value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:136:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  136 |     Type cots_obs_safe = posfun(cots_dat(t), eps, pen);          // Safe observed COTS value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:137:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  137 |     Type fast_obs_safe = posfun(fast_dat(t), eps, pen);          // Safe observed fast coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:138:32: error: \u2018posfun\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation\n  138 |     Type slow_obs_safe = posfun(slow_dat(t), eps, pen);          // Safe observed slow coral value\n      |                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp:133:33: note: \u2018posfun\u2019 declared here, later in the translation unit\n  133 |     Type cots_pred_safe = posfun(cots_pred(t), eps, pen);        // Safe predicted COTS value\n      |                           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 0.5299,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         20     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.2615,
          0.2676,
          0.2725,
          0.281,
          0.2891,
          0.2963,
          0.3067,
          0.3178,
          0.3293,
          0.9339,
          0.8466,
          1.4059,
          1.3654,
          0.9768,
          0.8232,
          0.7039,
          0.6433,
          0.6116,
          0.4754,
          0.3905,
          0.3407,
          0.3008,
          0.2736,
          0.2564,
          0.2417,
          0.2308
        ],
        "fast_pred": [
          10.0694,
          10.7736,
          11.5365,
          12.365,
          13.251,
          14.1972,
          15.2078,
          16.2723,
          17.3861,
          18.5451,
          17.6751,
          17.0611,
          14.4699,
          11.8551,
          10.361,
          9.2476,
          8.4213,
          7.7094,
          7.0259,
          6.7028,
          6.6106,
          6.6637,
          6.8493,
          7.1443,
          7.5319,
          8.0162
        ],
        "slow_pred": [
          12.7726,
          13.0523,
          13.3172,
          13.5668,
          13.7921,
          13.9911,
          14.1625,
          14.2982,
          14.394,
          14.447,
          13.3967,
          12.5041,
          10.6183,
          8.8163,
          7.6815,
          6.7914,
          6.0827,
          5.456,
          4.8634,
          4.4713,
          4.1987,
          3.9916,
          3.836,
          3.7133,
          3.609,
          3.5195
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.2676,
            0.2725,
            0.281,
            0.2891,
            0.2963,
            0.3067,
            0.3178,
            0.3293,
            0.9339,
            0.8466,
            1.4059,
            1.3654,
            0.9768,
            0.8232,
            0.7039,
            0.6433,
            0.6116,
            0.4754,
            0.3905,
            0.3407,
            0.3008,
            0.2736,
            0.2564,
            0.2417,
            0.2308
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.7736,
            11.5365,
            12.365,
            13.251,
            14.1972,
            15.2078,
            16.2723,
            17.3861,
            18.5451,
            17.6751,
            17.0611,
            14.4699,
            11.8551,
            10.361,
            9.2476,
            8.4213,
            7.7094,
            7.0259,
            6.7028,
            6.6106,
            6.6637,
            6.8493,
            7.1443,
            7.5319,
            8.0162
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            13.0523,
            13.3172,
            13.5668,
            13.7921,
            13.9911,
            14.1625,
            14.2982,
            14.394,
            14.447,
            13.3967,
            12.5041,
            10.6183,
            8.8163,
            7.6815,
            6.7914,
            6.0827,
            5.456,
            4.8634,
            4.4713,
            4.1987,
            3.9916,
            3.836,
            3.7133,
            3.609,
            3.5195
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.so POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n               r_cots           K_cots_base       allee_threshold \n                 0.80                  3.00                  0.30 \n       allee_strength              temp_opt      temp_sensitivity \n                 2.00                 28.00                  0.15 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n                 0.50                  0.80                  0.40 \n   handling_time_fast    handling_time_slow conversion_efficiency \n                 0.30                  0.40                  0.15 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n          r_cots attack_rate_fast attack_rate_slow           r_fast \n            0.80             0.80             0.40             0.25 \n          r_slow \n            0.08 \nFinal parameter values for phase 1 :\n          r_cots attack_rate_fast attack_rate_slow           r_fast \n      0.10000000       3.00000000       2.00000000       0.18574556 \n          r_slow \n      0.09262473 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 30 \nObjective function value: 59.71522 \nGradient at solution for phase 1 :\n         [,1]       [,2]       [,3]          [,4]         [,5]\n[1,] 172.1583 -0.4598958 -0.1161997 -0.0001078274 6.891821e-05\nPhase 2 \nInitial parameter values for phase 2 :\n       K_cots_base    allee_threshold           temp_opt immigration_effect \n               3.0                0.3               28.0                0.5 \n     K_coral_total \n              60.0 \nFinal parameter values for phase 2 :\n       K_cots_base    allee_threshold           temp_opt immigration_effect \n        4.50194346         0.07679624        26.00000000         0.38936498 \n     K_coral_total \n       60.91335387 \nConvergence message: relative convergence (4) \nNumber of iterations: 29 \nObjective function value: 56.95333 \nGradient at solution for phase 2 :\n             [,1]         [,2]      [,3]         [,4]          [,5]\n[1,] 6.271722e-06 2.364999e-06 0.3538244 3.466801e-05 -8.707237e-07\nPhase 3 \nInitial parameter values for phase 3 :\n       allee_strength      temp_sensitivity    handling_time_fast \n                 2.00                  0.15                  0.30 \n   handling_time_slow conversion_efficiency      competition_fast \n                 0.40                  0.15                  0.60 \n     competition_slow \n                 0.40 \nFinal parameter values for phase 3 :\n       allee_strength      temp_sensitivity    handling_time_fast \n            5.0000000             0.0500000             0.2781146 \n   handling_time_slow conversion_efficiency      competition_fast \n            0.5266468             0.1982908             0.1000000 \n     competition_slow \n            1.0000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 44 \nObjective function value: 52.63034 \nGradient at solution for phase 3 :\n             [,1]     [,2]          [,3]          [,4]         [,5]     [,6]\n[1,] -0.003900466 27.90164 -6.728278e-05 -1.282759e-05 9.353193e-05 1.577365\n           [,7]\n[1,] -0.4714623\nPhase 4 \nInitial parameter values for phase 4 :\nsigma_cots sigma_fast sigma_slow \n       0.5        0.4        0.4 \nFinal parameter values for phase 4 :\nsigma_cots sigma_fast sigma_slow \n 0.5454796  0.5071518  0.3257561 \nConvergence message: relative convergence (4) \nNumber of iterations: 11 \nObjective function value: 49.87089 \nGradient at solution for phase 4 :\n              [,1]         [,2]          [,3]\n[1,] -0.0006982893 0.0001609623 -0.0003739575\nFinal Phase\nInitial parameter values for final phase:\n               r_cots           K_cots_base       allee_threshold \n           0.10000000            4.50194346            0.07679624 \n       allee_strength              temp_opt      temp_sensitivity \n           5.00000000           26.00000000            0.05000000 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n           0.38936498            3.00000000            2.00000000 \n   handling_time_fast    handling_time_slow conversion_efficiency \n           0.27811456            0.52664678            0.19829076 \n               r_fast                r_slow         K_coral_total \n           0.18574556            0.09262473           60.91335387 \n     competition_fast      competition_slow            sigma_cots \n           0.10000000            1.00000000            0.54547959 \n           sigma_fast            sigma_slow \n           0.50715182            0.32575607 \nFinal parameter values for final phase:\n               r_cots           K_cots_base       allee_threshold \n           0.11334929            4.50244715            0.07669752 \n       allee_strength              temp_opt      temp_sensitivity \n           5.00000000           26.00007868            0.05000000 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n           0.39513352            3.00000000            1.99989378 \n   handling_time_fast    handling_time_slow conversion_efficiency \n           0.26861338            0.52592295            0.20941674 \n               r_fast                r_slow         K_coral_total \n           0.19172973            0.09300510           60.91330086 \n     competition_fast      competition_slow            sigma_cots \n           0.10004032            0.99999742            0.54483794 \n           sigma_fast            sigma_slow \n           0.50677942            0.32543912 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 48.96947 \nGradient at solution for final phase:\n          [,1]      [,2]      [,3]         [,4]       [,5]     [,6]      [,7]\n[1,] -19.92891 -1.009073 0.1824854 -0.003808801 -0.1435863 11.35945 -8.787995\n           [,8]       [,9]     [,10]    [,11]     [,12]     [,13]   [,14]\n[1,] 0.09793308 0.03977381 0.4233304 6.510832 -21.69501 -42.72758 18.4454\n          [,15]    [,16]     [,17]    [,18]     [,19]     [,20]\n[1,] 0.09092454 1.632818 -1.113637 2.165176 0.7299572 0.2301214\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 3\n $ cots_pred: num [1:26] 0.262 0.268 0.273 0.281 0.289 ...\n $ fast_pred: num [1:26] 10.1 10.8 11.5 12.4 13.3 ...\n $ slow_pred: num [1:26] 12.8 13.1 13.3 13.6 13.8 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"fast_pred\" \"slow_pred\"\n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.2675507 0.2725309 0.280995 0.289108 0.2963286 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2308  0.2754  0.3236  0.5170  0.6887  1.4059 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.77363 11.53646 12.36501 13.251 14.19724 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  6.611   7.576  10.567  11.267  14.402  18.545 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 13.05228 13.31721 13.56675 13.79207 13.99106 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.519   4.569   9.717   9.282  13.524  14.447 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.2675507 0.2725309 0.280995 0.289108 0.2963286 ...\nMSE (normalized): 0.6329668 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.77363 11.53646 12.36501 13.251 14.19724 ...\nMSE (normalized): 0.7185788 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 13.05228 13.31721 13.56675 13.79207 13.99106 ...\nMSE (normalized): 0.2380959 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.6329668 0.7185788 0.2380959 \n\nDEBUG: Final objective value (mean of MSEs): 0.5298805 \n\nFinal objective function value: 0.5298805 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.5299,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         20     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.2615, 0.2676, 0.2725, 0.281, 0.2891, 0.2963, 0.3067, 0.3178, 0.3293, 0.9339, 0.8466, 1.4059, 1.3654, 0.9768, 0.8232, 0.7039, 0.6433, 0.6116, 0.4754, 0.3905, 0.3407, 0.3008, 0.2736, 0.2564, 0.2417, 0.2308],\n    \"fast_pred\": [10.0694, 10.7736, 11.5365, 12.365, 13.251, 14.1972, 15.2078, 16.2723, 17.3861, 18.5451, 17.6751, 17.0611, 14.4699, 11.8551, 10.361, 9.2476, 8.4213, 7.7094, 7.0259, 6.7028, 6.6106, 6.6637, 6.8493, 7.1443, 7.5319, 8.0162],\n    \"slow_pred\": [12.7726, 13.0523, 13.3172, 13.5668, 13.7921, 13.9911, 14.1625, 14.2982, 14.394, 14.447, 13.3967, 12.5041, 10.6183, 8.8163, 7.6815, 6.7914, 6.0827, 5.456, 4.8634, 4.4713, 4.1987, 3.9916, 3.836, 3.7133, 3.609, 3.5195]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.2676, 0.2725, 0.281, 0.2891, 0.2963, 0.3067, 0.3178, 0.3293, 0.9339, 0.8466, 1.4059, 1.3654, 0.9768, 0.8232, 0.7039, 0.6433, 0.6116, 0.4754, 0.3905, 0.3407, 0.3008, 0.2736, 0.2564, 0.2417, 0.2308],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.7736, 11.5365, 12.365, 13.251, 14.1972, 15.2078, 16.2723, 17.3861, 18.5451, 17.6751, 17.0611, 14.4699, 11.8551, 10.361, 9.2476, 8.4213, 7.7094, 7.0259, 6.7028, 6.6106, 6.6637, 6.8493, 7.1443, 7.5319, 8.0162],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 13.0523, 13.3172, 13.5668, 13.7921, 13.9911, 14.1625, 14.2982, 14.394, 14.447, 13.3967, 12.5041, 10.6183, 8.8163, 7.6815, 6.7914, 6.0827, 5.456, 4.8634, 4.4713, 4.1987, 3.9916, 3.836, 3.7133, 3.609, 3.5195],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 0.5299
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 0.7058,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         20     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.2615,
          0.5564,
          0.5687,
          0.5687,
          0.7106,
          0.5357,
          0.5513,
          0.5525,
          0.5562,
          0.9944,
          0.9858,
          1.4527,
          0.8357,
          0.8356,
          0.8356,
          0.4001,
          0.4001,
          0.4001,
          0.4001,
          0.4001,
          0.4001,
          0.4001,
          0.3974,
          0.3405,
          0.3405,
          0.3407
        ],
        "fast_pred": [
          10.0694,
          10.0484,
          10.0038,
          9.9585,
          9.9133,
          9.8572,
          9.815,
          9.7719,
          9.7288,
          9.6856,
          9.6088,
          9.5332,
          9.4226,
          9.3598,
          9.2973,
          9.2352,
          9.2057,
          9.1763,
          9.1469,
          9.1177,
          9.0885,
          9.0594,
          9.0305,
          9.0018,
          8.9773,
          8.9528
        ],
        "slow_pred": [
          12.7726,
          12.6044,
          12.2465,
          11.8812,
          11.5163,
          11.0608,
          10.718,
          10.3657,
          10.0131,
          9.6587,
          9.0261,
          8.401,
          7.4831,
          6.9584,
          6.4361,
          5.9165,
          5.6691,
          5.4224,
          5.1767,
          4.9318,
          4.6879,
          4.4452,
          4.2036,
          3.9649,
          3.7617,
          3.5595
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.5564,
            0.5687,
            0.5687,
            0.7106,
            0.5357,
            0.5513,
            0.5525,
            0.5562,
            0.9944,
            0.9858,
            1.4527,
            0.8357,
            0.8356,
            0.8356,
            0.4001,
            0.4001,
            0.4001,
            0.4001,
            0.4001,
            0.4001,
            0.4001,
            0.3974,
            0.3405,
            0.3405,
            0.3407
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.0484,
            10.0038,
            9.9585,
            9.9133,
            9.8572,
            9.815,
            9.7719,
            9.7288,
            9.6856,
            9.6088,
            9.5332,
            9.4226,
            9.3598,
            9.2973,
            9.2352,
            9.2057,
            9.1763,
            9.1469,
            9.1177,
            9.0885,
            9.0594,
            9.0305,
            9.0018,
            8.9773,
            8.9528
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            12.6044,
            12.2465,
            11.8812,
            11.5163,
            11.0608,
            10.718,
            10.3657,
            10.0131,
            9.6587,
            9.0261,
            8.401,
            7.4831,
            6.9584,
            6.4361,
            5.9165,
            5.6691,
            5.4224,
            5.1767,
            4.9318,
            4.6879,
            4.4452,
            4.2036,
            3.9649,
            3.7617,
            3.5595
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.cpp -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.so POPULATIONS/POPULATION_0024/INDIVIDUAL_BBNQJLGG/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n               r_cots           K_cots_base       allee_threshold \n                 0.80                  3.00                  0.30 \n       allee_strength              temp_opt      temp_sensitivity \n                 2.00                 28.60                  0.15 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n                 0.50                  0.80                  0.40 \n   handling_time_fast    handling_time_slow conversion_efficiency \n                 0.30                  0.40                  0.15 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n          r_cots attack_rate_fast attack_rate_slow           r_fast \n            0.80             0.80             0.40             0.25 \n          r_slow \n            0.08 \nFinal parameter values for phase 1 :\n          r_cots attack_rate_fast attack_rate_slow           r_fast \n      0.50862081       0.00000000       0.17406462       0.02913554 \n          r_slow \n      0.00000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 36 \nObjective function value: 146.6044 \nGradient at solution for phase 1 :\n             [,1]     [,2]          [,3]         [,4]     [,5]\n[1,] -6.74612e-06 82.79545 -5.808396e-07 7.107327e-06 217.4661\nPhase 2 \nInitial parameter values for phase 2 :\n       K_cots_base    allee_threshold           temp_opt immigration_effect \n               3.0                0.3               28.6                0.5 \n     K_coral_total \n              60.0 \nFinal parameter values for phase 2 :\n       K_cots_base    allee_threshold           temp_opt immigration_effect \n      2.459681e+00       4.740967e-07       2.891676e+01       1.678546e-01 \n     K_coral_total \n      1.577761e+01 \nConvergence message: relative convergence (4) \nNumber of iterations: 42 \nObjective function value: 73.93474 \nGradient at solution for phase 2 :\n             [,1]         [,2]          [,3]          [,4]          [,5]\n[1,] 6.877639e-06 5.593397e-06 -3.015699e-09 -1.006379e-06 -9.742283e-07\nPhase 3 \nInitial parameter values for phase 3 :\n       allee_strength      temp_sensitivity    handling_time_fast \n                 2.00                  0.15                  0.30 \n   handling_time_slow conversion_efficiency      competition_fast \n                 0.40                  0.15                  0.60 \n     competition_slow \n                 0.40 \nFinal parameter values for phase 3 :\n       allee_strength      temp_sensitivity    handling_time_fast \n            1.9999975             0.3063161             0.3000000 \n   handling_time_slow conversion_efficiency      competition_fast \n            0.7500509             0.1736797             0.4809173 \n     competition_slow \n            0.4000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 66 \nObjective function value: 71.11358 \nGradient at solution for phase 3 :\n             [,1]          [,2] [,3]         [,4]         [,5]          [,6]\n[1,] 3.794805e-07 -8.212637e-06    0 5.878455e-06 7.666481e-05 -4.438157e-06\n     [,7]\n[1,]    0\nPhase 4 \nInitial parameter values for phase 4 :\nsigma_cots sigma_fast sigma_slow \n       0.5        0.4        0.4 \nFinal parameter values for phase 4 :\nsigma_cots sigma_fast sigma_slow \n 0.3959111  0.7348071  0.3867092 \nConvergence message: relative convergence (4) \nNumber of iterations: 18 \nObjective function value: 55.53633 \nGradient at solution for phase 4 :\n           [,1]          [,2]          [,3]\n[1,] -1.476e-07 -1.377742e-06 -6.927738e-06\nFinal Phase\nInitial parameter values for final phase:\n               r_cots           K_cots_base       allee_threshold \n         5.086208e-01          2.459681e+00          4.740967e-07 \n       allee_strength              temp_opt      temp_sensitivity \n         1.999998e+00          2.891676e+01          3.063161e-01 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n         1.678546e-01          0.000000e+00          1.740646e-01 \n   handling_time_fast    handling_time_slow conversion_efficiency \n         3.000000e-01          7.500509e-01          1.736797e-01 \n               r_fast                r_slow         K_coral_total \n         2.913554e-02          0.000000e+00          1.577761e+01 \n     competition_fast      competition_slow            sigma_cots \n         4.809173e-01          4.000000e-01          3.959111e-01 \n           sigma_fast            sigma_slow \n         7.348071e-01          3.867092e-01 \nFinal parameter values for final phase:\n               r_cots           K_cots_base       allee_threshold \n          3.285826073           1.926170116           0.220229264 \n       allee_strength              temp_opt      temp_sensitivity \n          3.083261303          27.985726313           2.009309479 \n   immigration_effect      attack_rate_fast      attack_rate_slow \n          0.292106570           0.008219398           1.439945903 \n   handling_time_fast    handling_time_slow conversion_efficiency \n          0.378097680           1.500000000           0.241377156 \n               r_fast                r_slow         K_coral_total \n          0.000000000           0.000000000          16.323035382 \n     competition_fast      competition_slow            sigma_cots \n          0.969690039           0.399985429           0.306055150 \n           sigma_fast            sigma_slow \n          0.724710409           0.391202654 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 48.98572 \nGradient at solution for final phase:\n            [,1]        [,2]       [,3]        [,4]       [,5]        [,6]\n[1,] 0.006152749 -0.06466295 -0.1701419 -0.00292586 -0.4432297 -0.06406693\n           [,7]      [,8]       [,9]        [,10]     [,11]      [,12]    [,13]\n[1,] 0.09853065 -0.107234 0.05975628 -0.001166658 -1.780341 -0.5160051 22.78989\n        [,14]       [,15] [,16] [,17]     [,18]       [,19]      [,20]\n[1,] 2.456683 0.007630434     0     0 0.0197395 -0.06195197 0.01280343\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 3\n $ cots_pred: num [1:26] 0.262 0.556 0.569 0.569 0.711 ...\n $ fast_pred: num [1:26] 10.07 10.05 10 9.96 9.91 ...\n $ slow_pred: num [1:26] 12.8 12.6 12.2 11.9 11.5 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"fast_pred\" \"slow_pred\"\n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.5564444 0.5687407 0.5687407 0.7105989 0.5357143 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2615  0.4001  0.5435  0.5777  0.6751  1.4527 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.0484 10.00383 9.958479 9.913323 9.857153 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  8.953   9.125   9.391   9.464   9.804  10.069 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 12.60437 12.24655 11.8812 11.51626 11.06084 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.560   4.993   7.221   7.803  10.630  12.773 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.5564444 0.5687407 0.5687407 0.7105989 0.5357143 ...\nMSE (normalized): 0.3849803 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.0484 10.00383 9.958479 9.913323 9.857153 ...\nMSE (normalized): 1.285124 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 12.60437 12.24655 11.8812 11.51626 11.06084 ...\nMSE (normalized): 0.4473093 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.3849803 1.2851242 0.4473093 \n\nDEBUG: Final objective value (mean of MSEs): 0.7058046 \n\nFinal objective function value: 0.7058046 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.7058,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         20     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.2615, 0.5564, 0.5687, 0.5687, 0.7106, 0.5357, 0.5513, 0.5525, 0.5562, 0.9944, 0.9858, 1.4527, 0.8357, 0.8356, 0.8356, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.3974, 0.3405, 0.3405, 0.3407],\n    \"fast_pred\": [10.0694, 10.0484, 10.0038, 9.9585, 9.9133, 9.8572, 9.815, 9.7719, 9.7288, 9.6856, 9.6088, 9.5332, 9.4226, 9.3598, 9.2973, 9.2352, 9.2057, 9.1763, 9.1469, 9.1177, 9.0885, 9.0594, 9.0305, 9.0018, 8.9773, 8.9528],\n    \"slow_pred\": [12.7726, 12.6044, 12.2465, 11.8812, 11.5163, 11.0608, 10.718, 10.3657, 10.0131, 9.6587, 9.0261, 8.401, 7.4831, 6.9584, 6.4361, 5.9165, 5.6691, 5.4224, 5.1767, 4.9318, 4.6879, 4.4452, 4.2036, 3.9649, 3.7617, 3.5595]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.5564, 0.5687, 0.5687, 0.7106, 0.5357, 0.5513, 0.5525, 0.5562, 0.9944, 0.9858, 1.4527, 0.8357, 0.8356, 0.8356, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.4001, 0.3974, 0.3405, 0.3405, 0.3407],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.0484, 10.0038, 9.9585, 9.9133, 9.8572, 9.815, 9.7719, 9.7288, 9.6856, 9.6088, 9.5332, 9.4226, 9.3598, 9.2973, 9.2352, 9.2057, 9.1763, 9.1469, 9.1177, 9.0885, 9.0594, 9.0305, 9.0018, 8.9773, 8.9528],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 12.6044, 12.2465, 11.8812, 11.5163, 11.0608, 10.718, 10.3657, 10.0131, 9.6587, 9.0261, 8.401, 7.4831, 6.9584, 6.4361, 5.9165, 5.6691, 5.4224, 5.1767, 4.9318, 4.6879, 4.4452, 4.2036, 3.9649, 3.7617, 3.5595],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "6": {
      "status": "SUCCESS",
      "objective_value": 0.7058
    }
  }
}