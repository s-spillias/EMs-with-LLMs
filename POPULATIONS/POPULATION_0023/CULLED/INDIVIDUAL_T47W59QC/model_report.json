{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:114:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  114 |     cots_prev = fmax(cots_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:115:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  115 |     fast_prev = fmax(fast_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:116:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  116 |     slow_prev = fmax(slow_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:132:26: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  132 |     density_limit = fmax(density_limit, Type(0.0));\n      |                          ^~~~~~~~~~~~~\n      |                          |\n      |                          CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:151:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  151 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:161:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:162:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  162 |     fast_pred(t) = fmin(fast_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:169:24: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  169 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:170:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  170 |     slow_pred(t) = fmin(slow_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:114:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  114 |     cots_prev = fmax(cots_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:115:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  115 |     fast_prev = fmax(fast_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:116:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  116 |     slow_prev = fmax(slow_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:132:26: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  132 |     density_limit = fmax(density_limit, Type(0.0));\n      |                          ^~~~~~~~~~~~~\n      |                          |\n      |                          CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:151:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  151 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:161:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:162:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  162 |     fast_pred(t) = fmin(fast_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:169:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  169 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:170:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  170 |     slow_pred(t) = fmin(slow_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:114:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  114 |     cots_prev = fmax(cots_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:115:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  115 |     fast_prev = fmax(fast_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:116:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  116 |     slow_prev = fmax(slow_prev, eps);\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:132:26: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  132 |     density_limit = fmax(density_limit, Type(0.0));\n      |                          ^~~~~~~~~~~~~\n      |                          |\n      |                          CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:151:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  151 |     cots_pred(t) = fmax(cots_prev + cots_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:161:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_prev + fast_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:162:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  162 |     fast_pred(t) = fmin(fast_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:169:24: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  169 |     slow_pred(t) = fmax(slow_prev + slow_change, eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp:170:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  170 |     slow_pred(t) = fmin(slow_pred(t), Type(100.0)); // Cap at 100% cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "SUCCESS",
      "objective_value": 0.6049,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         25     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "sigma_slow": 2.1114,
        "K_cots": 1.6401,
        "competition_coef": 0,
        "immigration_effect": 9.4001,
        "temp_width_cots": 1.028,
        "mort_density_coef": 0.2106,
        "K_fast": 33.5386,
        "r_cots": 0.787,
        "attack_fast": 2.133,
        "K_slow": 29.0435,
        "slow_pred": [
          12.7726,
          13.2105,
          13.538,
          13.2604,
          12.6943,
          13.1302,
          13.1597,
          13.4522,
          13.6737,
          14.1037,
          13.7731,
          12.4044,
          11.7016,
          9.8962,
          8.2717,
          7.0096,
          6.3542,
          5.651,
          5.0103,
          4.6428,
          4.4456,
          4.1231,
          4.1428,
          4.4016,
          4.755,
          4.6883
        ],
        "sigma_cots": 0.45,
        "pref_fast": 0.6883,
        "attack_slow": 1.9979,
        "conversion_eff": 0.3639,
        "sigma_fast": 5.6303,
        "r_fast": 0.9812,
        "allee_strength": 15.1855,
        "temp_opt_coral": 27.3362,
        "temp_stress_width": 1.2448,
        "cots_pred": [
          0.2615,
          0.3608,
          0.485,
          0.5637,
          0.4695,
          0.5721,
          0.7076,
          0.6553,
          0.5832,
          0.5652,
          2.0051,
          1.0586,
          2.3867,
          1.7683,
          1.0218,
          0.7511,
          0.5949,
          0.4907,
          0.4156,
          0.3585,
          0.3136,
          0.2773,
          0.2473,
          0.2353,
          0.2827,
          0.2526
        ],
        "r_slow": 0.1585,
        "handling_fast": 0.1462,
        "mort_cots": 0.0498,
        "temp_opt_cots": 28.3649,
        "allee_threshold": 0.0128,
        "handling_slow": 0.124,
        "fast_pred": [
          10.0694,
          14.8647,
          19.737,
          20.0975,
          18.6373,
          24.0696,
          25.2367,
          27.474,
          28.0332,
          29.1753,
          27.1308,
          20.6016,
          19.5904,
          15.8715,
          11.7337,
          7.5297,
          7.5028,
          5.795,
          4.26,
          4.2189,
          4.7635,
          4.1355,
          5.5449,
          8.8816,
          13.9137,
          14.1782
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.3608,
            0.485,
            0.5637,
            0.4695,
            0.5721,
            0.7076,
            0.6553,
            0.5832,
            0.5652,
            2.0051,
            1.0586,
            2.3867,
            1.7683,
            1.0218,
            0.7511,
            0.5949,
            0.4907,
            0.4156,
            0.3585,
            0.3136,
            0.2773,
            0.2473,
            0.2353,
            0.2827,
            0.2526
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            14.8647,
            19.737,
            20.0975,
            18.6373,
            24.0696,
            25.2367,
            27.474,
            28.0332,
            29.1753,
            27.1308,
            20.6016,
            19.5904,
            15.8715,
            11.7337,
            7.5297,
            7.5028,
            5.795,
            4.26,
            4.2189,
            4.7635,
            4.1355,
            5.5449,
            8.8816,
            13.9137,
            14.1782
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            13.2105,
            13.538,
            13.2604,
            12.6943,
            13.1302,
            13.1597,
            13.4522,
            13.6737,
            14.1037,
            13.7731,
            12.4044,
            11.7016,
            9.8962,
            8.2717,
            7.0096,
            6.3542,
            5.651,
            5.0103,
            4.6428,
            4.4456,
            4.1231,
            4.1428,
            4.4016,
            4.755,
            4.6883
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.so POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n           log_r_cots            log_K_cots   log_allee_threshold \n                  0.5                   1.0                  -2.0 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n                  1.5                  -1.0                  -2.0 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n                  3.3                   0.7                   2.0 \n      log_attack_fast       log_attack_slow     log_handling_fast \n                  0.5                  -0.5                  -2.0 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold       log_mort_cots     log_attack_fast \n                0.5                -2.0                -1.0                 0.5 \n    log_attack_slow          log_r_fast          log_r_slow \n               -0.5                -1.5                -2.5 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold       log_mort_cots     log_attack_fast \n         -0.7753249          -4.3012072          -2.4086347           0.3274967 \n    log_attack_slow          log_r_fast          log_r_slow \n          0.2375770           0.0000000          -1.7081143 \nConvergence message: false convergence (8) \nNumber of iterations: 73 \nObjective function value: 202.5756 \nGradient at solution for phase 1 :\n          [,1]       [,2]      [,3]       [,4]       [,5]      [,6]        [,7]\n[1,] -1.603634 0.05817834 0.6618147 -0.1651011 0.01591116 -5.758875 -0.01037969\nPhase 2 \nInitial parameter values for phase 2 :\n           log_K_cots log_mort_density_coef     log_temp_opt_cots \n                  1.0                  -2.0                   3.3 \n   immigration_effect       preference_fast            log_K_fast \n                  2.0                   1.0                   3.5 \n           log_K_slow    log_temp_opt_coral \n                  3.2                   3.3 \nFinal parameter values for phase 2 :\n           log_K_cots log_mort_density_coef     log_temp_opt_cots \n             1.029265             -1.991976              3.339336 \n   immigration_effect       preference_fast            log_K_fast \n             9.447274              1.160936              3.614609 \n           log_K_slow    log_temp_opt_coral \n             3.200887              3.303914 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 105 \nObjective function value: 194.5517 \nGradient at solution for phase 2 :\n          [,1]      [,2]      [,3]      [,4]     [,5]      [,6]      [,7]\n[1,] -2.001671 -8.499132 -72.16042 0.1103213 1.172521 -8.835796 -1.732751\n         [,8]\n[1,] 26.20585\nPhase 3 \nInitial parameter values for phase 3 :\n   log_allee_strength   log_temp_width_cots     log_handling_fast \n                  1.5                   0.7                  -2.0 \n    log_handling_slow log_temp_stress_width      competition_coef \n                 -1.5                   0.5                   0.3 \nFinal parameter values for phase 3 :\n   log_allee_strength   log_temp_width_cots     log_handling_fast \n            1.8387750             0.8317766            -1.7419614 \n    log_handling_slow log_temp_stress_width      competition_coef \n           -1.4917307             0.2784781             0.2771515 \nConvergence message: relative convergence (4) \nNumber of iterations: 35 \nObjective function value: 190.8262 \nGradient at solution for phase 3 :\n          [,1]      [,2]     [,3]     [,4]     [,5]      [,6]\n[1,] -3.719207 -14.45187 17.04961 3.138653 3.264025 -23.73151\nPhase 4 \nInitial parameter values for phase 4 :\nlog_conversion_eff     log_sigma_cots     log_sigma_fast     log_sigma_slow \n                -1                 -1                  1                  1 \nFinal parameter values for phase 4 :\nlog_conversion_eff     log_sigma_cots     log_sigma_fast     log_sigma_slow \n        -1.0000000         -0.6082346          1.7089161          0.9078708 \nConvergence message: relative convergence (4) \nNumber of iterations: 8 \nObjective function value: 163.525 \nGradient at solution for phase 4 :\n     [,1]          [,2]          [,3]          [,4]\n[1,]    0 -0.0005699197 -0.0001118299 -7.308605e-05\nFinal Phase\nInitial parameter values for final phase:\n           log_r_cots            log_K_cots   log_allee_threshold \n           -0.7753249             1.0292651            -4.3012072 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n            1.8387750            -2.4086347            -1.9919765 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n            3.3393358             0.8317766             9.4472740 \n      log_attack_fast       log_attack_slow     log_handling_fast \n            0.3274967             0.2375770            -1.7419614 \n    log_handling_slow    log_conversion_eff       preference_fast \n           -1.4917307            -1.0000000             1.1609355 \n           log_r_fast            log_r_slow            log_K_fast \n            0.0000000            -1.7081143             3.6146086 \n           log_K_slow    log_temp_opt_coral log_temp_stress_width \n            3.2008875             3.3039136             0.2784781 \n     competition_coef        log_sigma_cots        log_sigma_fast \n            0.2771515            -0.6082346             1.7089161 \n       log_sigma_slow \n            0.9078708 \nFinal parameter values for final phase:\n           log_r_cots            log_K_cots   log_allee_threshold \n          -0.23951095            0.49476104           -4.36025667 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n           2.72034017           -3.00000000           -1.55788462 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n           3.34515322            0.02759524            9.40013583 \n      log_attack_fast       log_attack_slow     log_handling_fast \n           0.75753463            0.69209195           -1.92267309 \n    log_handling_slow    log_conversion_eff       preference_fast \n          -2.08748880           -1.01075448            0.79231398 \n           log_r_fast            log_r_slow            log_K_fast \n          -0.01898802           -1.84226690            3.51269794 \n           log_K_slow    log_temp_opt_coral log_temp_stress_width \n           3.36879427            3.30821261            0.21896841 \n     competition_coef        log_sigma_cots        log_sigma_fast \n           0.00000000           -0.82101415            1.72637902 \n       log_sigma_slow \n           0.74260086 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 155.2022 \nGradient at solution for final phase:\n          [,1]      [,2]       [,3]       [,4]     [,5]       [,6]     [,7]\n[1,] -3.701952 -1.001412 0.01524062 -0.2968135 1.420792 -0.2148174 -1.46032\n          [,8]        [,9]     [,10]      [,11]       [,12]       [,13] [,14]\n[1,] 0.3942235 0.004235936 0.7428672 -0.6741319 -0.01596589 -0.02661632     0\n         [,15]     [,16]    [,17]     [,18]   [,19]    [,20]     [,21]    [,22]\n[1,] 0.6955548 -2.598485 0.205588 -1.161532 0.24311 5.951356 -1.059458 2.227678\n         [,23]     [,24]    [,25]\n[1,] 0.6023996 -1.037066 -1.41835\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 28\n $ sigma_slow        : num 2.11\n $ K_cots            : num 1.64\n $ competition_coef  : num 0\n $ immigration_effect: num 9.4\n $ temp_width_cots   : num 1.03\n $ mort_density_coef : num 0.211\n $ K_fast            : num 33.5\n $ r_cots            : num 0.787\n $ attack_fast       : num 2.13\n $ K_slow            : num 29\n $ slow_pred         : num [1:26] 12.8 13.2 13.5 13.3 12.7 ...\n $ sigma_cots        : num 0.45\n $ pref_fast         : num 0.688\n $ attack_slow       : num 2\n $ conversion_eff    : num 0.364\n $ sigma_fast        : num 5.63\n $ r_fast            : num 0.981\n $ allee_strength    : num 15.2\n $ temp_opt_coral    : num 27.3\n $ temp_stress_width : num 1.24\n $ cots_pred         : num [1:26] 0.262 0.361 0.485 0.564 0.469 ...\n $ r_slow            : num 0.158\n $ handling_fast     : num 0.146\n $ mort_cots         : num 0.0498\n $ temp_opt_cots     : num 28.4\n $ allee_threshold   : num 0.0128\n $ handling_slow     : num 0.124\n $ fast_pred         : num [1:26] 10.1 14.9 19.7 20.1 18.6 ...\nNULL\n\nDEBUG: Available variables in report:\n [1] \"sigma_slow\"         \"K_cots\"             \"competition_coef\"  \n [4] \"immigration_effect\" \"temp_width_cots\"    \"mort_density_coef\" \n [7] \"K_fast\"             \"r_cots\"             \"attack_fast\"       \n[10] \"K_slow\"             \"slow_pred\"          \"sigma_cots\"        \n[13] \"pref_fast\"          \"attack_slow\"        \"conversion_eff\"    \n[16] \"sigma_fast\"         \"r_fast\"             \"allee_strength\"    \n[19] \"temp_opt_coral\"     \"temp_stress_width\"  \"cots_pred\"         \n[22] \"r_slow\"             \"handling_fast\"      \"mort_cots\"         \n[25] \"temp_opt_cots\"      \"allee_threshold\"    \"handling_slow\"     \n[28] \"fast_pred\"         \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.3607856 0.4850489 0.5637274 0.4694745 0.572093 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2353  0.3248  0.5272  0.6802  0.6946  2.3867 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 14.86474 19.73696 20.09751 18.63734 24.06958 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.136   7.510  14.521  15.117  20.476  29.175 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 13.21048 13.53795 13.26043 12.69426 13.13021 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.123   4.819  10.799   9.395  13.198  14.104 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.3607856 0.4850489 0.5637274 0.4694745 0.572093 ...\nMSE (normalized): 1.281518 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 14.86474 19.73696 20.09751 18.63734 24.06958 ...\nMSE (normalized): 0.3210125 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 13.21048 13.53795 13.26043 12.69426 13.13021 ...\nMSE (normalized): 0.2122907 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n1.2815182 0.3210125 0.2122907 \n\nDEBUG: Final objective value (mean of MSEs): 0.6049405 \n\nFinal objective function value: 0.6049405 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.6049,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         25     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"sigma_slow\": 2.1114,\n    \"K_cots\": 1.6401,\n    \"competition_coef\": 0,\n    \"immigration_effect\": 9.4001,\n    \"temp_width_cots\": 1.028,\n    \"mort_density_coef\": 0.2106,\n    \"K_fast\": 33.5386,\n    \"r_cots\": 0.787,\n    \"attack_fast\": 2.133,\n    \"K_slow\": 29.0435,\n    \"slow_pred\": [12.7726, 13.2105, 13.538, 13.2604, 12.6943, 13.1302, 13.1597, 13.4522, 13.6737, 14.1037, 13.7731, 12.4044, 11.7016, 9.8962, 8.2717, 7.0096, 6.3542, 5.651, 5.0103, 4.6428, 4.4456, 4.1231, 4.1428, 4.4016, 4.755, 4.6883],\n    \"sigma_cots\": 0.45,\n    \"pref_fast\": 0.6883,\n    \"attack_slow\": 1.9979,\n    \"conversion_eff\": 0.3639,\n    \"sigma_fast\": 5.6303,\n    \"r_fast\": 0.9812,\n    \"allee_strength\": 15.1855,\n    \"temp_opt_coral\": 27.3362,\n    \"temp_stress_width\": 1.2448,\n    \"cots_pred\": [0.2615, 0.3608, 0.485, 0.5637, 0.4695, 0.5721, 0.7076, 0.6553, 0.5832, 0.5652, 2.0051, 1.0586, 2.3867, 1.7683, 1.0218, 0.7511, 0.5949, 0.4907, 0.4156, 0.3585, 0.3136, 0.2773, 0.2473, 0.2353, 0.2827, 0.2526],\n    \"r_slow\": 0.1585,\n    \"handling_fast\": 0.1462,\n    \"mort_cots\": 0.0498,\n    \"temp_opt_cots\": 28.3649,\n    \"allee_threshold\": 0.0128,\n    \"handling_slow\": 0.124,\n    \"fast_pred\": [10.0694, 14.8647, 19.737, 20.0975, 18.6373, 24.0696, 25.2367, 27.474, 28.0332, 29.1753, 27.1308, 20.6016, 19.5904, 15.8715, 11.7337, 7.5297, 7.5028, 5.795, 4.26, 4.2189, 4.7635, 4.1355, 5.5449, 8.8816, 13.9137, 14.1782]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.3608, 0.485, 0.5637, 0.4695, 0.5721, 0.7076, 0.6553, 0.5832, 0.5652, 2.0051, 1.0586, 2.3867, 1.7683, 1.0218, 0.7511, 0.5949, 0.4907, 0.4156, 0.3585, 0.3136, 0.2773, 0.2473, 0.2353, 0.2827, 0.2526],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 14.8647, 19.737, 20.0975, 18.6373, 24.0696, 25.2367, 27.474, 28.0332, 29.1753, 27.1308, 20.6016, 19.5904, 15.8715, 11.7337, 7.5297, 7.5028, 5.795, 4.26, 4.2189, 4.7635, 4.1355, 5.5449, 8.8816, 13.9137, 14.1782],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 13.2105, 13.538, 13.2604, 12.6943, 13.1302, 13.1597, 13.4522, 13.6737, 14.1037, 13.7731, 12.4044, 11.7016, 9.8962, 8.2717, 7.0096, 6.3542, 5.651, 5.0103, 4.6428, 4.4456, 4.1231, 4.1428, 4.4016, 4.755, 4.6883],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 0.6049
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 1.5331,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         25     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "sigma_slow": 2.4615,
        "K_cots": 2.7183,
        "competition_coef": 1,
        "immigration_effect": 5.3794,
        "temp_width_cots": 2.3178,
        "mort_density_coef": 1,
        "K_fast": 99.4843,
        "r_cots": 1.6488,
        "attack_fast": 0.0101,
        "K_slow": 9.9742,
        "slow_pred": [
          12.7726,
          12.4895,
          12.4559,
          12.0165,
          12.0165,
          12.0077,
          11.9117,
          11.9114,
          11.9114,
          11.9112,
          11.9112,
          10.4372,
          10.4372,
          8.8686,
          8.8686,
          8.8686,
          8.7562,
          7.4883,
          4.8669,
          4.8669,
          4.8669,
          4.8669,
          4.8669,
          4.8669,
          4.8654,
          4.8654
        ],
        "sigma_cots": 2.7283,
        "pref_fast": 0.5,
        "attack_slow": 9.9742,
        "conversion_eff": 1,
        "sigma_fast": 11.3749,
        "r_fast": 0.0164,
        "allee_strength": 4.4817,
        "temp_opt_coral": 31.8498,
        "temp_stress_width": 1.1052,
        "cots_pred": [
          0.2615,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1.5,
          1e-08,
          1.6,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08
        ],
        "r_slow": 0.4966,
        "handling_fast": 1,
        "mort_cots": 2.5574,
        "temp_opt_cots": 24.0759,
        "allee_threshold": 0.1353,
        "handling_slow": 1,
        "fast_pred": [
          10.0694,
          10.0696,
          10.0701,
          10.0773,
          10.0773,
          10.0775,
          10.0792,
          10.0792,
          10.0792,
          10.0792,
          10.0792,
          10.078,
          10.078,
          10.0764,
          10.0764,
          10.0764,
          10.0802,
          10.1243,
          10.2501,
          10.2501,
          10.2501,
          10.2501,
          10.2501,
          10.2501,
          10.2503,
          10.2503
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1.5,
            1e-08,
            1.6,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.0696,
            10.0701,
            10.0773,
            10.0773,
            10.0775,
            10.0792,
            10.0792,
            10.0792,
            10.0792,
            10.0792,
            10.078,
            10.078,
            10.0764,
            10.0764,
            10.0764,
            10.0802,
            10.1243,
            10.2501,
            10.2501,
            10.2501,
            10.2501,
            10.2501,
            10.2501,
            10.2503,
            10.2503
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            12.4895,
            12.4559,
            12.0165,
            12.0165,
            12.0077,
            11.9117,
            11.9114,
            11.9114,
            11.9112,
            11.9112,
            10.4372,
            10.4372,
            8.8686,
            8.8686,
            8.8686,
            8.7562,
            7.4883,
            4.8669,
            4.8669,
            4.8669,
            4.8669,
            4.8669,
            4.8669,
            4.8654,
            4.8654
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.so POPULATIONS/POPULATION_0023/INDIVIDUAL_T47W59QC/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n           log_r_cots            log_K_cots   log_allee_threshold \n                0.500                 1.000                -2.000 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n                1.500                 0.939                -2.000 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n                3.300                 0.700                 2.000 \n      log_attack_fast       log_attack_slow     log_handling_fast \n                0.500                -0.500                -2.000 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold       log_mort_cots     log_attack_fast \n              0.500              -2.000               0.939               0.500 \n    log_attack_slow          log_r_fast          log_r_slow \n             -0.500              -1.500              -2.500 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold       log_mort_cots     log_attack_fast \n          0.5000063          -2.0000025           0.9390000           2.3000000 \n    log_attack_slow          log_r_fast          log_r_slow \n          2.1631139          -1.4958097          -4.6000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 12 \nObjective function value: 23839.88 \nGradient at solution for phase 1 :\n              [,1]         [,2]     [,3]      [,4]        [,5]         [,6]\n[1,] -1.040876e-06 4.085588e-07 28.51131 -3.844497 1.01732e-05 8.379844e-05\n         [,7]\n[1,] 3.137288\nPhase 2 \nInitial parameter values for phase 2 :\n           log_K_cots log_mort_density_coef     log_temp_opt_cots \n                  1.0                  -2.0                   3.3 \n   immigration_effect       preference_fast            log_K_fast \n                  2.0                   1.0                   3.5 \n           log_K_slow    log_temp_opt_coral \n                  3.2                   3.3 \nClamping starts up to lower bounds for:\n log_mort_density_coef, log_temp_opt_coral \nFinal parameter values for phase 2 :\n           log_K_cots log_mort_density_coef     log_temp_opt_cots \n            1.0000000             0.0000000             3.2999591 \n   immigration_effect       preference_fast            log_K_fast \n            2.0000033             0.3081888             4.6000000 \n           log_K_slow    log_temp_opt_coral \n            2.3024954             3.4000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 20 \nObjective function value: 23828.71 \nGradient at solution for phase 2 :\n              [,1]         [,2]         [,3]          [,4]        [,5]\n[1,] -1.493711e-15 1.048465e-15 1.839065e-06 -7.170301e-08 6.11229e-05\n          [,6]        [,7]     [,8]\n[1,] -15.08449 -0.00574805 1561.142\nPhase 3 \nInitial parameter values for phase 3 :\n   log_allee_strength   log_temp_width_cots     log_handling_fast \n                  1.5                   0.7                  -2.0 \n    log_handling_slow log_temp_stress_width      competition_coef \n                 -1.5                   0.5                   0.3 \nClamping starts up to lower bounds for:\n log_handling_fast, log_handling_slow \nFinal parameter values for phase 3 :\n   log_allee_strength   log_temp_width_cots     log_handling_fast \n            1.4999999             0.7000002             0.0000000 \n    log_handling_slow log_temp_stress_width      competition_coef \n            0.0000000             0.1000000             1.0000000 \nConvergence message: relative convergence (4) \nNumber of iterations: 3 \nObjective function value: 23927.44 \nGradient at solution for phase 3 :\n             [,1]          [,2]     [,3]     [,4]     [,5]      [,6]\n[1,] 1.170402e-07 -1.822777e-07 22.94468 13.42298 42.37098 -12.41555\nPhase 4 \nInitial parameter values for phase 4 :\nlog_conversion_eff     log_sigma_cots     log_sigma_fast     log_sigma_slow \n                -1                 -1                  1                  1 \nClamping starts up to lower bounds for:\n log_conversion_eff, log_sigma_cots \nFinal parameter values for phase 4 :\nlog_conversion_eff     log_sigma_cots     log_sigma_fast     log_sigma_slow \n          0.000000           1.000000           2.399741           1.529658 \nConvergence message: relative convergence (4) \nNumber of iterations: 10 \nObjective function value: 681.3924 \nGradient at solution for phase 4 :\n     [,1]      [,2]         [,3]         [,4]\n[1,]    0 -875.3166 7.263974e-06 1.599785e-07\nFinal Phase\nInitial parameter values for final phase:\n           log_r_cots            log_K_cots   log_allee_threshold \n            0.5000063             1.0000000            -2.0000025 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n            1.4999999             0.9390000             0.0000000 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n            3.2999591             0.7000002             2.0000033 \n      log_attack_fast       log_attack_slow     log_handling_fast \n            2.3000000             2.1631139             0.0000000 \n    log_handling_slow    log_conversion_eff       preference_fast \n            0.0000000             0.0000000             0.3081888 \n           log_r_fast            log_r_slow            log_K_fast \n           -1.4958097            -4.6000000             4.6000000 \n           log_K_slow    log_temp_opt_coral log_temp_stress_width \n            2.3024954             3.4000000             0.1000000 \n     competition_coef        log_sigma_cots        log_sigma_fast \n            1.0000000             1.0000000             2.3997408 \n       log_sigma_slow \n            1.5296585 \nFinal parameter values for final phase:\n           log_r_cots            log_K_cots   log_allee_threshold \n            0.5000193             1.0000000            -2.0000076 \n   log_allee_strength         log_mort_cots log_mort_density_coef \n            1.4999948             0.9390000             0.0000000 \n    log_temp_opt_cots   log_temp_width_cots    immigration_effect \n            3.1812102             0.8406014             5.3794471 \n      log_attack_fast       log_attack_slow     log_handling_fast \n           -4.6000000             2.3000000             0.0000000 \n    log_handling_slow    log_conversion_eff       preference_fast \n            0.0000000             0.0000000             0.0000000 \n           log_r_fast            log_r_slow            log_K_fast \n           -4.1096577            -0.7000000             4.6000000 \n           log_K_slow    log_temp_opt_coral log_temp_stress_width \n            2.3000000             3.4610313             0.1000000 \n     competition_coef        log_sigma_cots        log_sigma_fast \n            1.0000000             1.0000000             2.4305281 \n       log_sigma_slow \n            0.8966985 \nConvergence message: relative convergence (4) \nNumber of iterations: 92 \nObjective function value: 665.7915 \nGradient at solution for final phase:\n              [,1]          [,2]         [,3]         [,4]     [,5]\n[1,] -5.158285e-09 -6.281856e-17 2.024676e-09 2.024676e-09 28.51131\n             [,6]         [,7]          [,8]          [,9]       [,10]\n[1,] 2.103176e-17 -1.28592e-07 -1.377799e-08 -8.906943e-10 0.001499186\n            [,11]        [,12]      [,13] [,14]       [,15]        [,16]\n[1,] -0.006214363 0.0002390952 0.05150059     0 0.003856774 7.209474e-07\n         [,17]        [,18]   [,19]         [,20]   [,21]     [,22]     [,23]\n[1,] -2.779716 -0.001228265 1.58315 -0.0001598985 3.60784 -4.012829 -875.3166\n             [,24]        [,25]\n[1,] -1.231061e-05 9.375938e-07\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 28\n $ sigma_slow        : num 2.46\n $ K_cots            : num 2.72\n $ competition_coef  : num 1\n $ immigration_effect: num 5.38\n $ temp_width_cots   : num 2.32\n $ mort_density_coef : num 1\n $ K_fast            : num 99.5\n $ r_cots            : num 1.65\n $ attack_fast       : num 0.0101\n $ K_slow            : num 9.97\n $ slow_pred         : num [1:26] 12.8 12.5 12.5 12 12 ...\n $ sigma_cots        : num 2.73\n $ pref_fast         : num 0.5\n $ attack_slow       : num 9.97\n $ conversion_eff    : num 1\n $ sigma_fast        : num 11.4\n $ r_fast            : num 0.0164\n $ allee_strength    : num 4.48\n $ temp_opt_coral    : num 31.8\n $ temp_stress_width : num 1.11\n $ cots_pred         : num [1:26] 2.62e-01 1.00e-08 1.00e-08 1.00e-08 1.00e-08 ...\n $ r_slow            : num 0.497\n $ handling_fast     : num 1\n $ mort_cots         : num 2.56\n $ temp_opt_cots     : num 24.1\n $ allee_threshold   : num 0.135\n $ handling_slow     : num 1\n $ fast_pred         : num [1:26] 10.1 10.1 10.1 10.1 10.1 ...\nNULL\n\nDEBUG: Available variables in report:\n [1] \"sigma_slow\"         \"K_cots\"             \"competition_coef\"  \n [4] \"immigration_effect\" \"temp_width_cots\"    \"mort_density_coef\" \n [7] \"K_fast\"             \"r_cots\"             \"attack_fast\"       \n[10] \"K_slow\"             \"slow_pred\"          \"sigma_cots\"        \n[13] \"pref_fast\"          \"attack_slow\"        \"conversion_eff\"    \n[16] \"sigma_fast\"         \"r_fast\"             \"allee_strength\"    \n[19] \"temp_opt_coral\"     \"temp_stress_width\"  \"cots_pred\"         \n[22] \"r_slow\"             \"handling_fast\"      \"mort_cots\"         \n[25] \"temp_opt_cots\"      \"allee_threshold\"    \"handling_slow\"     \n[28] \"fast_pred\"         \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 1e-08 1e-08 1e-08 1e-08 1e-08 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1293  0.0000  1.6000 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.06958 10.07013 10.07735 10.07735 10.07751 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.07   10.08   10.08   10.13   10.25   10.25 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 12.48946 12.45595 12.01652 12.01652 12.00771 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.865   4.867   9.653   9.076  11.912  12.773 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 1e-08 1e-08 1e-08 1e-08 1e-08 ...\nMSE (normalized): 3.065893 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.06958 10.07013 10.07735 10.07735 10.07751 ...\nMSE (normalized): 1.259918 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 12.48946 12.45595 12.01652 12.01652 12.00771 ...\nMSE (normalized): 0.2735368 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n3.0658932 1.2599180 0.2735368 \n\nDEBUG: Final objective value (mean of MSEs): 1.533116 \n\nFinal objective function value: 1.533116 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 1.5331,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         25     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"sigma_slow\": 2.4615,\n    \"K_cots\": 2.7183,\n    \"competition_coef\": 1,\n    \"immigration_effect\": 5.3794,\n    \"temp_width_cots\": 2.3178,\n    \"mort_density_coef\": 1,\n    \"K_fast\": 99.4843,\n    \"r_cots\": 1.6488,\n    \"attack_fast\": 0.0101,\n    \"K_slow\": 9.9742,\n    \"slow_pred\": [12.7726, 12.4895, 12.4559, 12.0165, 12.0165, 12.0077, 11.9117, 11.9114, 11.9114, 11.9112, 11.9112, 10.4372, 10.4372, 8.8686, 8.8686, 8.8686, 8.7562, 7.4883, 4.8669, 4.8669, 4.8669, 4.8669, 4.8669, 4.8669, 4.8654, 4.8654],\n    \"sigma_cots\": 2.7283,\n    \"pref_fast\": 0.5,\n    \"attack_slow\": 9.9742,\n    \"conversion_eff\": 1,\n    \"sigma_fast\": 11.3749,\n    \"r_fast\": 0.0164,\n    \"allee_strength\": 4.4817,\n    \"temp_opt_coral\": 31.8498,\n    \"temp_stress_width\": 1.1052,\n    \"cots_pred\": [0.2615, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1.5, 1e-08, 1.6, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08],\n    \"r_slow\": 0.4966,\n    \"handling_fast\": 1,\n    \"mort_cots\": 2.5574,\n    \"temp_opt_cots\": 24.0759,\n    \"allee_threshold\": 0.1353,\n    \"handling_slow\": 1,\n    \"fast_pred\": [10.0694, 10.0696, 10.0701, 10.0773, 10.0773, 10.0775, 10.0792, 10.0792, 10.0792, 10.0792, 10.0792, 10.078, 10.078, 10.0764, 10.0764, 10.0764, 10.0802, 10.1243, 10.2501, 10.2501, 10.2501, 10.2501, 10.2501, 10.2501, 10.2503, 10.2503]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1.5, 1e-08, 1.6, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.0696, 10.0701, 10.0773, 10.0773, 10.0775, 10.0792, 10.0792, 10.0792, 10.0792, 10.0792, 10.078, 10.078, 10.0764, 10.0764, 10.0764, 10.0802, 10.1243, 10.2501, 10.2501, 10.2501, 10.2501, 10.2501, 10.2501, 10.2503, 10.2503],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 12.4895, 12.4559, 12.0165, 12.0165, 12.0077, 11.9117, 11.9114, 11.9114, 11.9112, 11.9112, 10.4372, 10.4372, 8.8686, 8.8686, 8.8686, 8.7562, 7.4883, 4.8669, 4.8669, 4.8669, 4.8669, 4.8669, 4.8669, 4.8654, 4.8654],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nINFO: Expanded zero-width bounds for log_mort_density_coef by epsilon.\nINFO: Expanded zero-width bounds for log_handling_fast by epsilon.\nINFO: Expanded zero-width bounds for log_handling_slow by epsilon.\nINFO: Expanded zero-width bounds for log_conversion_eff by epsilon.\nINFO: Expanded zero-width bounds for log_mort_density_coef by epsilon.\nINFO: Expanded zero-width bounds for log_handling_fast by epsilon.\nINFO: Expanded zero-width bounds for log_handling_slow by epsilon.\nINFO: Expanded zero-width bounds for log_conversion_eff by epsilon.\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 1.5331
    }
  }
}