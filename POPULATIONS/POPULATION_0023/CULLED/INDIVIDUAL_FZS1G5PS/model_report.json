{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:122:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  122 |     cots_pred(t) = fmax(cots_pred(t), Type(0.0));                                    // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:130:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  130 |     fast_pred(t) = fmax(fast_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:138:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  138 |     slow_pred(t) = fmax(slow_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:154:82: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  154 |   if(temp_opt < Type(20.0) || temp_opt > Type(32.0)) nll += Type(10.0) * pow(fmin(temp_opt - Type(32.0), Type(20.0) - temp_opt), 2); // Penalty if optimal temp outside realistic range\n      |                                                                              ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                                                                                  |\n      |                                                                                  CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:122:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  122 |     cots_pred(t) = fmax(cots_pred(t), Type(0.0));                                    // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:130:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  130 |     fast_pred(t) = fmax(fast_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:138:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  138 |     slow_pred(t) = fmax(slow_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:154:82: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  154 |   if(temp_opt < Type(20.0) || temp_opt > Type(32.0)) nll += Type(10.0) * pow(fmin(temp_opt - Type(32.0), Type(20.0) - temp_opt), 2); // Penalty if optimal temp outside realistic range\n      |                                                                              ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                                                                                  |\n      |                                                                                  CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:122:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  122 |     cots_pred(t) = fmax(cots_pred(t), Type(0.0));                                    // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:130:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  130 |     fast_pred(t) = fmax(fast_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:138:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  138 |     slow_pred(t) = fmax(slow_pred(t), Type(0.0));                                    // Ensure non-negative coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp:154:82: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  154 |   if(temp_opt < Type(20.0) || temp_opt > Type(32.0)) nll += Type(10.0) * pow(fmin(temp_opt - Type(32.0), Type(20.0) - temp_opt), 2); // Penalty if optimal temp outside realistic range\n      |                                                                              ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                                                                                  |\n      |                                                                                  CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "SUCCESS",
      "objective_value": 0.7672,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         21     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "handling_slow": 0.2938,
        "mort_cots": 0.3804,
        "r_cots": 0.9744,
        "preference": 2.1746,
        "K_cots": 2.1398,
        "cots_pred": [
          0.2615,
          0.2271,
          0.1956,
          0.1929,
          0.1503,
          0.117,
          0.0946,
          0.0678,
          0.047,
          0.0316,
          1.5207,
          0.8114,
          2.2477,
          1.0736,
          0.7709,
          0.6225,
          0.6831,
          0.8714,
          0.8283,
          0.6575,
          0.5452,
          0.4585,
          0.3863,
          0.3244,
          0.2801,
          0.228
        ],
        "temp_opt": 29.9717,
        "comp_slow": 0.5001,
        "allee_threshold": 0.6838,
        "attack_fast": 0.8041,
        "temp_effect": 1.3942,
        "dd_mort": 0.1847,
        "fast_pred": [
          10.0694,
          12.2235,
          14.7131,
          17.4482,
          20.1303,
          22.807,
          25.2603,
          27.3047,
          28.9455,
          30.1825,
          31.0673,
          21.181,
          19.7153,
          9.8707,
          8.3718,
          8.126,
          8.434,
          8.4457,
          7.5505,
          6.7706,
          6.6327,
          6.9123,
          7.5658,
          8.6149,
          10.1071,
          12.0359
        ],
        "attack_slow": 0.5092,
        "temp_width": 1.0169,
        "comp_fast": 1.9997,
        "r_fast": 0.5001,
        "sigma_fast": 2.0097,
        "r_slow": 0.0424,
        "handling_fast": 0.089,
        "slow_pred": [
          12.7726,
          12.7354,
          12.7385,
          12.7665,
          12.7751,
          12.8046,
          12.8379,
          12.8622,
          12.8839,
          12.9013,
          12.9141,
          11.6529,
          11.0195,
          8.9891,
          7.9761,
          7.3217,
          6.8558,
          6.3504,
          5.6816,
          5.0705,
          4.634,
          4.3161,
          4.0884,
          3.9322,
          3.8329,
          3.7718
        ],
        "K_coral": 72.0775,
        "sigma_cots": 0.5654,
        "sigma_slow": 2.0097
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.2271,
            0.1956,
            0.1929,
            0.1503,
            0.117,
            0.0946,
            0.0678,
            0.047,
            0.0316,
            1.5207,
            0.8114,
            2.2477,
            1.0736,
            0.7709,
            0.6225,
            0.6831,
            0.8714,
            0.8283,
            0.6575,
            0.5452,
            0.4585,
            0.3863,
            0.3244,
            0.2801,
            0.228
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            12.2235,
            14.7131,
            17.4482,
            20.1303,
            22.807,
            25.2603,
            27.3047,
            28.9455,
            30.1825,
            31.0673,
            21.181,
            19.7153,
            9.8707,
            8.3718,
            8.126,
            8.434,
            8.4457,
            7.5505,
            6.7706,
            6.6327,
            6.9123,
            7.5658,
            8.6149,
            10.1071,
            12.0359
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            12.7354,
            12.7385,
            12.7665,
            12.7751,
            12.8046,
            12.8379,
            12.8622,
            12.8839,
            12.9013,
            12.9141,
            11.6529,
            11.0195,
            8.9891,
            7.9761,
            7.3217,
            6.8558,
            6.3504,
            5.6816,
            5.0705,
            4.634,
            4.3161,
            4.0884,
            3.9322,
            3.8329,
            3.7718
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.so POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n             -0.693               0.693              -1.609              -1.204 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n             -1.609              27.500               0.693               0.405 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n             -1.204              -2.303               4.605               0.000 \nStarting model phases\nNumber of phases: 3 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold            temp_opt          log_r_fast \n             -0.693              -1.609              27.500              -1.204 \n         log_r_slow     log_attack_fast      log_preference \n             -2.303               0.000               0.693 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold            temp_opt          log_r_fast \n         0.01908924         -0.40918235         30.00000000         -1.40592581 \n         log_r_slow     log_attack_fast      log_preference \n        -3.21900000         -0.30074713          0.69394551 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 81 \nObjective function value: 3652.927 \nGradient at solution for phase 1 :\n             [,1]          [,2]      [,3]          [,4]     [,5]         [,6]\n[1,] 0.0002112029 -0.0001351784 -2.826998 -0.0003190043 345.4591 7.259499e-05\n             [,7]\n[1,] 7.259499e-05\nPhase 2 \nInitial parameter values for phase 2 :\n       log_K_cots     log_mort_cots   log_temp_effect   log_attack_slow \n            0.693            -1.204             0.405            -0.693 \nlog_handling_fast log_handling_slow \n           -1.609            -1.204 \nFinal parameter values for phase 2 :\n       log_K_cots     log_mort_cots   log_temp_effect   log_attack_slow \n        0.7090134        -0.9864714         0.3127104        -0.5951312 \nlog_handling_fast log_handling_slow \n       -2.1184756        -1.1857930 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 3211.736 \nGradient at solution for phase 2 :\n         [,1]     [,2]     [,3]     [,4]     [,5]     [,6]\n[1,] -717.768 760.4829 -294.814 16.82326 887.4955 279.7814\nPhase 3 \nInitial parameter values for phase 3 :\n   log_dd_mort log_temp_width    log_K_coral  log_comp_fast  log_comp_slow \n        -1.609          0.693          4.605          0.000          0.000 \nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -1.609         -0.693         -0.693 \nFinal parameter values for phase 3 :\n   log_dd_mort log_temp_width    log_K_coral  log_comp_fast  log_comp_slow \n    -1.6691477      0.0000000      4.5901602      0.6930000     -0.6930000 \nlog_sigma_cots log_sigma_fast log_sigma_slow \n    -0.5785003      0.6930000      0.6930000 \nConvergence message: relative convergence (4) \nNumber of iterations: 26 \nObjective function value: 290.6995 \nGradient at solution for phase 3 :\n              [,1]     [,2]         [,3]     [,4]     [,5]         [,6]\n[1,] -1.751089e-06 14.93987 1.249387e-05 -4.33943 4.339418 1.306024e-05\n          [,7]      [,8]\n[1,] -299.5629 -15.47833\nFinal Phase\nInitial parameter values for final phase:\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n         0.01908924          0.70901337         -0.40918235         -0.98647141 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n        -1.66914768         30.00000000          0.00000000          0.31271044 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n        -1.40592581         -3.21900000          4.59016016          0.69300000 \n      log_comp_slow     log_attack_fast     log_attack_slow   log_handling_fast \n        -0.69300000         -0.30074713         -0.59513122         -2.11847561 \n  log_handling_slow      log_preference      log_sigma_cots      log_sigma_fast \n        -1.18579299          0.69394551         -0.57850032          0.69300000 \n     log_sigma_slow \n         0.69300000 \nFinal parameter values for final phase:\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n        -0.02588317          0.76069094         -0.38005164         -0.96661660 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n        -1.68889272         29.97168299          0.01678104          0.33231926 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n        -0.69300000         -3.15945489          4.27774146          0.69300000 \n      log_comp_slow     log_attack_fast     log_attack_slow   log_handling_fast \n        -0.69300000         -0.21800885         -0.67493506         -2.41957384 \n  log_handling_slow      log_preference      log_sigma_cots      log_sigma_fast \n        -1.22472145          0.77685233         -0.58797701          0.69300000 \n     log_sigma_slow \n         0.69300000 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 228.4107 \nGradient at solution for final phase:\n         [,1]     [,2]      [,3]      [,4]      [,5]     [,6]      [,7]\n[1,] 2.295018 5.578537 -1.651191 -6.587714 -3.627452 2.264769 0.6859211\n          [,8]      [,9]     [,10]     [,11]     [,12]    [,13]    [,14]\n[1,] -1.428298 -37.00363 -1.669291 -2.116982 -1.077305 3.194287 2.474349\n          [,15]    [,16]     [,17]    [,18]      [,19]     [,20]    [,21]\n[1,] -0.4871705 4.588756 -2.315265 2.474349 -0.1658563 -183.6785 -7.71862\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 24\n $ handling_slow  : num 0.294\n $ mort_cots      : num 0.38\n $ r_cots         : num 0.974\n $ preference     : num 2.17\n $ K_cots         : num 2.14\n $ cots_pred      : num [1:26] 0.262 0.227 0.196 0.193 0.15 ...\n $ temp_opt       : num 30\n $ comp_slow      : num 0.5\n $ allee_threshold: num 0.684\n $ attack_fast    : num 0.804\n $ temp_effect    : num 1.39\n $ dd_mort        : num 0.185\n $ fast_pred      : num [1:26] 10.1 12.2 14.7 17.4 20.1 ...\n $ attack_slow    : num 0.509\n $ temp_width     : num 1.02\n $ comp_fast      : num 2\n $ r_fast         : num 0.5\n $ sigma_fast     : num 2.01\n $ r_slow         : num 0.0424\n $ handling_fast  : num 0.089\n $ slow_pred      : num [1:26] 12.8 12.7 12.7 12.8 12.8 ...\n $ K_coral        : num 72.1\n $ sigma_cots     : num 0.565\n $ sigma_slow     : num 2.01\nNULL\n\nDEBUG: Available variables in report:\n [1] \"handling_slow\"   \"mort_cots\"       \"r_cots\"          \"preference\"     \n [5] \"K_cots\"          \"cots_pred\"       \"temp_opt\"        \"comp_slow\"      \n [9] \"allee_threshold\" \"attack_fast\"     \"temp_effect\"     \"dd_mort\"        \n[13] \"fast_pred\"       \"attack_slow\"     \"temp_width\"      \"comp_fast\"      \n[17] \"r_fast\"          \"sigma_fast\"      \"r_slow\"          \"handling_fast\"  \n[21] \"slow_pred\"       \"K_coral\"         \"sigma_cots\"      \"sigma_slow\"     \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.2271381 0.1956182 0.1929396 0.1503179 0.1170084 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.03159 0.19361 0.35535 0.52674 0.74892 2.24765 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 12.2235 14.71308 17.44823 20.13033 22.80696 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  6.633   8.387  11.072  15.019  20.918  31.067 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 12.73543 12.73851 12.76648 12.77507 12.80461 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.772   5.223  10.004   9.096  12.774  12.914 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.2271381 0.1956182 0.1929396 0.1503179 0.1170084 ...\nMSE (normalized): 1.746168 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 12.2235 14.71308 17.44823 20.13033 22.80696 ...\nMSE (normalized): 0.3185606 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 12.73543 12.73851 12.76648 12.77507 12.80461 ...\nMSE (normalized): 0.2367422 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n1.7461685 0.3185606 0.2367422 \n\nDEBUG: Final objective value (mean of MSEs): 0.7671571 \n\nFinal objective function value: 0.7671571 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.7672,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         21     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"handling_slow\": 0.2938,\n    \"mort_cots\": 0.3804,\n    \"r_cots\": 0.9744,\n    \"preference\": 2.1746,\n    \"K_cots\": 2.1398,\n    \"cots_pred\": [0.2615, 0.2271, 0.1956, 0.1929, 0.1503, 0.117, 0.0946, 0.0678, 0.047, 0.0316, 1.5207, 0.8114, 2.2477, 1.0736, 0.7709, 0.6225, 0.6831, 0.8714, 0.8283, 0.6575, 0.5452, 0.4585, 0.3863, 0.3244, 0.2801, 0.228],\n    \"temp_opt\": 29.9717,\n    \"comp_slow\": 0.5001,\n    \"allee_threshold\": 0.6838,\n    \"attack_fast\": 0.8041,\n    \"temp_effect\": 1.3942,\n    \"dd_mort\": 0.1847,\n    \"fast_pred\": [10.0694, 12.2235, 14.7131, 17.4482, 20.1303, 22.807, 25.2603, 27.3047, 28.9455, 30.1825, 31.0673, 21.181, 19.7153, 9.8707, 8.3718, 8.126, 8.434, 8.4457, 7.5505, 6.7706, 6.6327, 6.9123, 7.5658, 8.6149, 10.1071, 12.0359],\n    \"attack_slow\": 0.5092,\n    \"temp_width\": 1.0169,\n    \"comp_fast\": 1.9997,\n    \"r_fast\": 0.5001,\n    \"sigma_fast\": 2.0097,\n    \"r_slow\": 0.0424,\n    \"handling_fast\": 0.089,\n    \"slow_pred\": [12.7726, 12.7354, 12.7385, 12.7665, 12.7751, 12.8046, 12.8379, 12.8622, 12.8839, 12.9013, 12.9141, 11.6529, 11.0195, 8.9891, 7.9761, 7.3217, 6.8558, 6.3504, 5.6816, 5.0705, 4.634, 4.3161, 4.0884, 3.9322, 3.8329, 3.7718],\n    \"K_coral\": 72.0775,\n    \"sigma_cots\": 0.5654,\n    \"sigma_slow\": 2.0097\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.2271, 0.1956, 0.1929, 0.1503, 0.117, 0.0946, 0.0678, 0.047, 0.0316, 1.5207, 0.8114, 2.2477, 1.0736, 0.7709, 0.6225, 0.6831, 0.8714, 0.8283, 0.6575, 0.5452, 0.4585, 0.3863, 0.3244, 0.2801, 0.228],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 12.2235, 14.7131, 17.4482, 20.1303, 22.807, 25.2603, 27.3047, 28.9455, 30.1825, 31.0673, 21.181, 19.7153, 9.8707, 8.3718, 8.126, 8.434, 8.4457, 7.5505, 6.7706, 6.6327, 6.9123, 7.5658, 8.6149, 10.1071, 12.0359],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 12.7354, 12.7385, 12.7665, 12.7751, 12.8046, 12.8379, 12.8622, 12.8839, 12.9013, 12.9141, 11.6529, 11.0195, 8.9891, 7.9761, 7.3217, 6.8558, 6.3504, 5.6816, 5.0705, 4.634, 4.3161, 4.0884, 3.9322, 3.8329, 3.7718],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 0.7672
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 1.3203,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         21     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "handling_slow": 0.0965,
        "mort_cots": 2.5574,
        "r_cots": 0.5001,
        "preference": 4.7454,
        "K_cots": 1.9997,
        "cots_pred": [
          0.2615,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1.5,
          0,
          1.6,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "temp_opt": 28.4977,
        "comp_slow": 0.5003,
        "allee_threshold": 0.2001,
        "attack_fast": 0.9954,
        "temp_effect": 1.4423,
        "dd_mort": 0.2001,
        "fast_pred": [
          10.0694,
          10.0718,
          12.1566,
          14.5342,
          17.1893,
          20.0828,
          23.1511,
          26.3075,
          29.4508,
          32.4765,
          35.2903,
          15.4054,
          18.2154,
          1.1378,
          1.439,
          1.8173,
          2.291,
          2.882,
          3.6157,
          4.5214,
          5.6314,
          6.9797,
          8.5997,
          10.5207,
          12.7624,
          15.3289
        ],
        "attack_slow": 2.5245,
        "temp_width": 2.0218,
        "comp_fast": 1.7624,
        "r_fast": 0.2769,
        "sigma_fast": 2.0097,
        "r_slow": 0.04,
        "handling_fast": 0.0401,
        "slow_pred": [
          12.7726,
          11.7506,
          12.1018,
          12.4437,
          12.772,
          13.0825,
          13.3711,
          13.6344,
          13.8697,
          14.0754,
          14.2516,
          9.5612,
          9.813,
          4.2554,
          4.4181,
          4.5858,
          4.7584,
          4.9357,
          5.1172,
          5.3023,
          5.4903,
          5.6801,
          5.8705,
          6.0599,
          6.2464,
          6.4278
        ],
        "K_coral": 93.5473,
        "sigma_cots": 0.7611,
        "sigma_slow": 2.0097
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1.5,
            0,
            1.6,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.0718,
            12.1566,
            14.5342,
            17.1893,
            20.0828,
            23.1511,
            26.3075,
            29.4508,
            32.4765,
            35.2903,
            15.4054,
            18.2154,
            1.1378,
            1.439,
            1.8173,
            2.291,
            2.882,
            3.6157,
            4.5214,
            5.6314,
            6.9797,
            8.5997,
            10.5207,
            12.7624,
            15.3289
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            11.7506,
            12.1018,
            12.4437,
            12.772,
            13.0825,
            13.3711,
            13.6344,
            13.8697,
            14.0754,
            14.2516,
            9.5612,
            9.813,
            4.2554,
            4.4181,
            4.5858,
            4.7584,
            4.9357,
            5.1172,
            5.3023,
            5.4903,
            5.6801,
            5.8705,
            6.0599,
            6.2464,
            6.4278
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.cpp -o POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.so POPULATIONS/POPULATION_0023/INDIVIDUAL_FZS1G5PS/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n             -0.693               0.693              -1.609               0.942 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n             -1.609              28.500               0.693               0.405 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n             -1.204              -2.303               4.605               0.000 \nStarting model phases\nNumber of phases: 3 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold            temp_opt          log_r_fast \n             -0.693              -1.609              28.500              -1.204 \n         log_r_slow     log_attack_fast      log_preference \n             -2.303               0.000               0.693 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold            temp_opt          log_r_fast \n        -0.69300000         -1.60900000         28.50000000         -2.30300000 \n         log_r_slow     log_attack_fast      log_preference \n        -3.21900000         -0.03024298          1.44248744 \nConvergence message: relative convergence (4) \nNumber of iterations: 9 \nObjective function value: 10995.87 \nGradient at solution for phase 1 :\n     [,1] [,2] [,3]     [,4]     [,5]         [,6]         [,7]\n[1,]    0    0    0 5835.005 7584.258 1.349972e-05 1.349972e-05\nPhase 2 \nInitial parameter values for phase 2 :\n       log_K_cots     log_mort_cots   log_temp_effect   log_attack_slow \n            0.693             0.942             0.405            -0.693 \nlog_handling_fast log_handling_slow \n           -1.609            -1.204 \nFinal parameter values for phase 2 :\n       log_K_cots     log_mort_cots   log_temp_effect   log_attack_slow \n         0.693000          0.939000          0.405000          1.099000 \nlog_handling_fast log_handling_slow \n        -3.219000         -1.643548 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 10 \nObjective function value: 4965.233 \nGradient at solution for phase 2 :\n     [,1]     [,2] [,3]      [,4]     [,5]        [,6]\n[1,]    0 79.65976    0 -1128.209 35.63874 1.23559e-08\nPhase 3 \nInitial parameter values for phase 3 :\n   log_dd_mort log_temp_width    log_K_coral  log_comp_fast  log_comp_slow \n        -1.609          0.693          4.605          0.000          0.000 \nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -1.609         -0.693         -0.693 \nFinal parameter values for phase 3 :\n   log_dd_mort log_temp_width    log_K_coral  log_comp_fast  log_comp_slow \n   -1.60900000     0.69300000     4.60500000     0.08109729    -0.69300000 \nlog_sigma_cots log_sigma_fast log_sigma_slow \n   -0.29883250     0.69300000     0.69300000 \nConvergence message: relative convergence (4) \nNumber of iterations: 17 \nObjective function value: 438.7495 \nGradient at solution for phase 3 :\n     [,1] [,2]      [,3]          [,4]     [,5]         [,6]      [,7]\n[1,]    0    0 -1.519014 -1.739108e-07 1.519014 1.127919e-08 -490.8011\n          [,8]\n[1,] -56.34812\nFinal Phase\nInitial parameter values for final phase:\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n        -0.69300000          0.69300000         -1.60900000          0.93900000 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n        -1.60900000         28.50000000          0.69300000          0.40500000 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n        -2.30300000         -3.21900000          4.60500000          0.08109729 \n      log_comp_slow     log_attack_fast     log_attack_slow   log_handling_fast \n        -0.69300000         -0.03024298          1.09900000         -3.21900000 \n  log_handling_slow      log_preference      log_sigma_cots      log_sigma_fast \n        -1.64354765          1.44248744         -0.29883250          0.69300000 \n     log_sigma_slow \n         0.69300000 \nFinal parameter values for final phase:\n         log_r_cots          log_K_cots log_allee_threshold       log_mort_cots \n       -0.693000000         0.693000000        -1.609000000         0.939000000 \n        log_dd_mort            temp_opt      log_temp_width     log_temp_effect \n       -1.608903623        28.497700019         0.703968222         0.366217630 \n         log_r_fast          log_r_slow         log_K_coral       log_comp_fast \n       -1.283955844        -3.219000000         4.538467457         0.566699787 \n      log_comp_slow     log_attack_fast     log_attack_slow   log_handling_fast \n       -0.692499834        -0.004624969         0.926049485        -3.216570010 \n  log_handling_slow      log_preference      log_sigma_cots      log_sigma_fast \n       -2.338241131         1.557178258        -0.286151764         0.693000000 \n     log_sigma_slow \n        0.693000000 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 321.3499 \nGradient at solution for final phase:\n     [,1] [,2] [,3]     [,4] [,5] [,6] [,7] [,8]     [,9]   [,10]   [,11]\n[1,]    0    0    0 79.65976    0    0    0    0 -2.97937 1.88302 1.03546\n         [,12]    [,13]     [,14]    [,15]     [,16]     [,17]     [,18]\n[1,] -2.470207 1.434747 0.6336009 4.301102 -5.033002 -12.14997 0.6336009\n         [,19]     [,20]     [,21]\n[1,] 0.6341637 -277.9181 -35.59223\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 24\n $ handling_slow  : num 0.0965\n $ mort_cots      : num 2.56\n $ r_cots         : num 0.5\n $ preference     : num 4.75\n $ K_cots         : num 2\n $ cots_pred      : num [1:26] 0.262 0 0 0 0 ...\n $ temp_opt       : num 28.5\n $ comp_slow      : num 0.5\n $ allee_threshold: num 0.2\n $ attack_fast    : num 0.995\n $ temp_effect    : num 1.44\n $ dd_mort        : num 0.2\n $ fast_pred      : num [1:26] 10.1 10.1 12.2 14.5 17.2 ...\n $ attack_slow    : num 2.52\n $ temp_width     : num 2.02\n $ comp_fast      : num 1.76\n $ r_fast         : num 0.277\n $ sigma_fast     : num 2.01\n $ r_slow         : num 0.04\n $ handling_fast  : num 0.0401\n $ slow_pred      : num [1:26] 12.8 11.8 12.1 12.4 12.8 ...\n $ K_coral        : num 93.5\n $ sigma_cots     : num 0.761\n $ sigma_slow     : num 2.01\nNULL\n\nDEBUG: Available variables in report:\n [1] \"handling_slow\"   \"mort_cots\"       \"r_cots\"          \"preference\"     \n [5] \"K_cots\"          \"cots_pred\"       \"temp_opt\"        \"comp_slow\"      \n [9] \"allee_threshold\" \"attack_fast\"     \"temp_effect\"     \"dd_mort\"        \n[13] \"fast_pred\"       \"attack_slow\"     \"temp_width\"      \"comp_fast\"      \n[17] \"r_fast\"          \"sigma_fast\"      \"r_slow\"          \"handling_fast\"  \n[21] \"slow_pred\"       \"K_coral\"         \"sigma_cots\"      \"sigma_slow\"     \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0 0 0 0 0 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1293  0.0000  1.6000 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.07184 12.15656 14.53422 17.18926 20.08283 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.138   4.799  11.339  13.151  17.959  35.290 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 11.75059 12.10184 12.44367 12.77196 13.08245 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.255   5.349   7.994   8.948  12.772  14.252 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0 0 0 0 0 ...\nMSE (normalized): 3.065893 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.07184 12.15656 14.53422 17.18926 20.08283 ...\nMSE (normalized): 0.4618255 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 11.75059 12.10184 12.44367 12.77196 13.08245 ...\nMSE (normalized): 0.4331998 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n3.0658932 0.4618255 0.4331998 \n\nDEBUG: Final objective value (mean of MSEs): 1.320306 \n\nFinal objective function value: 1.320306 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 1.3203,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         21     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"handling_slow\": 0.0965,\n    \"mort_cots\": 2.5574,\n    \"r_cots\": 0.5001,\n    \"preference\": 4.7454,\n    \"K_cots\": 1.9997,\n    \"cots_pred\": [0.2615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    \"temp_opt\": 28.4977,\n    \"comp_slow\": 0.5003,\n    \"allee_threshold\": 0.2001,\n    \"attack_fast\": 0.9954,\n    \"temp_effect\": 1.4423,\n    \"dd_mort\": 0.2001,\n    \"fast_pred\": [10.0694, 10.0718, 12.1566, 14.5342, 17.1893, 20.0828, 23.1511, 26.3075, 29.4508, 32.4765, 35.2903, 15.4054, 18.2154, 1.1378, 1.439, 1.8173, 2.291, 2.882, 3.6157, 4.5214, 5.6314, 6.9797, 8.5997, 10.5207, 12.7624, 15.3289],\n    \"attack_slow\": 2.5245,\n    \"temp_width\": 2.0218,\n    \"comp_fast\": 1.7624,\n    \"r_fast\": 0.2769,\n    \"sigma_fast\": 2.0097,\n    \"r_slow\": 0.04,\n    \"handling_fast\": 0.0401,\n    \"slow_pred\": [12.7726, 11.7506, 12.1018, 12.4437, 12.772, 13.0825, 13.3711, 13.6344, 13.8697, 14.0754, 14.2516, 9.5612, 9.813, 4.2554, 4.4181, 4.5858, 4.7584, 4.9357, 5.1172, 5.3023, 5.4903, 5.6801, 5.8705, 6.0599, 6.2464, 6.4278],\n    \"K_coral\": 93.5473,\n    \"sigma_cots\": 0.7611,\n    \"sigma_slow\": 2.0097\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5, 0, 1.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.0718, 12.1566, 14.5342, 17.1893, 20.0828, 23.1511, 26.3075, 29.4508, 32.4765, 35.2903, 15.4054, 18.2154, 1.1378, 1.439, 1.8173, 2.291, 2.882, 3.6157, 4.5214, 5.6314, 6.9797, 8.5997, 10.5207, 12.7624, 15.3289],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 11.7506, 12.1018, 12.4437, 12.772, 13.0825, 13.3711, 13.6344, 13.8697, 14.0754, 14.2516, 9.5612, 9.813, 4.2554, 4.4181, 4.5858, 4.7584, 4.9357, 5.1172, 5.3023, 5.4903, 5.6801, 5.8705, 6.0599, 6.2464, 6.4278],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 1.3203
    }
  }
}