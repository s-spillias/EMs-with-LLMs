{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), Type(0.001)); // Prevent extinction, maintain small population\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:157:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  157 |     fast_pred(t) = fmax(fast_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:158:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  158 |     fast_pred(t) = fmin(fast_pred(t), fast_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:166:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  166 |     slow_pred(t) = fmax(slow_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:167:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  167 |     slow_pred(t) = fmin(slow_pred(t), slow_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), Type(0.001)); // Prevent extinction, maintain small population\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:157:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  157 |     fast_pred(t) = fmax(fast_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:158:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  158 |     fast_pred(t) = fmin(fast_pred(t), fast_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:166:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  166 |     slow_pred(t) = fmax(slow_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:167:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  167 |     slow_pred(t) = fmin(slow_pred(t), slow_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), Type(0.001)); // Prevent extinction, maintain small population\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:157:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  157 |     fast_pred(t) = fmax(fast_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:158:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  158 |     fast_pred(t) = fmin(fast_pred(t), fast_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:166:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  166 |     slow_pred(t) = fmax(slow_pred(t), Type(0.01)); // Minimum coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp:167:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  167 |     slow_pred(t) = fmin(slow_pred(t), slow_carrying_cap); // Cap at carrying capacity\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "SUCCESS",
      "objective_value": 0.6772,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         24     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "sigma_slow": 2.0997,
        "attack_rate_slow": 0.6503,
        "fast_growth_rate": 0.2582,
        "cots_mort_base": 0.2456,
        "fast_carrying_cap": 46.3939,
        "immigration_effect": 1.1747,
        "temp_stress_rate": 0.1337,
        "slow_carrying_cap": 38.4779,
        "temp_recruit_opt": 28.0309,
        "slow_growth_rate": 0.0729,
        "slow_pred": [
          12.7726,
          12.9349,
          13.4211,
          13.7661,
          13.9804,
          13.6249,
          14.1175,
          13.1389,
          13.6046,
          12.3455,
          11.599,
          11.8364,
          10.7346,
          10.3395,
          7.9122,
          7.9337,
          7.3936,
          6.636,
          3.9288,
          3.6336,
          3.4506,
          3.5547,
          3.7511,
          3.9554,
          4.1672,
          4.388
        ],
        "handling_time_slow": 0.3583,
        "sigma_cots": 0.3878,
        "coral_competition": 0.4967,
        "sigma_fast": 10.0141,
        "cots_recruit_base": 0.6863,
        "allee_strength": 1.1821,
        "conversion_efficiency": 0.0573,
        "cots_pred": [
          0.2615,
          0.3175,
          0.4317,
          0.5437,
          0.4747,
          0.5647,
          0.751,
          0.7593,
          0.8446,
          0.8027,
          0.7532,
          0.7828,
          1.0017,
          1.4682,
          0.7328,
          0.5328,
          0.5727,
          0.5955,
          0.3943,
          0.3076,
          0.2569,
          0.2386,
          0.2742,
          0.3445,
          0.4735,
          0.4669
        ],
        "handling_time_fast": 0.1264,
        "temp_recruit_width": 1.5549,
        "preference_switch": 10.1675,
        "allee_threshold": 0.2295,
        "density_mort_rate": 0.4013,
        "temp_stress_threshold": 29.0916,
        "attack_rate_fast": 1.8544,
        "fast_pred": [
          10.0694,
          11.1977,
          11.1827,
          10.3812,
          9.7981,
          11.0586,
          9.6357,
          10.9613,
          8.4813,
          9.9507,
          10.5059,
          8.6887,
          10.225,
          8.7854,
          10.3652,
          9.2239,
          10.9343,
          8.0583,
          7.1426,
          8.6251,
          10.3505,
          11.3004,
          12.0308,
          12.6054,
          12.8015,
          12.2377
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.3175,
            0.4317,
            0.5437,
            0.4747,
            0.5647,
            0.751,
            0.7593,
            0.8446,
            0.8027,
            0.7532,
            0.7828,
            1.0017,
            1.4682,
            0.7328,
            0.5328,
            0.5727,
            0.5955,
            0.3943,
            0.3076,
            0.2569,
            0.2386,
            0.2742,
            0.3445,
            0.4735,
            0.4669
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            11.1977,
            11.1827,
            10.3812,
            9.7981,
            11.0586,
            9.6357,
            10.9613,
            8.4813,
            9.9507,
            10.5059,
            8.6887,
            10.225,
            8.7854,
            10.3652,
            9.2239,
            10.9343,
            8.0583,
            7.1426,
            8.6251,
            10.3505,
            11.3004,
            12.0308,
            12.6054,
            12.8015,
            12.2377
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            12.9349,
            13.4211,
            13.7661,
            13.9804,
            13.6249,
            14.1175,
            13.1389,
            13.6046,
            12.3455,
            11.599,
            11.8364,
            10.7346,
            10.3395,
            7.9122,
            7.9337,
            7.3936,
            6.636,
            3.9288,
            3.6336,
            3.4506,
            3.5547,
            3.7511,
            3.9554,
            4.1672,
            4.388
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.so POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n log_cots_recruit_base     log_cots_mort_base    log_allee_threshold \n                -0.693                 -0.693                 -1.609 \n    log_allee_strength   log_temp_recruit_opt log_temp_recruit_width \n                 0.693                  3.332                  0.693 \n log_density_mort_rate log_immigration_effect   log_fast_growth_rate \n                -1.609                  0.000                 -1.609 \n  log_slow_growth_rate  log_fast_carrying_cap  log_slow_carrying_cap \n                -3.219                  3.689                  3.219 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\nlog_cots_recruit_base    log_cots_mort_base  log_fast_growth_rate \n               -0.693                -0.693                -1.609 \n log_slow_growth_rate  log_attack_rate_fast  log_attack_rate_slow \n               -3.219                 0.693                 0.000 \nFinal parameter values for phase 1 :\nlog_cots_recruit_base    log_cots_mort_base  log_fast_growth_rate \n           -0.3371497            -1.2184868            -1.3132674 \n log_slow_growth_rate  log_attack_rate_fast  log_attack_rate_slow \n           -3.2153214             0.7085516            -0.0537113 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 1010.952 \nGradient at solution for phase 1 :\n       [,1]      [,2]     [,3]     [,4]     [,5]     [,6]\n[1,] 1333.3 -841.4822 33.46237 2.963821 303.7225 79.36331\nPhase 2 \nInitial parameter values for phase 2 :\n      log_allee_threshold      log_temp_recruit_opt     log_density_mort_rate \n                   -1.609                     3.332                    -1.609 \n   log_immigration_effect     log_fast_carrying_cap     log_slow_carrying_cap \n                    0.000                     3.689                     3.219 \nlog_temp_stress_threshold    log_handling_time_fast    log_handling_time_slow \n                    3.367                    -2.303                    -1.609 \nlog_conversion_efficiency \n                   -2.303 \nFinal parameter values for phase 2 :\n      log_allee_threshold      log_temp_recruit_opt     log_density_mort_rate \n               -1.5101991                 3.3549326                -0.8025337 \n   log_immigration_effect     log_fast_carrying_cap     log_slow_carrying_cap \n               -0.3313436                 3.9082822                 3.5670757 \nlog_temp_stress_threshold    log_handling_time_fast    log_handling_time_slow \n                3.3806563                -2.0928041                -0.8742037 \nlog_conversion_efficiency \n               -2.8259098 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 432.4091 \nGradient at solution for phase 2 :\n          [,1]    [,2]      [,3]      [,4]      [,5]      [,6]     [,7]\n[1,] -27.12083 136.512 -61.17488 -8.366983 -15.36548 -5.701604 12.40745\n         [,8]      [,9]    [,10]\n[1,] -54.6484 -24.76464 48.88583\nPhase 3 \nInitial parameter values for phase 3 :\n    log_allee_strength log_temp_recruit_width  log_coral_competition \n                 0.693                  0.693                 -0.693 \n  log_temp_stress_rate  log_preference_switch \n                -1.609                  2.303 \nFinal parameter values for phase 3 :\n    log_allee_strength log_temp_recruit_width  log_coral_competition \n             0.5831089              0.7422817             -0.9015118 \n  log_temp_stress_rate  log_preference_switch \n            -1.5742789              2.3022136 \nConvergence message: relative convergence (4) \nNumber of iterations: 62 \nObjective function value: 428.9963 \nGradient at solution for phase 3 :\n             [,1]         [,2]         [,3]        [,4]          [,5]\n[1,] 0.0003650571 0.0008152576 8.437395e-05 -8.7276e-05 -0.0006299139\nPhase 4 \nInitial parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -2.303          1.099          1.099 \nFinal parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n    -0.9702484      2.3030000      1.1086250 \nConvergence message: relative convergence (4) \nNumber of iterations: 9 \nObjective function value: 178.3481 \nGradient at solution for phase 4 :\n              [,1]      [,2]         [,3]\n[1,] -1.213808e-06 -6.805795 2.334152e-05\nFinal Phase\nInitial parameter values for final phase:\n    log_cots_recruit_base        log_cots_mort_base       log_allee_threshold \n               -0.3371497                -1.2184868                -1.5101991 \n       log_allee_strength      log_temp_recruit_opt    log_temp_recruit_width \n                0.5831089                 3.3549326                 0.7422817 \n    log_density_mort_rate    log_immigration_effect      log_fast_growth_rate \n               -0.8025337                -0.3313436                -1.3132674 \n     log_slow_growth_rate     log_fast_carrying_cap     log_slow_carrying_cap \n               -3.2153214                 3.9082822                 3.5670757 \n    log_coral_competition log_temp_stress_threshold      log_temp_stress_rate \n               -0.9015118                 3.3806563                -1.5742789 \n     log_attack_rate_fast      log_attack_rate_slow    log_handling_time_fast \n                0.7085516                -0.0537113                -2.0928041 \n   log_handling_time_slow     log_preference_switch log_conversion_efficiency \n               -0.8742037                 2.3022136                -2.8259098 \n           log_sigma_cots            log_sigma_fast            log_sigma_slow \n               -0.9702484                 2.3030000                 1.1086250 \nFinal parameter values for final phase:\n    log_cots_recruit_base        log_cots_mort_base       log_allee_threshold \n               -0.3763858                -1.4041024                -1.4718927 \n       log_allee_strength      log_temp_recruit_opt    log_temp_recruit_width \n                0.1673285                 3.3333085                 0.4414007 \n    log_density_mort_rate    log_immigration_effect      log_fast_growth_rate \n               -0.9130910                 0.1610058                -1.3541312 \n     log_slow_growth_rate     log_fast_carrying_cap     log_slow_carrying_cap \n               -2.6184815                 3.8371688                 3.6500850 \n    log_coral_competition log_temp_stress_threshold      log_temp_stress_rate \n               -0.6998566                 3.3704498                -2.0122105 \n     log_attack_rate_fast      log_attack_rate_slow    log_handling_time_fast \n                0.6175579                -0.4303163                -2.0681444 \n   log_handling_time_slow     log_preference_switch log_conversion_efficiency \n               -1.0264657                 2.3191989                -2.8588838 \n           log_sigma_cots            log_sigma_fast            log_sigma_slow \n               -0.9734820                 2.3030000                 0.7370007 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 139 \nObjective function value: 170.1364 \nGradient at solution for final phase:\n        [,1]      [,2]      [,3]     [,4]      [,5]     [,6]      [,7]\n[1,] 24.9054 -18.32439 -7.468637 6.166549 -159.4497 14.78909 -19.21755\n          [,8]      [,9]     [,10]     [,11]     [,12]   [,13]     [,14]\n[1,] 0.2282524 -6.019892 -6.451486 -3.732144 -5.054523 3.06253 -32.84205\n         [,15]    [,16]    [,17]     [,18]     [,19]     [,20]    [,21]\n[1,] 0.2521869 5.262987 4.016619 -13.58424 -10.84422 -10.07066 16.80333\n         [,22]     [,23]     [,24]\n[1,] 0.5227536 -6.212596 -4.098722\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 27\n $ sigma_slow           : num 2.1\n $ attack_rate_slow     : num 0.65\n $ fast_growth_rate     : num 0.258\n $ cots_mort_base       : num 0.246\n $ fast_carrying_cap    : num 46.4\n $ immigration_effect   : num 1.17\n $ temp_stress_rate     : num 0.134\n $ slow_carrying_cap    : num 38.5\n $ temp_recruit_opt     : num 28\n $ slow_growth_rate     : num 0.0729\n $ slow_pred            : num [1:26] 12.8 12.9 13.4 13.8 14 ...\n $ handling_time_slow   : num 0.358\n $ sigma_cots           : num 0.388\n $ coral_competition    : num 0.497\n $ sigma_fast           : num 10\n $ cots_recruit_base    : num 0.686\n $ allee_strength       : num 1.18\n $ conversion_efficiency: num 0.0573\n $ cots_pred            : num [1:26] 0.262 0.317 0.432 0.544 0.475 ...\n $ handling_time_fast   : num 0.126\n $ temp_recruit_width   : num 1.55\n $ preference_switch    : num 10.2\n $ allee_threshold      : num 0.229\n $ density_mort_rate    : num 0.401\n $ temp_stress_threshold: num 29.1\n $ attack_rate_fast     : num 1.85\n $ fast_pred            : num [1:26] 10.1 11.2 11.2 10.4 9.8 ...\nNULL\n\nDEBUG: Available variables in report:\n [1] \"sigma_slow\"            \"attack_rate_slow\"      \"fast_growth_rate\"     \n [4] \"cots_mort_base\"        \"fast_carrying_cap\"     \"immigration_effect\"   \n [7] \"temp_stress_rate\"      \"slow_carrying_cap\"     \"temp_recruit_opt\"     \n[10] \"slow_growth_rate\"      \"slow_pred\"             \"handling_time_slow\"   \n[13] \"sigma_cots\"            \"coral_competition\"     \"sigma_fast\"           \n[16] \"cots_recruit_base\"     \"allee_strength\"        \"conversion_efficiency\"\n[19] \"cots_pred\"             \"handling_time_fast\"    \"temp_recruit_width\"   \n[22] \"preference_switch\"     \"allee_threshold\"       \"density_mort_rate\"    \n[25] \"temp_stress_threshold\" \"attack_rate_fast\"      \"fast_pred\"            \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.3174598 0.4317497 0.5436609 0.4746694 0.5646596 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2386  0.3570  0.5382  0.5749  0.7527  1.4682 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 11.19765 11.18273 10.38116 9.798129 11.05855 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  7.143   9.327  10.358  10.254  11.152  12.801 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 12.93494 13.42108 13.76609 13.98038 13.62487 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.451   4.222  10.537   9.189  13.088  14.117 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.3174598 0.4317497 0.5436609 0.4746694 0.5646596 ...\nMSE (normalized): 0.5908762 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 11.19765 11.18273 10.38116 9.798129 11.05855 ...\nMSE (normalized): 1.210076 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 12.93494 13.42108 13.76609 13.98038 13.62487 ...\nMSE (normalized): 0.2305539 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.5908762 1.2100757 0.2305539 \n\nDEBUG: Final objective value (mean of MSEs): 0.6771686 \n\nFinal objective function value: 0.6771686 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.6772,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         24     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"sigma_slow\": 2.0997,\n    \"attack_rate_slow\": 0.6503,\n    \"fast_growth_rate\": 0.2582,\n    \"cots_mort_base\": 0.2456,\n    \"fast_carrying_cap\": 46.3939,\n    \"immigration_effect\": 1.1747,\n    \"temp_stress_rate\": 0.1337,\n    \"slow_carrying_cap\": 38.4779,\n    \"temp_recruit_opt\": 28.0309,\n    \"slow_growth_rate\": 0.0729,\n    \"slow_pred\": [12.7726, 12.9349, 13.4211, 13.7661, 13.9804, 13.6249, 14.1175, 13.1389, 13.6046, 12.3455, 11.599, 11.8364, 10.7346, 10.3395, 7.9122, 7.9337, 7.3936, 6.636, 3.9288, 3.6336, 3.4506, 3.5547, 3.7511, 3.9554, 4.1672, 4.388],\n    \"handling_time_slow\": 0.3583,\n    \"sigma_cots\": 0.3878,\n    \"coral_competition\": 0.4967,\n    \"sigma_fast\": 10.0141,\n    \"cots_recruit_base\": 0.6863,\n    \"allee_strength\": 1.1821,\n    \"conversion_efficiency\": 0.0573,\n    \"cots_pred\": [0.2615, 0.3175, 0.4317, 0.5437, 0.4747, 0.5647, 0.751, 0.7593, 0.8446, 0.8027, 0.7532, 0.7828, 1.0017, 1.4682, 0.7328, 0.5328, 0.5727, 0.5955, 0.3943, 0.3076, 0.2569, 0.2386, 0.2742, 0.3445, 0.4735, 0.4669],\n    \"handling_time_fast\": 0.1264,\n    \"temp_recruit_width\": 1.5549,\n    \"preference_switch\": 10.1675,\n    \"allee_threshold\": 0.2295,\n    \"density_mort_rate\": 0.4013,\n    \"temp_stress_threshold\": 29.0916,\n    \"attack_rate_fast\": 1.8544,\n    \"fast_pred\": [10.0694, 11.1977, 11.1827, 10.3812, 9.7981, 11.0586, 9.6357, 10.9613, 8.4813, 9.9507, 10.5059, 8.6887, 10.225, 8.7854, 10.3652, 9.2239, 10.9343, 8.0583, 7.1426, 8.6251, 10.3505, 11.3004, 12.0308, 12.6054, 12.8015, 12.2377]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.3175, 0.4317, 0.5437, 0.4747, 0.5647, 0.751, 0.7593, 0.8446, 0.8027, 0.7532, 0.7828, 1.0017, 1.4682, 0.7328, 0.5328, 0.5727, 0.5955, 0.3943, 0.3076, 0.2569, 0.2386, 0.2742, 0.3445, 0.4735, 0.4669],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 11.1977, 11.1827, 10.3812, 9.7981, 11.0586, 9.6357, 10.9613, 8.4813, 9.9507, 10.5059, 8.6887, 10.225, 8.7854, 10.3652, 9.2239, 10.9343, 8.0583, 7.1426, 8.6251, 10.3505, 11.3004, 12.0308, 12.6054, 12.8015, 12.2377],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 12.9349, 13.4211, 13.7661, 13.9804, 13.6249, 14.1175, 13.1389, 13.6046, 12.3455, 11.599, 11.8364, 10.7346, 10.3395, 7.9122, 7.9337, 7.3936, 6.636, 3.9288, 3.6336, 3.4506, 3.5547, 3.7511, 3.9554, 4.1672, 4.388],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 0.6772
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 0.6864,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         24     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "sigma_slow": 2.2313,
        "attack_rate_slow": 0.3634,
        "fast_growth_rate": 0.2,
        "cots_mort_base": 0.1698,
        "fast_carrying_cap": 45.8873,
        "immigration_effect": 1.4341,
        "temp_stress_rate": 0.1575,
        "slow_carrying_cap": 77.762,
        "temp_recruit_opt": 28.9027,
        "slow_growth_rate": 0.05,
        "slow_pred": [
          12.7726,
          13.0666,
          13.4127,
          12.809,
          13.0371,
          12.6493,
          12.8543,
          12.2994,
          12.098,
          11.9797,
          11.5254,
          11.8347,
          10.9017,
          9.9811,
          9.2002,
          9.1118,
          8.5746,
          6.8614,
          3.6907,
          3.3756,
          3.1673,
          3.0229,
          2.929,
          2.924,
          3.0449,
          2.9248
        ],
        "handling_time_slow": 0.4514,
        "sigma_cots": 0.3847,
        "coral_competition": 0.5667,
        "sigma_fast": 10.0141,
        "cots_recruit_base": 0.1607,
        "allee_strength": 1.1559,
        "conversion_efficiency": 0.0939,
        "cots_pred": [
          0.2615,
          0.3383,
          0.4769,
          0.4649,
          0.5914,
          0.5327,
          0.6999,
          0.5966,
          0.6074,
          0.6619,
          0.6916,
          0.9612,
          0.9563,
          0.8627,
          0.6623,
          0.7128,
          0.6085,
          0.7192,
          0.5789,
          0.4585,
          0.38,
          0.313,
          0.272,
          0.2994,
          0.4739,
          0.4707
        ],
        "handling_time_fast": 0.0752,
        "temp_recruit_width": 3.3801,
        "preference_switch": 10.0634,
        "allee_threshold": 0.1983,
        "density_mort_rate": 0.3272,
        "temp_stress_threshold": 28.9733,
        "attack_rate_fast": 2.1017,
        "fast_pred": [
          10.0694,
          10.2402,
          9.5335,
          10.1683,
          9.0359,
          10.1693,
          8.7003,
          9.8284,
          9.9359,
          9.4896,
          10.4306,
          6.8088,
          7.7695,
          8.851,
          10.046,
          8.8027,
          10.0504,
          7.0638,
          5.4397,
          6.3491,
          7.3903,
          8.5725,
          9.9013,
          10.7035,
          9.8638,
          10.3043
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.3383,
            0.4769,
            0.4649,
            0.5914,
            0.5327,
            0.6999,
            0.5966,
            0.6074,
            0.6619,
            0.6916,
            0.9612,
            0.9563,
            0.8627,
            0.6623,
            0.7128,
            0.6085,
            0.7192,
            0.5789,
            0.4585,
            0.38,
            0.313,
            0.272,
            0.2994,
            0.4739,
            0.4707
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.2402,
            9.5335,
            10.1683,
            9.0359,
            10.1693,
            8.7003,
            9.8284,
            9.9359,
            9.4896,
            10.4306,
            6.8088,
            7.7695,
            8.851,
            10.046,
            8.8027,
            10.0504,
            7.0638,
            5.4397,
            6.3491,
            7.3903,
            8.5725,
            9.9013,
            10.7035,
            9.8638,
            10.3043
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            13.0666,
            13.4127,
            12.809,
            13.0371,
            12.6493,
            12.8543,
            12.2994,
            12.098,
            11.9797,
            11.5254,
            11.8347,
            10.9017,
            9.9811,
            9.2002,
            9.1118,
            8.5746,
            6.8614,
            3.6907,
            3.3756,
            3.1673,
            3.0229,
            2.929,
            2.924,
            3.0449,
            2.9248
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.so POPULATIONS/POPULATION_0012/INDIVIDUAL_RKF50EP1/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n log_cots_recruit_base     log_cots_mort_base    log_allee_threshold \n             -0.693000              -0.693000              -1.609000 \n    log_allee_strength   log_temp_recruit_opt log_temp_recruit_width \n              0.693000               3.349500               0.693000 \n log_density_mort_rate log_immigration_effect   log_fast_growth_rate \n             -1.609000               0.000000              -1.609438 \n  log_slow_growth_rate  log_fast_carrying_cap  log_slow_carrying_cap \n             -2.995732               3.689000               3.219000 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\nlog_cots_recruit_base    log_cots_mort_base  log_fast_growth_rate \n            -0.693000             -0.693000             -1.609438 \n log_slow_growth_rate  log_attack_rate_fast  log_attack_rate_slow \n            -2.995732              0.693000              0.000000 \nFinal parameter values for phase 1 :\nlog_cots_recruit_base    log_cots_mort_base  log_fast_growth_rate \n           -1.6948110            -1.7928140            -1.6094379 \n log_slow_growth_rate  log_attack_rate_fast  log_attack_rate_slow \n           -2.9957323             0.8902893            -0.4555693 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 132 \nObjective function value: 517.8931 \nGradient at solution for phase 1 :\n         [,1]     [,2]      [,3]     [,4]      [,5]      [,6]\n[1,] -9468.54 11429.74 -92447.74 215.2902 -8423.469 -4732.499\nPhase 2 \nInitial parameter values for phase 2 :\n      log_allee_threshold      log_temp_recruit_opt     log_density_mort_rate \n                  -1.6090                    3.3495                   -1.6090 \n   log_immigration_effect     log_fast_carrying_cap     log_slow_carrying_cap \n                   0.0000                    3.6890                    3.2190 \nlog_temp_stress_threshold    log_handling_time_fast    log_handling_time_slow \n                   3.3670                   -2.3030                   -1.6090 \nlog_conversion_efficiency \n                  -2.3030 \nFinal parameter values for phase 2 :\n      log_allee_threshold      log_temp_recruit_opt     log_density_mort_rate \n               -1.6182246                 3.3551198                -1.3376954 \n   log_immigration_effect     log_fast_carrying_cap     log_slow_carrying_cap \n               -0.2410732                 3.7754469                 4.2998384 \nlog_temp_stress_threshold    log_handling_time_fast    log_handling_time_slow \n                3.3669287                -2.3745832                -1.1325351 \nlog_conversion_efficiency \n               -2.3258348 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 91 \nObjective function value: 444.1575 \nGradient at solution for phase 2 :\n          [,1]     [,2]     [,3]      [,4]     [,5]      [,6]     [,7]     [,8]\n[1,] -25.68582 2237.333 109.6654 -47.90983 283.8196 -18.95229 28787.51 99.55743\n          [,9]    [,10]\n[1,] -146.6207 114.7716\nPhase 3 \nInitial parameter values for phase 3 :\n    log_allee_strength log_temp_recruit_width  log_coral_competition \n                 0.693                  0.693                 -0.693 \n  log_temp_stress_rate  log_preference_switch \n                -1.609                  2.303 \nFinal parameter values for phase 3 :\n    log_allee_strength log_temp_recruit_width  log_coral_competition \n             0.0000000              0.7645318             -0.6271689 \n  log_temp_stress_rate  log_preference_switch \n            -1.6947591              2.3040752 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 98 \nObjective function value: 433.1868 \nGradient at solution for phase 3 :\n          [,1]     [,2]     [,3]     [,4]      [,5]\n[1,] -523.3352 27.15869 6625.897 8673.756 -94794.35\nPhase 4 \nInitial parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -2.303          1.099          1.099 \nFinal parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n     -1.053937       2.303000       1.598250 \nConvergence message: relative convergence (4) \nNumber of iterations: 10 \nObjective function value: 189.5338 \nGradient at solution for phase 4 :\n              [,1]     [,2]         [,3]\n[1,] -6.010324e-09 -8.01703 2.215049e-08\nFinal Phase\nInitial parameter values for final phase:\n    log_cots_recruit_base        log_cots_mort_base       log_allee_threshold \n               -1.6948110                -1.7928140                -1.6182246 \n       log_allee_strength      log_temp_recruit_opt    log_temp_recruit_width \n                0.0000000                 3.3551198                 0.7645318 \n    log_density_mort_rate    log_immigration_effect      log_fast_growth_rate \n               -1.3376954                -0.2410732                -1.6094379 \n     log_slow_growth_rate     log_fast_carrying_cap     log_slow_carrying_cap \n               -2.9957323                 3.7754469                 4.2998384 \n    log_coral_competition log_temp_stress_threshold      log_temp_stress_rate \n               -0.6271689                 3.3669287                -1.6947591 \n     log_attack_rate_fast      log_attack_rate_slow    log_handling_time_fast \n                0.8902893                -0.4555693                -2.3745832 \n   log_handling_time_slow     log_preference_switch log_conversion_efficiency \n               -1.1325351                 2.3040752                -2.3258348 \n           log_sigma_cots            log_sigma_fast            log_sigma_slow \n               -1.0539365                 2.3030000                 1.5982502 \nFinal parameter values for final phase:\n    log_cots_recruit_base        log_cots_mort_base       log_allee_threshold \n               -1.8280617                -1.7731926                -1.6182240 \n       log_allee_strength      log_temp_recruit_opt    log_temp_recruit_width \n                0.1449161                 3.3639360                 1.2179094 \n    log_density_mort_rate    log_immigration_effect      log_fast_growth_rate \n               -1.1171714                 0.3605479                -1.6094379 \n     log_slow_growth_rate     log_fast_carrying_cap     log_slow_carrying_cap \n               -2.9957323                 3.8261891                 4.3536528 \n    log_coral_competition log_temp_stress_threshold      log_temp_stress_rate \n               -0.5679845                 3.3663764                -1.8483718 \n     log_attack_rate_fast      log_attack_rate_slow    log_handling_time_fast \n                0.7427324                -1.0123883                -2.5875310 \n   log_handling_time_slow     log_preference_switch log_conversion_efficiency \n               -0.7953097                 2.3089049                -2.3652004 \n           log_sigma_cots            log_sigma_fast            log_sigma_slow \n               -0.9817180                 2.3030000                 0.7980713 \nConvergence message: function evaluation limit reached without convergence (9) \nNumber of iterations: 63 \nObjective function value: 169.1983 \nGradient at solution for final phase:\n         [,1]      [,2]      [,3]     [,4]      [,5]     [,6]      [,7]\n[1,] 4.533718 -9.532753 -1.271794 1.444322 -1.627991 1.630747 -11.67919\n           [,8]     [,9]     [,10]     [,11]     [,12]    [,13]     [,14]\n[1,] -0.7507952 5.307269 -8.284486 0.8279383 -2.238414 0.838535 -9.724954\n          [,15]    [,16]    [,17]    [,18]     [,19]    [,20]    [,21]    [,22]\n[1,] -0.8498371 1.392801 6.562707 -2.20886 -8.668355 6.181233 9.557484 3.708474\n         [,23]     [,24]\n[1,] -7.469474 -1.504279\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 27\n $ sigma_slow           : num 2.23\n $ attack_rate_slow     : num 0.363\n $ fast_growth_rate     : num 0.2\n $ cots_mort_base       : num 0.17\n $ fast_carrying_cap    : num 45.9\n $ immigration_effect   : num 1.43\n $ temp_stress_rate     : num 0.157\n $ slow_carrying_cap    : num 77.8\n $ temp_recruit_opt     : num 28.9\n $ slow_growth_rate     : num 0.05\n $ slow_pred            : num [1:26] 12.8 13.1 13.4 12.8 13 ...\n $ handling_time_slow   : num 0.451\n $ sigma_cots           : num 0.385\n $ coral_competition    : num 0.567\n $ sigma_fast           : num 10\n $ cots_recruit_base    : num 0.161\n $ allee_strength       : num 1.16\n $ conversion_efficiency: num 0.0939\n $ cots_pred            : num [1:26] 0.262 0.338 0.477 0.465 0.591 ...\n $ handling_time_fast   : num 0.0752\n $ temp_recruit_width   : num 3.38\n $ preference_switch    : num 10.1\n $ allee_threshold      : num 0.198\n $ density_mort_rate    : num 0.327\n $ temp_stress_threshold: num 29\n $ attack_rate_fast     : num 2.1\n $ fast_pred            : num [1:26] 10.07 10.24 9.53 10.17 9.04 ...\nNULL\n\nDEBUG: Available variables in report:\n [1] \"sigma_slow\"            \"attack_rate_slow\"      \"fast_growth_rate\"     \n [4] \"cots_mort_base\"        \"fast_carrying_cap\"     \"immigration_effect\"   \n [7] \"temp_stress_rate\"      \"slow_carrying_cap\"     \"temp_recruit_opt\"     \n[10] \"slow_growth_rate\"      \"slow_pred\"             \"handling_time_slow\"   \n[13] \"sigma_cots\"            \"coral_competition\"     \"sigma_fast\"           \n[16] \"cots_recruit_base\"     \"allee_strength\"        \"conversion_efficiency\"\n[19] \"cots_pred\"             \"handling_time_fast\"    \"temp_recruit_width\"   \n[22] \"preference_switch\"     \"allee_threshold\"       \"density_mort_rate\"    \n[25] \"temp_stress_threshold\" \"attack_rate_fast\"      \"fast_pred\"            \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.3383336 0.4768808 0.4648814 0.5914272 0.5327203 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2615  0.4601  0.5851  0.5636  0.6843  0.9612 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.24021 9.533455 10.16828 9.035935 10.16931 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  5.440   8.604   9.681   9.058  10.065  10.704 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 13.06664 13.41274 12.80899 13.03707 12.64928 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.924   3.454  10.441   8.848  12.562  13.413 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.3383336 0.4768808 0.4648814 0.5914272 0.5327203 ...\nMSE (normalized): 0.5640919 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.24021 9.533455 10.16828 9.035935 10.16931 ...\nMSE (normalized): 1.257329 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 13.06664 13.41274 12.80899 13.03707 12.64928 ...\nMSE (normalized): 0.2378203 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.5640919 1.2573288 0.2378203 \n\nDEBUG: Final objective value (mean of MSEs): 0.6864136 \n\nFinal objective function value: 0.6864136 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.6864,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         24     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"sigma_slow\": 2.2313,\n    \"attack_rate_slow\": 0.3634,\n    \"fast_growth_rate\": 0.2,\n    \"cots_mort_base\": 0.1698,\n    \"fast_carrying_cap\": 45.8873,\n    \"immigration_effect\": 1.4341,\n    \"temp_stress_rate\": 0.1575,\n    \"slow_carrying_cap\": 77.762,\n    \"temp_recruit_opt\": 28.9027,\n    \"slow_growth_rate\": 0.05,\n    \"slow_pred\": [12.7726, 13.0666, 13.4127, 12.809, 13.0371, 12.6493, 12.8543, 12.2994, 12.098, 11.9797, 11.5254, 11.8347, 10.9017, 9.9811, 9.2002, 9.1118, 8.5746, 6.8614, 3.6907, 3.3756, 3.1673, 3.0229, 2.929, 2.924, 3.0449, 2.9248],\n    \"handling_time_slow\": 0.4514,\n    \"sigma_cots\": 0.3847,\n    \"coral_competition\": 0.5667,\n    \"sigma_fast\": 10.0141,\n    \"cots_recruit_base\": 0.1607,\n    \"allee_strength\": 1.1559,\n    \"conversion_efficiency\": 0.0939,\n    \"cots_pred\": [0.2615, 0.3383, 0.4769, 0.4649, 0.5914, 0.5327, 0.6999, 0.5966, 0.6074, 0.6619, 0.6916, 0.9612, 0.9563, 0.8627, 0.6623, 0.7128, 0.6085, 0.7192, 0.5789, 0.4585, 0.38, 0.313, 0.272, 0.2994, 0.4739, 0.4707],\n    \"handling_time_fast\": 0.0752,\n    \"temp_recruit_width\": 3.3801,\n    \"preference_switch\": 10.0634,\n    \"allee_threshold\": 0.1983,\n    \"density_mort_rate\": 0.3272,\n    \"temp_stress_threshold\": 28.9733,\n    \"attack_rate_fast\": 2.1017,\n    \"fast_pred\": [10.0694, 10.2402, 9.5335, 10.1683, 9.0359, 10.1693, 8.7003, 9.8284, 9.9359, 9.4896, 10.4306, 6.8088, 7.7695, 8.851, 10.046, 8.8027, 10.0504, 7.0638, 5.4397, 6.3491, 7.3903, 8.5725, 9.9013, 10.7035, 9.8638, 10.3043]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.3383, 0.4769, 0.4649, 0.5914, 0.5327, 0.6999, 0.5966, 0.6074, 0.6619, 0.6916, 0.9612, 0.9563, 0.8627, 0.6623, 0.7128, 0.6085, 0.7192, 0.5789, 0.4585, 0.38, 0.313, 0.272, 0.2994, 0.4739, 0.4707],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.2402, 9.5335, 10.1683, 9.0359, 10.1693, 8.7003, 9.8284, 9.9359, 9.4896, 10.4306, 6.8088, 7.7695, 8.851, 10.046, 8.8027, 10.0504, 7.0638, 5.4397, 6.3491, 7.3903, 8.5725, 9.9013, 10.7035, 9.8638, 10.3043],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 13.0666, 13.4127, 12.809, 13.0371, 12.6493, 12.8543, 12.2994, 12.098, 11.9797, 11.5254, 11.8347, 10.9017, 9.9811, 9.2002, 9.1118, 8.5746, 6.8614, 3.6907, 3.3756, 3.1673, 3.0229, 2.929, 2.924, 3.0449, 2.9248],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 0.6864
    }
  }
}