{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:4:31: error: using template type parameter \u2018Type\u2019 after \u2018class\u2019\n    4 | Type objective_function<class Type>::operator() ()\n      |                               ^~~~\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:4:35: error: template argument 1 is invalid\n    4 | Type objective_function<class Type>::operator() ()\n      |                                   ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:4:6: error: \u2018Type operator()()\u2019 must be a member function\n    4 | Type objective_function<class Type>::operator() ()\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), eps);                     // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:149:29: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  149 |     Type temp_anomaly = fmax(sst_dat(t-1) - temp_opt_coral - bleach_threshold, Type(0.0)); // Temperature above bleaching threshold (\u00b0C)\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:161:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_pred(t), eps);                     // Ensure non-negative fast coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:168:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  168 |     slow_pred(t) = fmax(slow_pred(t), eps);                     // Ensure non-negative slow coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:173:30: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  173 |   Type sigma_cots_use = fmax(sigma_cots, min_sigma);            // Apply minimum sigma for COTS\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:174:30: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  174 |   Type sigma_fast_use = fmax(sigma_fast, min_sigma);            // Apply minimum sigma for fast coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:175:30: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  175 |   Type sigma_slow_use = fmax(sigma_slow, min_sigma);            // Apply minimum sigma for slow coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), eps);                     // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:149:29: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  149 |     Type temp_anomaly = fmax(sst_dat(t-1) - temp_opt_coral - bleach_threshold, Type(0.0)); // Temperature above bleaching threshold (\u00b0C)\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:161:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_pred(t), eps);                     // Ensure non-negative fast coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:168:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  168 |     slow_pred(t) = fmax(slow_pred(t), eps);                     // Ensure non-negative slow coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:173:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  173 |   Type sigma_cots_use = fmax(sigma_cots, min_sigma);            // Apply minimum sigma for COTS\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:174:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  174 |   Type sigma_fast_use = fmax(sigma_fast, min_sigma);            // Apply minimum sigma for fast coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:175:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  175 |   Type sigma_slow_use = fmax(sigma_slow, min_sigma);            // Apply minimum sigma for slow coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:143:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  143 |     cots_pred(t) = fmax(cots_pred(t), eps);                     // Ensure non-negative COTS abundance\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:149:29: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  149 |     Type temp_anomaly = fmax(sst_dat(t-1) - temp_opt_coral - bleach_threshold, Type(0.0)); // Temperature above bleaching threshold (\u00b0C)\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:161:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  161 |     fast_pred(t) = fmax(fast_pred(t), eps);                     // Ensure non-negative fast coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:168:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  168 |     slow_pred(t) = fmax(slow_pred(t), eps);                     // Ensure non-negative slow coral cover\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:173:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  173 |   Type sigma_cots_use = fmax(sigma_cots, min_sigma);            // Apply minimum sigma for COTS\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:174:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  174 |   Type sigma_fast_use = fmax(sigma_fast, min_sigma);            // Apply minimum sigma for fast coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp:175:30: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  175 |   Type sigma_slow_use = fmax(sigma_slow, min_sigma);            // Apply minimum sigma for slow coral\n      |                              ^~~~~~~~~~\n      |                              |\n      |                              CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 0.4543,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         25     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "handling_slow": 0.0687,
        "bleach_mort": 0.1344,
        "r_cots": 1.9974,
        "m_cots": 0.1005,
        "K_cots": 1.3299,
        "cots_pred": [
          0.2615,
          0.2781,
          0.3072,
          0.3498,
          0.3996,
          0.4589,
          0.5211,
          0.5735,
          0.6129,
          0.6366,
          0.9696,
          0.6788,
          1.1485,
          0.888,
          0.6669,
          0.6195,
          0.5872,
          0.5682,
          0.5302,
          0.4425,
          0.3963,
          0.3762,
          0.3709,
          0.384,
          0.4138,
          0.4558
        ],
        "bleach_threshold": 1.9389,
        "allee_threshold": 0.02,
        "attack_fast": 1.8955,
        "dd_mort": 0.4735,
        "fast_pred": [
          10.0694,
          13.7689,
          17.7157,
          18.6038,
          21.7666,
          24.3738,
          24.4166,
          25.144,
          24.849,
          23.9969,
          22.3533,
          17.0525,
          17.3166,
          12.083,
          11.4041,
          10.0351,
          9.9094,
          6.7171,
          2.5983,
          3.3597,
          4.494,
          5.5405,
          7.5252,
          10.0828,
          12.6681,
          15.0418
        ],
        "attack_slow": 1.0304,
        "temp_width_coral": 3.3886,
        "r_fast": 0.9287,
        "sigma_fast": 0.284,
        "r_slow": 0.2047,
        "handling_fast": 0.025,
        "slow_pred": [
          12.7726,
          13.3281,
          13.8603,
          12.8437,
          13.2275,
          13.5677,
          13.518,
          13.6759,
          13.7306,
          13.7026,
          13.5306,
          12.747,
          12.4389,
          11.0962,
          10.088,
          9.2563,
          8.323,
          5.8927,
          2.9882,
          2.8812,
          2.9722,
          3.0965,
          3.3663,
          3.7037,
          4.0505,
          4.4007
        ],
        "K_coral": 64.5522,
        "sigma_cots": 0.4572,
        "temp_width_cots": 2.4195,
        "sigma_slow": 0.2974
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.2781,
            0.3072,
            0.3498,
            0.3996,
            0.4589,
            0.5211,
            0.5735,
            0.6129,
            0.6366,
            0.9696,
            0.6788,
            1.1485,
            0.888,
            0.6669,
            0.6195,
            0.5872,
            0.5682,
            0.5302,
            0.4425,
            0.3963,
            0.3762,
            0.3709,
            0.384,
            0.4138,
            0.4558
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            13.7689,
            17.7157,
            18.6038,
            21.7666,
            24.3738,
            24.4166,
            25.144,
            24.849,
            23.9969,
            22.3533,
            17.0525,
            17.3166,
            12.083,
            11.4041,
            10.0351,
            9.9094,
            6.7171,
            2.5983,
            3.3597,
            4.494,
            5.5405,
            7.5252,
            10.0828,
            12.6681,
            15.0418
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            13.3281,
            13.8603,
            12.8437,
            13.2275,
            13.5677,
            13.518,
            13.6759,
            13.7306,
            13.7026,
            13.5306,
            12.747,
            12.4389,
            11.0962,
            10.088,
            9.2563,
            8.323,
            5.8927,
            2.9882,
            2.8812,
            2.9722,
            3.0965,
            3.3663,
            3.7037,
            4.0505,
            4.4007
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.so POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n         log_r_cots          log_K_cots log_allee_threshold      allee_strength \n             -0.693               0.000              -1.609               5.000 \n         log_m_cots         log_dd_mort     larval_survival       temp_opt_cots \n             -1.204              -0.693               0.300              28.000 \nlog_temp_width_cots          log_r_fast          log_r_slow         log_K_coral \n              0.693              -0.357              -1.204               4.094 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold     larval_survival          log_r_fast \n             -0.693              -1.609               0.300              -0.357 \n         log_r_slow     log_attack_fast     log_attack_slow \n             -1.204               1.609               0.693 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold     larval_survival          log_r_fast \n          0.6930000          -3.9120000           0.7113413           0.6930000 \n         log_r_slow     log_attack_fast     log_attack_slow \n          0.0000000           0.2706397          -0.6930000 \nConvergence message: relative convergence (4) \nNumber of iterations: 14 \nObjective function value: 26552.78 \nGradient at solution for phase 1 :\n          [,1]    [,2]         [,3]      [,4]      [,5]          [,6]     [,7]\n[1,] -926.1963 26.9205 0.0004651308 -3299.413 -1979.319 -0.0003204513 47.53577\nPhase 2 \nInitial parameter values for phase 2 :\n          log_K_cots       allee_strength           log_m_cots \n               0.000                5.000               -1.204 \n         log_dd_mort        temp_opt_cots    log_handling_fast \n              -0.693               28.000               -2.303 \n   log_handling_slow      preference_fast       temp_opt_coral \n              -1.609                0.700               27.000 \nlog_bleach_threshold      log_bleach_mort \n               0.693               -0.693 \nFinal parameter values for phase 2 :\n          log_K_cots       allee_strength           log_m_cots \n           0.1289977            3.2801015           -2.3030000 \n         log_dd_mort        temp_opt_cots    log_handling_fast \n          -0.6328018           28.8517067           -2.9565761 \n   log_handling_slow      preference_fast       temp_opt_coral \n          -2.3051575            0.3890939           25.9419529 \nlog_bleach_threshold      log_bleach_mort \n           0.4852630           -1.6950238 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 266.301 \nGradient at solution for phase 2 :\n         [,1]     [,2]     [,3]      [,4]      [,5]     [,6]     [,7]     [,8]\n[1,] 2.834848 30.50915 7.311078 -5.155007 -12.48791 5.540548 9.052131 21.71997\n          [,9]     [,10]    [,11]\n[1,] -18.41307 -3.042993 22.36321\nPhase 3 \nInitial parameter values for phase 3 :\n log_temp_width_cots          log_K_coral     competition_fast \n               0.693                4.094                1.500 \nlog_temp_width_coral \n               0.693 \nFinal parameter values for phase 3 :\n log_temp_width_cots          log_K_coral     competition_fast \n           0.4669227            3.9120000            1.7129206 \nlog_temp_width_coral \n           0.6927002 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 22 \nObjective function value: 207.4302 \nGradient at solution for phase 3 :\n              [,1]     [,2]         [,3]         [,4]\n[1,] -9.689225e-07 123.8589 1.023248e-05 1.335818e-05\nPhase 4 \nInitial parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -1.609         -1.204         -1.204 \nFinal parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n    -0.7207547     -0.2717333     -0.7072021 \nConvergence message: relative convergence (4) \nNumber of iterations: 10 \nObjective function value: 110.8621 \nGradient at solution for phase 4 :\n              [,1]          [,2]         [,3]\n[1,] -3.891066e-06 -2.558705e-06 4.843663e-07\nFinal Phase\nInitial parameter values for final phase:\n          log_r_cots           log_K_cots  log_allee_threshold \n           0.6930000            0.1289977           -3.9120000 \n      allee_strength           log_m_cots          log_dd_mort \n           3.2801015           -2.3030000           -0.6328018 \n     larval_survival        temp_opt_cots  log_temp_width_cots \n           0.7113413           28.8517067            0.4669227 \n          log_r_fast           log_r_slow          log_K_coral \n           0.6930000            0.0000000            3.9120000 \n    competition_fast      log_attack_fast      log_attack_slow \n           1.7129206            0.2706397           -0.6930000 \n   log_handling_fast    log_handling_slow      preference_fast \n          -2.9565761           -2.3051575            0.3890939 \n      temp_opt_coral log_temp_width_coral log_bleach_threshold \n          25.9419529            0.6927002            0.4852630 \n     log_bleach_mort       log_sigma_cots       log_sigma_fast \n          -1.6950238           -0.7207547           -0.2717333 \n      log_sigma_slow \n          -0.7072021 \nFinal parameter values for final phase:\n          log_r_cots           log_K_cots  log_allee_threshold \n          0.69184116           0.28512866          -3.91199921 \n      allee_strength           log_m_cots          log_dd_mort \n          0.55412262          -2.29745871          -0.74756288 \n     larval_survival        temp_opt_cots  log_temp_width_cots \n          0.60891457          28.69536562           0.88357529 \n          log_r_fast           log_r_slow          log_K_coral \n         -0.07400515          -1.58605375           4.16747417 \n    competition_fast      log_attack_fast      log_attack_slow \n          0.96196047           0.63950882           0.02993615 \n   log_handling_fast    log_handling_slow      preference_fast \n         -3.68805050          -2.67842080           0.58354524 \n      temp_opt_coral log_temp_width_coral log_bleach_threshold \n         26.58405391           1.22040577           0.66212378 \n     log_bleach_mort       log_sigma_cots       log_sigma_fast \n         -2.00681804          -0.78268567          -1.25890037 \n      log_sigma_slow \n         -1.21261347 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 24.9884 \nGradient at solution for final phase:\n          [,1]       [,2]       [,3]      [,4]     [,5]       [,6]    [,7]\n[1,] -4.229115 -0.5340298 0.02378614 0.6474544 1.100183 -0.4601874 1.20144\n          [,8]       [,9]     [,10]    [,11]     [,12]      [,13]     [,14]\n[1,] 0.1200842 -0.6752368 -0.267697 0.499616 -1.234317 -0.4304408 -1.537565\n         [,15]    [,16]     [,17]      [,18]     [,19]     [,20]     [,21]\n[1,] -1.164728 1.965612 0.5647876 -0.2371792 0.7379556 -1.151375 0.8286777\n          [,22]    [,23]     [,24]     [,25]\n[1,] -0.7964872 0.156571 -0.389906 0.8322092\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 22\n $ handling_slow   : num 0.0687\n $ bleach_mort     : num 0.134\n $ r_cots          : num 2\n $ m_cots          : num 0.101\n $ K_cots          : num 1.33\n $ cots_pred       : num [1:26] 0.262 0.278 0.307 0.35 0.4 ...\n $ bleach_threshold: num 1.94\n $ allee_threshold : num 0.02\n $ attack_fast     : num 1.9\n $ dd_mort         : num 0.474\n $ fast_pred       : num [1:26] 10.1 13.8 17.7 18.6 21.8 ...\n $ attack_slow     : num 1.03\n $ temp_width_coral: num 3.39\n $ r_fast          : num 0.929\n $ sigma_fast      : num 0.284\n $ r_slow          : num 0.205\n $ handling_fast   : num 0.025\n $ slow_pred       : num [1:26] 12.8 13.3 13.9 12.8 13.2 ...\n $ K_coral         : num 64.6\n $ sigma_cots      : num 0.457\n $ temp_width_cots : num 2.42\n $ sigma_slow      : num 0.297\nNULL\n\nDEBUG: Available variables in report:\n [1] \"handling_slow\"    \"bleach_mort\"      \"r_cots\"           \"m_cots\"          \n [5] \"K_cots\"           \"cots_pred\"        \"bleach_threshold\" \"allee_threshold\" \n [9] \"attack_fast\"      \"dd_mort\"          \"fast_pred\"        \"attack_slow\"     \n[13] \"temp_width_coral\" \"r_fast\"           \"sigma_fast\"       \"r_slow\"          \n[17] \"handling_fast\"    \"slow_pred\"        \"K_coral\"          \"sigma_cots\"      \n[21] \"temp_width_cots\"  \"sigma_slow\"      \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.2780938 0.3071564 0.3498194 0.3996363 0.4589185 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2615  0.3871  0.4900  0.5344  0.6178  1.1485 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 13.76892 17.71571 18.60384 21.76658 24.37382 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.598   9.941  13.219  14.342  20.976  25.144 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 13.32805 13.86035 12.84369 13.22749 13.56768 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.881   4.138  11.768   9.425  13.471  13.860 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.2780938 0.3071564 0.3498194 0.3996363 0.4589185 ...\nMSE (normalized): 0.7999473 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 13.76892 17.71571 18.60384 21.76658 24.37382 ...\nMSE (normalized): 0.3387121 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 13.32805 13.86035 12.84369 13.22749 13.56768 ...\nMSE (normalized): 0.2242179 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.7999473 0.3387121 0.2242179 \n\nDEBUG: Final objective value (mean of MSEs): 0.4542924 \n\nFinal objective function value: 0.4542924 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.4543,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         25     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"handling_slow\": 0.0687,\n    \"bleach_mort\": 0.1344,\n    \"r_cots\": 1.9974,\n    \"m_cots\": 0.1005,\n    \"K_cots\": 1.3299,\n    \"cots_pred\": [0.2615, 0.2781, 0.3072, 0.3498, 0.3996, 0.4589, 0.5211, 0.5735, 0.6129, 0.6366, 0.9696, 0.6788, 1.1485, 0.888, 0.6669, 0.6195, 0.5872, 0.5682, 0.5302, 0.4425, 0.3963, 0.3762, 0.3709, 0.384, 0.4138, 0.4558],\n    \"bleach_threshold\": 1.9389,\n    \"allee_threshold\": 0.02,\n    \"attack_fast\": 1.8955,\n    \"dd_mort\": 0.4735,\n    \"fast_pred\": [10.0694, 13.7689, 17.7157, 18.6038, 21.7666, 24.3738, 24.4166, 25.144, 24.849, 23.9969, 22.3533, 17.0525, 17.3166, 12.083, 11.4041, 10.0351, 9.9094, 6.7171, 2.5983, 3.3597, 4.494, 5.5405, 7.5252, 10.0828, 12.6681, 15.0418],\n    \"attack_slow\": 1.0304,\n    \"temp_width_coral\": 3.3886,\n    \"r_fast\": 0.9287,\n    \"sigma_fast\": 0.284,\n    \"r_slow\": 0.2047,\n    \"handling_fast\": 0.025,\n    \"slow_pred\": [12.7726, 13.3281, 13.8603, 12.8437, 13.2275, 13.5677, 13.518, 13.6759, 13.7306, 13.7026, 13.5306, 12.747, 12.4389, 11.0962, 10.088, 9.2563, 8.323, 5.8927, 2.9882, 2.8812, 2.9722, 3.0965, 3.3663, 3.7037, 4.0505, 4.4007],\n    \"K_coral\": 64.5522,\n    \"sigma_cots\": 0.4572,\n    \"temp_width_cots\": 2.4195,\n    \"sigma_slow\": 0.2974\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.2781, 0.3072, 0.3498, 0.3996, 0.4589, 0.5211, 0.5735, 0.6129, 0.6366, 0.9696, 0.6788, 1.1485, 0.888, 0.6669, 0.6195, 0.5872, 0.5682, 0.5302, 0.4425, 0.3963, 0.3762, 0.3709, 0.384, 0.4138, 0.4558],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 13.7689, 17.7157, 18.6038, 21.7666, 24.3738, 24.4166, 25.144, 24.849, 23.9969, 22.3533, 17.0525, 17.3166, 12.083, 11.4041, 10.0351, 9.9094, 6.7171, 2.5983, 3.3597, 4.494, 5.5405, 7.5252, 10.0828, 12.6681, 15.0418],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 13.3281, 13.8603, 12.8437, 13.2275, 13.5677, 13.518, 13.6759, 13.7306, 13.7026, 13.5306, 12.747, 12.4389, 11.0962, 10.088, 9.2563, 8.323, 5.8927, 2.9882, 2.8812, 2.9722, 3.0965, 3.3663, 3.7037, 4.0505, 4.4007],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 0.4543
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 0.8339,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         25     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "handling_slow": 0.0101,
        "bleach_mort": 0.1,
        "r_cots": 1.8822,
        "m_cots": 0.1,
        "K_cots": 5.5927,
        "cots_pred": [
          0.2615,
          0.2739,
          0.3304,
          0.4159,
          0.4849,
          0.5739,
          0.6507,
          0.6793,
          0.7348,
          0.7217,
          1.1675,
          0.7561,
          1.3996,
          1.0967,
          0.6103,
          0.6221,
          0.5888,
          0.6082,
          0.5321,
          0.3212,
          0.2599,
          0.2771,
          0.3373,
          0.4466,
          0.3747,
          0.4166
        ],
        "bleach_threshold": 1.4535,
        "allee_threshold": 0.0202,
        "attack_fast": 1.7883,
        "dd_mort": 0.8704,
        "fast_pred": [
          10.0694,
          23.3145,
          33.284,
          21.9595,
          30.105,
          30.2224,
          21.8005,
          35.0352,
          20.7224,
          33.3318,
          19.3825,
          24.2005,
          30.9425,
          6.6669,
          15.7383,
          11.0572,
          15.6309,
          7.4743,
          0.8115,
          2.8783,
          10.453,
          22.0219,
          53.436,
          4.5298,
          14.2082,
          31.6853
        ],
        "attack_slow": 0.7773,
        "temp_width_coral": 1.8914,
        "r_fast": 1.9997,
        "sigma_fast": 0.6411,
        "r_slow": 0.3733,
        "handling_fast": 0.01,
        "slow_pred": [
          12.7726,
          13.7243,
          13.9716,
          12.0744,
          12.2783,
          12.2322,
          11.2977,
          11.6834,
          11.2999,
          11.5895,
          11.1735,
          10.7329,
          10.874,
          10.1335,
          8.6602,
          8.1439,
          7.376,
          5.4811,
          3.0245,
          3.0157,
          3.6117,
          4.0114,
          4.6367,
          4.3266,
          4.9174,
          5.5251
        ],
        "K_coral": 49.9988,
        "sigma_cots": 0.4045,
        "temp_width_cots": 2.0935,
        "sigma_slow": 0.2952
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.2739,
            0.3304,
            0.4159,
            0.4849,
            0.5739,
            0.6507,
            0.6793,
            0.7348,
            0.7217,
            1.1675,
            0.7561,
            1.3996,
            1.0967,
            0.6103,
            0.6221,
            0.5888,
            0.6082,
            0.5321,
            0.3212,
            0.2599,
            0.2771,
            0.3373,
            0.4466,
            0.3747,
            0.4166
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            23.3145,
            33.284,
            21.9595,
            30.105,
            30.2224,
            21.8005,
            35.0352,
            20.7224,
            33.3318,
            19.3825,
            24.2005,
            30.9425,
            6.6669,
            15.7383,
            11.0572,
            15.6309,
            7.4743,
            0.8115,
            2.8783,
            10.453,
            22.0219,
            53.436,
            4.5298,
            14.2082,
            31.6853
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            13.7243,
            13.9716,
            12.0744,
            12.2783,
            12.2322,
            11.2977,
            11.6834,
            11.2999,
            11.5895,
            11.1735,
            10.7329,
            10.874,
            10.1335,
            8.6602,
            8.1439,
            7.376,
            5.4811,
            3.0245,
            3.0157,
            3.6117,
            4.0114,
            4.6367,
            4.3266,
            4.9174,
            5.5251
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.cpp -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.so POPULATIONS/POPULATION_0012/INDIVIDUAL_KW8CI3YF/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n         log_r_cots          log_K_cots log_allee_threshold      allee_strength \n             -0.693               0.000              -1.609               5.000 \n         log_m_cots         log_dd_mort     larval_survival       temp_opt_cots \n             -1.204              -0.693               0.300              28.500 \nlog_temp_width_cots          log_r_fast          log_r_slow         log_K_coral \n              0.693              -0.357              -1.204               4.094 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\n         log_r_cots log_allee_threshold     larval_survival          log_r_fast \n             -0.693              -1.609               0.300              -0.357 \n         log_r_slow     log_attack_fast     log_attack_slow \n             -1.204               1.609               0.693 \nFinal parameter values for phase 1 :\n         log_r_cots log_allee_threshold     larval_survival          log_r_fast \n          0.6930000          -3.9120000           1.0000000           0.6930000 \n         log_r_slow     log_attack_fast     log_attack_slow \n          0.0000000           0.2775928          -0.6930000 \nConvergence message: relative convergence (4) \nNumber of iterations: 9 \nObjective function value: 26554.71 \nGradient at solution for phase 1 :\n          [,1]     [,2]      [,3]      [,4]      [,5]          [,6]     [,7]\n[1,] -937.4374 27.12408 -15.30017 -3300.585 -1978.558 -6.084364e-09 47.69149\nPhase 2 \nInitial parameter values for phase 2 :\n          log_K_cots       allee_strength           log_m_cots \n               0.000                5.000               -1.204 \n         log_dd_mort        temp_opt_cots    log_handling_fast \n              -0.693               28.500               -2.303 \n   log_handling_slow      preference_fast       temp_opt_coral \n              -1.609                0.700               27.000 \nlog_bleach_threshold      log_bleach_mort \n               0.693               -0.693 \nFinal parameter values for phase 2 :\n          log_K_cots       allee_strength           log_m_cots \n           1.7028279            0.2198729           -2.3030000 \n         log_dd_mort        temp_opt_cots    log_handling_fast \n          -0.2981459           28.0000000           -4.6050000 \n   log_handling_slow      preference_fast       temp_opt_coral \n          -4.6050000            0.3622179           26.0683718 \nlog_bleach_threshold      log_bleach_mort \n           0.0000000           -1.9965777 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 179.4766 \nGradient at solution for phase 2 :\n           [,1]       [,2]     [,3]        [,4]     [,5]     [,6]     [,7]\n[1,] 0.01258004 0.01784919 7.848433 -0.09229128 10.42907 16.86784 2.765055\n          [,8]        [,9]    [,10]      [,11]\n[1,] 0.1044879 -0.02988505 2.130575 0.08519379\nPhase 3 \nInitial parameter values for phase 3 :\n log_temp_width_cots          log_K_coral     competition_fast \n               0.693                4.094                1.500 \nlog_temp_width_coral \n               0.693 \nFinal parameter values for phase 3 :\n log_temp_width_cots          log_K_coral     competition_fast \n           0.7278149            3.9120000            1.6681103 \nlog_temp_width_coral \n           0.6522497 \nConvergence message: relative convergence (4) \nNumber of iterations: 20 \nObjective function value: 145.9891 \nGradient at solution for phase 3 :\n              [,1]     [,2]          [,3]          [,4]\n[1,] -0.0001926993 69.59315 -9.747823e-05 -4.221445e-06\nPhase 4 \nInitial parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n        -1.609         -1.204         -1.204 \nFinal parameter values for phase 4 :\nlog_sigma_cots log_sigma_fast log_sigma_slow \n    -0.7303025     -0.3689834     -0.7659559 \nConvergence message: relative convergence (4) \nNumber of iterations: 8 \nObjective function value: 65.28993 \nGradient at solution for phase 4 :\n              [,1]         [,2]          [,3]\n[1,] -1.337996e-07 1.403756e-07 -1.026141e-07\nFinal Phase\nInitial parameter values for final phase:\n          log_r_cots           log_K_cots  log_allee_threshold \n           0.6930000            1.7028279           -3.9120000 \n      allee_strength           log_m_cots          log_dd_mort \n           0.2198729           -2.3030000           -0.2981459 \n     larval_survival        temp_opt_cots  log_temp_width_cots \n           1.0000000           28.0000000            0.7278149 \n          log_r_fast           log_r_slow          log_K_coral \n           0.6930000            0.0000000            3.9120000 \n    competition_fast      log_attack_fast      log_attack_slow \n           1.6681103            0.2775928           -0.6930000 \n   log_handling_fast    log_handling_slow      preference_fast \n          -4.6050000           -4.6050000            0.3622179 \n      temp_opt_coral log_temp_width_coral log_bleach_threshold \n          26.0683718            0.6522497            0.0000000 \n     log_bleach_mort       log_sigma_cots       log_sigma_fast \n          -1.9965777           -0.7303025           -0.3689834 \n      log_sigma_slow \n          -0.7659559 \nFinal parameter values for final phase:\n          log_r_cots           log_K_cots  log_allee_threshold \n           0.6324375            1.7214658           -3.9005823 \n      allee_strength           log_m_cots          log_dd_mort \n           0.4020135           -2.3028967           -0.1388222 \n     larval_survival        temp_opt_cots  log_temp_width_cots \n           0.6819383           28.0237393            0.7388261 \n          log_r_fast           log_r_slow          log_K_coral \n           0.6930000           -0.9853903            3.9120000 \n    competition_fast      log_attack_fast      log_attack_slow \n           1.9106699            0.5812756           -0.2519232 \n   log_handling_fast    log_handling_slow      preference_fast \n          -4.6050000           -4.5921582            0.6250976 \n      temp_opt_coral log_temp_width_coral log_bleach_threshold \n          26.6505155            0.6373358            0.3739698 \n     log_bleach_mort       log_sigma_cots       log_sigma_fast \n          -2.3030000           -0.9050513           -0.4446163 \n      log_sigma_slow \n          -1.2199423 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 46.2858 \nGradient at solution for final phase:\n          [,1]      [,2]       [,3]      [,4]     [,5]     [,6]       [,7]\n[1,] -7.007672 -1.490863 0.02378878 -3.178083 1.116358 6.424969 -0.7285465\n          [,8]      [,9]     [,10]    [,11]    [,12]    [,13]     [,14]\n[1,] 0.5813543 -1.014461 -1.133737 4.616668 20.56774 3.049308 -7.528673\n         [,15]    [,16]     [,17]     [,18]    [,19]    [,20]    [,21]\n[1,] -5.308862 2.669074 0.3621839 -0.692251 0.486254 5.270382 0.629532\n         [,22]    [,23]     [,24]     [,25]\n[1,] -4.044784 -1.42771 0.2688558 -1.815596\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 22\n $ handling_slow   : num 0.0101\n $ bleach_mort     : num 0.1\n $ r_cots          : num 1.88\n $ m_cots          : num 0.1\n $ K_cots          : num 5.59\n $ cots_pred       : num [1:26] 0.262 0.274 0.33 0.416 0.485 ...\n $ bleach_threshold: num 1.45\n $ allee_threshold : num 0.0202\n $ attack_fast     : num 1.79\n $ dd_mort         : num 0.87\n $ fast_pred       : num [1:26] 10.1 23.3 33.3 22 30.1 ...\n $ attack_slow     : num 0.777\n $ temp_width_coral: num 1.89\n $ r_fast          : num 2\n $ sigma_fast      : num 0.641\n $ r_slow          : num 0.373\n $ handling_fast   : num 0.01\n $ slow_pred       : num [1:26] 12.8 13.7 14 12.1 12.3 ...\n $ K_coral         : num 50\n $ sigma_cots      : num 0.405\n $ temp_width_cots : num 2.09\n $ sigma_slow      : num 0.295\nNULL\n\nDEBUG: Available variables in report:\n [1] \"handling_slow\"    \"bleach_mort\"      \"r_cots\"           \"m_cots\"          \n [5] \"K_cots\"           \"cots_pred\"        \"bleach_threshold\" \"allee_threshold\" \n [9] \"attack_fast\"      \"dd_mort\"          \"fast_pred\"        \"attack_slow\"     \n[13] \"temp_width_coral\" \"r_fast\"           \"sigma_fast\"       \"r_slow\"          \n[17] \"handling_fast\"    \"slow_pred\"        \"K_coral\"          \"sigma_cots\"      \n[21] \"temp_width_cots\"  \"sigma_slow\"      \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.2738697 0.3304411 0.4158972 0.4848663 0.5738622 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2599  0.3467  0.5530  0.5747  0.6721  1.3996 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 23.3145 33.28397 21.95945 30.10502 30.22244 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.8115 10.6040 21.2615 20.4216 30.1931 53.4360 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 13.72429 13.97158 12.07441 12.27832 12.23221 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.016   5.058  10.433   8.791  11.660  13.972 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.2738697 0.3304411 0.4158972 0.4848663 0.5738622 ...\nMSE (normalized): 0.7444975 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 23.3145 33.28397 21.95945 30.10502 30.22244 ...\nMSE (normalized): 1.514949 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 13.72429 13.97158 12.07441 12.27832 12.23221 ...\nMSE (normalized): 0.2421976 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.7444975 1.5149487 0.2421976 \n\nDEBUG: Final objective value (mean of MSEs): 0.8338812 \n\nFinal objective function value: 0.8338812 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 0.8339,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         25     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"handling_slow\": 0.0101,\n    \"bleach_mort\": 0.1,\n    \"r_cots\": 1.8822,\n    \"m_cots\": 0.1,\n    \"K_cots\": 5.5927,\n    \"cots_pred\": [0.2615, 0.2739, 0.3304, 0.4159, 0.4849, 0.5739, 0.6507, 0.6793, 0.7348, 0.7217, 1.1675, 0.7561, 1.3996, 1.0967, 0.6103, 0.6221, 0.5888, 0.6082, 0.5321, 0.3212, 0.2599, 0.2771, 0.3373, 0.4466, 0.3747, 0.4166],\n    \"bleach_threshold\": 1.4535,\n    \"allee_threshold\": 0.0202,\n    \"attack_fast\": 1.7883,\n    \"dd_mort\": 0.8704,\n    \"fast_pred\": [10.0694, 23.3145, 33.284, 21.9595, 30.105, 30.2224, 21.8005, 35.0352, 20.7224, 33.3318, 19.3825, 24.2005, 30.9425, 6.6669, 15.7383, 11.0572, 15.6309, 7.4743, 0.8115, 2.8783, 10.453, 22.0219, 53.436, 4.5298, 14.2082, 31.6853],\n    \"attack_slow\": 0.7773,\n    \"temp_width_coral\": 1.8914,\n    \"r_fast\": 1.9997,\n    \"sigma_fast\": 0.6411,\n    \"r_slow\": 0.3733,\n    \"handling_fast\": 0.01,\n    \"slow_pred\": [12.7726, 13.7243, 13.9716, 12.0744, 12.2783, 12.2322, 11.2977, 11.6834, 11.2999, 11.5895, 11.1735, 10.7329, 10.874, 10.1335, 8.6602, 8.1439, 7.376, 5.4811, 3.0245, 3.0157, 3.6117, 4.0114, 4.6367, 4.3266, 4.9174, 5.5251],\n    \"K_coral\": 49.9988,\n    \"sigma_cots\": 0.4045,\n    \"temp_width_cots\": 2.0935,\n    \"sigma_slow\": 0.2952\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.2739, 0.3304, 0.4159, 0.4849, 0.5739, 0.6507, 0.6793, 0.7348, 0.7217, 1.1675, 0.7561, 1.3996, 1.0967, 0.6103, 0.6221, 0.5888, 0.6082, 0.5321, 0.3212, 0.2599, 0.2771, 0.3373, 0.4466, 0.3747, 0.4166],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 23.3145, 33.284, 21.9595, 30.105, 30.2224, 21.8005, 35.0352, 20.7224, 33.3318, 19.3825, 24.2005, 30.9425, 6.6669, 15.7383, 11.0572, 15.6309, 7.4743, 0.8115, 2.8783, 10.453, 22.0219, 53.436, 4.5298, 14.2082, 31.6853],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 13.7243, 13.9716, 12.0744, 12.2783, 12.2322, 11.2977, 11.6834, 11.2999, 11.5895, 11.1735, 10.7329, 10.874, 10.1335, 8.6602, 8.1439, 7.376, 5.4811, 3.0245, 3.0157, 3.6117, 4.0114, 4.6367, 4.3266, 4.9174, 5.5251],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "6": {
      "status": "SUCCESS",
      "objective_value": 0.8339
    }
  }
}