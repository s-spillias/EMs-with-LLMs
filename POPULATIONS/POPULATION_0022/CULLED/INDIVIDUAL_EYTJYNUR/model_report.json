{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:119:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  119 |     fast_pred(t) = fmax(fast_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:120:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  120 |     slow_pred(t) = fmax(slow_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp:121:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  121 |     cots_pred(t) = fmax(cots_pred(t), Type(1e-8));\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 1.0074,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         19     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.2615,
          0.2994,
          0.3413,
          0.3867,
          0.4358,
          0.482,
          0.5266,
          0.569,
          0.6045,
          0.6311,
          2.1489,
          1.2783,
          2.6019,
          1.7231,
          1.0152,
          0.7723,
          0.6292,
          0.536,
          0.4708,
          0.4233,
          0.3847,
          0.3529,
          0.3258,
          0.3028,
          0.2835,
          0.2675
        ],
        "fast_pred": [
          10.0694,
          10.2257,
          10.3834,
          10.5763,
          10.5418,
          10.6554,
          10.8072,
          10.8457,
          10.8508,
          10.8685,
          10.7981,
          10.5061,
          10.352,
          10.0254,
          9.7959,
          9.6318,
          9.7324,
          9.8639,
          9.9603,
          9.9276,
          9.915,
          9.8717,
          9.8896,
          9.9512,
          10.08,
          10.0689
        ],
        "slow_pred": [
          12.7726,
          12.9839,
          13.1603,
          13.4059,
          13.1022,
          13.05,
          13.0368,
          12.7574,
          12.3857,
          12.0133,
          11.4688,
          9.2819,
          8.2962,
          6.3613,
          5.3846,
          4.8653,
          4.7435,
          4.7528,
          4.8452,
          4.7125,
          4.6178,
          4.5041,
          4.4618,
          4.4614,
          4.5167,
          4.4709
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            0.2994,
            0.3413,
            0.3867,
            0.4358,
            0.482,
            0.5266,
            0.569,
            0.6045,
            0.6311,
            2.1489,
            1.2783,
            2.6019,
            1.7231,
            1.0152,
            0.7723,
            0.6292,
            0.536,
            0.4708,
            0.4233,
            0.3847,
            0.3529,
            0.3258,
            0.3028,
            0.2835,
            0.2675
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.2257,
            10.3834,
            10.5763,
            10.5418,
            10.6554,
            10.8072,
            10.8457,
            10.8508,
            10.8685,
            10.7981,
            10.5061,
            10.352,
            10.0254,
            9.7959,
            9.6318,
            9.7324,
            9.8639,
            9.9603,
            9.9276,
            9.915,
            9.8717,
            9.8896,
            9.9512,
            10.08,
            10.0689
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            12.9839,
            13.1603,
            13.4059,
            13.1022,
            13.05,
            13.0368,
            12.7574,
            12.3857,
            12.0133,
            11.4688,
            9.2819,
            8.2962,
            6.3613,
            5.3846,
            4.8653,
            4.7435,
            4.7528,
            4.8452,
            4.7125,
            4.6178,
            4.5041,
            4.4618,
            4.4614,
            4.5167,
            4.4709
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.so POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n               0.4                0.1               50.0               50.0 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n               1.0                0.5               28.0                4.0 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n              27.0                5.0                1.5                0.1 \nStarting model phases\nNumber of phases: 5 \nPhase 1 \nInitial parameter values for phase 1 :\ncots_attack_rate        pref_fast    cots_nat_mort \n             1.5              2.0              0.5 \nFinal parameter values for phase 1 :\ncots_attack_rate        pref_fast    cots_nat_mort \n       0.1000000        0.1000000        0.1705076 \nConvergence message: relative convergence (4) \nNumber of iterations: 74 \nObjective function value: 34920.73 \nGradient at solution for phase 1 :\n         [,1]     [,2]         [,3]\n[1,] 935.2787 64.12819 0.0005464874\nPhase 2 \nInitial parameter values for phase 2 :\n  fast_growth_rate   slow_growth_rate cots_handling_time          assim_eff \n              0.40               0.10               0.10               0.05 \nFinal parameter values for phase 2 :\n  fast_growth_rate   slow_growth_rate cots_handling_time          assim_eff \n        0.01056655         0.08298349         0.01000000         0.19491674 \nConvergence message: relative convergence (4) \nNumber of iterations: 27 \nObjective function value: 105.2596 \nGradient at solution for phase 2 :\n             [,1]        [,2]     [,3]        [,4]\n[1,] -0.003426027 0.001947065 26.09229 0.001306412\nPhase 3 \nInitial parameter values for phase 3 :\n       K_fast        K_slow  sst_opt_fast  sst_opt_slow cots_self_reg \n         50.0          50.0          28.0          27.0           0.1 \nFinal parameter values for phase 3 :\n       K_fast        K_slow  sst_opt_fast  sst_opt_slow cots_self_reg \n  100.0000000   100.0000000    29.6662652    32.6872169     0.1785979 \nConvergence message: relative convergence (4) \nNumber of iterations: 39 \nObjective function value: 92.71044 \nGradient at solution for phase 3 :\n              [,1]         [,2]         [,3]          [,4]          [,5]\n[1,] -0.0007680671 -0.001933807 9.659359e-09 -7.719969e-08 -1.037283e-05\nPhase 4 \nInitial parameter values for phase 4 :\n       comp_fs        comp_sf sst_width_fast sst_width_slow \n           1.0            0.5            4.0            5.0 \nFinal parameter values for phase 4 :\n       comp_fs        comp_sf sst_width_fast sst_width_slow \n      0.000000       0.000000       2.349385       4.528426 \nConvergence message: relative convergence (4) \nNumber of iterations: 12 \nObjective function value: 92.46539 \nGradient at solution for phase 4 :\n           [,1]     [,2]         [,3]          [,4]\n[1,] 0.01698744 0.163873 1.259353e-07 -8.044287e-08\nPhase 5 \nInitial parameter values for phase 5 :\nlog_sd_cots log_sd_fast log_sd_slow \n         -1          -1          -1 \nFinal parameter values for phase 5 :\nlog_sd_cots log_sd_fast log_sd_slow \n -0.4722947  -0.3123504  -0.9736100 \nConvergence message: relative convergence (4) \nNumber of iterations: 8 \nObjective function value: 62.46389 \nGradient at solution for phase 5 :\n              [,1]         [,2]         [,3]\n[1,] -7.869588e-06 2.445963e-05 0.0002219681\nFinal Phase\nInitial parameter values for final phase:\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n        0.01056655         0.08298349       100.00000000       100.00000000 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n        0.00000000         0.00000000        29.66626516         2.34938453 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n       32.68721689         4.52842573         0.10000000         0.01000000 \n         pref_fast          assim_eff      cots_nat_mort      cots_self_reg \n        0.10000000         0.19491674         0.17050759         0.17859791 \n       log_sd_cots        log_sd_fast        log_sd_slow \n       -0.47229472        -0.31235043        -0.97361002 \nFinal parameter values for final phase:\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n      2.759486e-02       8.206436e-02       1.000000e+02       1.000000e+02 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n      2.510838e-07       0.000000e+00       2.966573e+01       2.348174e+00 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n      3.268485e+01       4.532001e+00       1.062367e-01       3.487721e-02 \n         pref_fast          assim_eff      cots_nat_mort      cots_self_reg \n      1.647514e-01       2.401995e-01       1.321120e-01       2.770133e-01 \n       log_sd_cots        log_sd_fast        log_sd_slow \n     -5.331246e-01      -3.051863e-01      -9.506658e-01 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 58.34021 \nGradient at solution for final phase:\n           [,1]       [,2]          [,3]         [,4]       [,5]       [,6]\n[1,] -0.9660072 -0.5748742 -6.110226e-05 -0.002030859 0.04408199 0.05700268\n           [,7]      [,8]      [,9]      [,10]    [,11]     [,12]     [,13]\n[1,] 0.06392638 0.1420143 0.2567341 -0.3794383 6.236975 -3.739712 -5.756203\n          [,14]     [,15]     [,16]    [,17]    [,18]    [,19]\n[1,] -0.2569385 0.6451693 -7.002866 6.791285 1.064116 -1.14388\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 3\n $ cots_pred: num [1:26] 0.262 0.299 0.341 0.387 0.436 ...\n $ fast_pred: num [1:26] 10.1 10.2 10.4 10.6 10.5 ...\n $ slow_pred: num [1:26] 12.8 13 13.2 13.4 13.1 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"fast_pred\" \"slow_pred\"\n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 0.2994275 0.3413353 0.386731 0.4357569 0.4819928 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2615  0.3442  0.4764  0.6944  0.6306  2.6019 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.22571 10.38337 10.57635 10.54184 10.65542 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  9.632   9.918  10.075  10.238  10.568  10.868 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 12.98386 13.16033 13.40586 13.10222 13.04996 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.461   4.720   7.329   8.477  12.769  13.406 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 0.2994275 0.3413353 0.386731 0.4357569 0.4819928 ...\nMSE (normalized): 1.475799 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.22571 10.38337 10.57635 10.54184 10.65542 ...\nMSE (normalized): 1.183519 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 12.98386 13.16033 13.40586 13.10222 13.04996 ...\nMSE (normalized): 0.3628585 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n1.4757992 1.1835187 0.3628585 \n\nDEBUG: Final objective value (mean of MSEs): 1.007392 \n\nFinal objective function value: 1.007392 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 1.0074,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         19     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.2615, 0.2994, 0.3413, 0.3867, 0.4358, 0.482, 0.5266, 0.569, 0.6045, 0.6311, 2.1489, 1.2783, 2.6019, 1.7231, 1.0152, 0.7723, 0.6292, 0.536, 0.4708, 0.4233, 0.3847, 0.3529, 0.3258, 0.3028, 0.2835, 0.2675],\n    \"fast_pred\": [10.0694, 10.2257, 10.3834, 10.5763, 10.5418, 10.6554, 10.8072, 10.8457, 10.8508, 10.8685, 10.7981, 10.5061, 10.352, 10.0254, 9.7959, 9.6318, 9.7324, 9.8639, 9.9603, 9.9276, 9.915, 9.8717, 9.8896, 9.9512, 10.08, 10.0689],\n    \"slow_pred\": [12.7726, 12.9839, 13.1603, 13.4059, 13.1022, 13.05, 13.0368, 12.7574, 12.3857, 12.0133, 11.4688, 9.2819, 8.2962, 6.3613, 5.3846, 4.8653, 4.7435, 4.7528, 4.8452, 4.7125, 4.6178, 4.5041, 4.4618, 4.4614, 4.5167, 4.4709]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 0.2994, 0.3413, 0.3867, 0.4358, 0.482, 0.5266, 0.569, 0.6045, 0.6311, 2.1489, 1.2783, 2.6019, 1.7231, 1.0152, 0.7723, 0.6292, 0.536, 0.4708, 0.4233, 0.3847, 0.3529, 0.3258, 0.3028, 0.2835, 0.2675],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.2257, 10.3834, 10.5763, 10.5418, 10.6554, 10.8072, 10.8457, 10.8508, 10.8685, 10.7981, 10.5061, 10.352, 10.0254, 9.7959, 9.6318, 9.7324, 9.8639, 9.9603, 9.9276, 9.915, 9.8717, 9.8896, 9.9512, 10.08, 10.0689],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 12.9839, 13.1603, 13.4059, 13.1022, 13.05, 13.0368, 12.7574, 12.3857, 12.0133, 11.4688, 9.2819, 8.2962, 6.3613, 5.3846, 4.8653, 4.7435, 4.7528, 4.8452, 4.7125, 4.6178, 4.5041, 4.4618, 4.4614, 4.5167, 4.4709],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning messages:\n1: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n2: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n3: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n4: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 1.0074
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 1.4809,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         19     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.2615,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1.5,
          1e-08,
          1.6,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08,
          1e-08
        ],
        "fast_pred": [
          10.0694,
          10.0279,
          10.6002,
          11.2721,
          11.5118,
          12.1151,
          12.8285,
          13.3686,
          13.8683,
          14.4299,
          14.7659,
          10.9801,
          11.3271,
          6.9926,
          7.2155,
          7.2831,
          7.7503,
          8.2705,
          8.7795,
          9.0156,
          9.2867,
          9.4551,
          9.7806,
          10.1955,
          10.7378,
          10.988
        ],
        "slow_pred": [
          12.7726,
          11.9613,
          12.0353,
          12.0898,
          12.2345,
          12.3187,
          12.3862,
          12.492,
          12.6079,
          12.7176,
          12.8633,
          8.6496,
          8.743,
          4.5099,
          4.5617,
          4.6286,
          4.6537,
          4.6696,
          4.6792,
          4.7362,
          4.7912,
          4.856,
          4.9088,
          4.9553,
          4.9922,
          5.0553
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.2615,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1.5,
            1e-08,
            1.6,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08,
            1e-08
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            10.0694,
            10.0279,
            10.6002,
            11.2721,
            11.5118,
            12.1151,
            12.8285,
            13.3686,
            13.8683,
            14.4299,
            14.7659,
            10.9801,
            11.3271,
            6.9926,
            7.2155,
            7.2831,
            7.7503,
            8.2705,
            8.7795,
            9.0156,
            9.2867,
            9.4551,
            9.7806,
            10.1955,
            10.7378,
            10.988
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            12.7726,
            11.9613,
            12.0353,
            12.0898,
            12.2345,
            12.3187,
            12.3862,
            12.492,
            12.6079,
            12.7176,
            12.8633,
            8.6496,
            8.743,
            4.5099,
            4.5617,
            4.6286,
            4.6537,
            4.6696,
            4.6792,
            4.7362,
            4.7912,
            4.856,
            4.9088,
            4.9553,
            4.9922,
            5.0553
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.cpp -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.so POPULATIONS/POPULATION_0022/INDIVIDUAL_EYTJYNUR/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nPARAMETER starts (first few):\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n               0.4                0.1               50.0               50.0 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n               1.0                0.5               28.0                4.0 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n              27.0                5.0                1.5                0.1 \nStarting model phases\nNumber of phases: 5 \nPhase 1 \nInitial parameter values for phase 1 :\ncots_attack_rate        pref_fast    cots_nat_mort \n           1.500            2.000            2.426 \nFinal parameter values for phase 1 :\ncots_attack_rate        pref_fast    cots_nat_mort \n      10.0000000        0.7806737        2.4259946 \nConvergence message: relative convergence (4) \nNumber of iterations: 11 \nObjective function value: 27098.59 \nGradient at solution for phase 1 :\n           [,1]        [,2]         [,3]\n[1,] -0.1419294 0.001773491 2.801664e-07\nPhase 2 \nInitial parameter values for phase 2 :\n  fast_growth_rate   slow_growth_rate cots_handling_time          assim_eff \n              0.40               0.10               0.10               0.05 \nFinal parameter values for phase 2 :\n  fast_growth_rate   slow_growth_rate cots_handling_time          assim_eff \n        0.06604760         0.02332404         0.16802360         0.04999898 \nConvergence message: relative convergence (4) \nNumber of iterations: 33 \nObjective function value: 26982.54 \nGradient at solution for phase 2 :\n            [,1]        [,2]        [,3]         [,4]\n[1,] -0.03610892 -0.04881319 -0.03913742 2.771455e-07\nPhase 3 \nInitial parameter values for phase 3 :\n       K_fast        K_slow  sst_opt_fast  sst_opt_slow cots_self_reg \n         50.0          50.0          28.0          27.0           0.1 \nFinal parameter values for phase 3 :\n       K_fast        K_slow  sst_opt_fast  sst_opt_slow cots_self_reg \n    100.00000     100.00000      30.00654      22.66649       0.10000 \nConvergence message: relative convergence (4) \nNumber of iterations: 28 \nObjective function value: 26981.68 \nGradient at solution for phase 3 :\n             [,1]        [,2]       [,3]         [,4]          [,5]\n[1,] -0.003819867 -0.00142121 4.3995e-08 4.248893e-08 -2.743326e-16\nPhase 4 \nInitial parameter values for phase 4 :\n       comp_fs        comp_sf sst_width_fast sst_width_slow \n           1.0            0.5            4.0            5.0 \nFinal parameter values for phase 4 :\n       comp_fs        comp_sf sst_width_fast sst_width_slow \n      0.000000       0.000000       3.426887       4.402890 \nConvergence message: relative convergence (4) \nNumber of iterations: 10 \nObjective function value: 26981.09 \nGradient at solution for phase 4 :\n           [,1]      [,2]         [,3]          [,4]\n[1,] 0.03787139 0.8533013 1.839369e-06 -4.535389e-06\nPhase 5 \nInitial parameter values for phase 5 :\nlog_sd_cots log_sd_fast log_sd_slow \n         -1          -1          -1 \nFinal parameter values for phase 5 :\nlog_sd_cots log_sd_fast log_sd_slow \n  2.0000000  -0.4284400  -0.8254348 \nConvergence message: relative convergence (4) \nNumber of iterations: 11 \nObjective function value: 179.3269 \nGradient at solution for phase 5 :\n          [,1]          [,2]         [,3]\n[1,] -108.5068 -7.992582e-08 9.952655e-07\nFinal Phase\nInitial parameter values for final phase:\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n        0.06604760         0.02332404       100.00000000       100.00000000 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n        0.00000000         0.00000000        30.00654370         3.42688703 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n       22.66649177         4.40288965        10.00000000         0.16802360 \n         pref_fast          assim_eff      cots_nat_mort      cots_self_reg \n        0.78067368         0.04999898         2.42599463         0.10000000 \n       log_sd_cots        log_sd_fast        log_sd_slow \n        2.00000000        -0.42844004        -0.82543484 \nFinal parameter values for final phase:\n  fast_growth_rate   slow_growth_rate             K_fast             K_slow \n        0.07288828         0.01547983       100.00000000       100.00000000 \n           comp_fs            comp_sf       sst_opt_fast     sst_width_fast \n        0.00000000         0.00000000        30.00514477         3.42283950 \n      sst_opt_slow     sst_width_slow   cots_attack_rate cots_handling_time \n       22.66688987         4.40321411        10.00000000         0.16983572 \n         pref_fast          assim_eff      cots_nat_mort      cots_self_reg \n        0.86296532         0.04999893         2.42599463         0.00000000 \n       log_sd_cots        log_sd_fast        log_sd_slow \n        2.00000000        -0.43076356        -0.83189762 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 178.9031 \nGradient at solution for final phase:\n           [,1]       [,2]          [,3]          [,4]       [,5]      [,6]\n[1,] -0.5305324 -0.3894298 -0.0005967895 -0.0005020545 0.03037326 0.1881617\n           [,7]      [,8]        [,9]       [,10]        [,11]     [,12]\n[1,] 0.07912958 0.2036463 -0.02520845 -0.02092053 -0.000571863 -1.388189\n         [,13]         [,14]        [,15]        [,16]     [,17]     [,18]\n[1,] -4.235494 -3.401995e-08 6.019613e-09 6.019613e-17 -108.5068 0.2305248\n         [,19]\n[1,] 0.1777584\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 3\n $ cots_pred: num [1:26] 2.62e-01 1.00e-08 1.00e-08 1.00e-08 1.00e-08 ...\n $ fast_pred: num [1:26] 10.1 10 10.6 11.3 11.5 ...\n $ slow_pred: num [1:26] 12.8 12 12 12.1 12.2 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"fast_pred\" \"slow_pred\"\n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.2615042 1e-08 1e-08 1e-08 1e-08 1e-08 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1293  0.0000  1.6000 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 10.06939 10.02795 10.60019 11.27207 11.51177 12.1151 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  6.993   9.083  10.398  10.497  11.466  14.766 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 12.77261 11.96129 12.03531 12.08982 12.23449 12.31874 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.510   4.750   6.852   8.303  12.298  12.863 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.2615042 1e-08 1e-08 1e-08 1e-08 1e-08 ...\nMSE (normalized): 3.065893 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 10.06939 10.02795 10.60019 11.27207 11.51177 12.1151 ...\nMSE (normalized): 0.9555714 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 12.77261 11.96129 12.03531 12.08982 12.23449 12.31874 ...\nMSE (normalized): 0.4213722 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n3.0658931 0.9555714 0.4213722 \n\nDEBUG: Final objective value (mean of MSEs): 1.480946 \n\nFinal objective function value: 1.480946 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 1.4809,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         19     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.2615, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1.5, 1e-08, 1.6, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08],\n    \"fast_pred\": [10.0694, 10.0279, 10.6002, 11.2721, 11.5118, 12.1151, 12.8285, 13.3686, 13.8683, 14.4299, 14.7659, 10.9801, 11.3271, 6.9926, 7.2155, 7.2831, 7.7503, 8.2705, 8.7795, 9.0156, 9.2867, 9.4551, 9.7806, 10.1955, 10.7378, 10.988],\n    \"slow_pred\": [12.7726, 11.9613, 12.0353, 12.0898, 12.2345, 12.3187, 12.3862, 12.492, 12.6079, 12.7176, 12.8633, 8.6496, 8.743, 4.5099, 4.5617, 4.6286, 4.6537, 4.6696, 4.6792, 4.7362, 4.7912, 4.856, 4.9088, 4.9553, 4.9922, 5.0553]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.2615, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1.5, 1e-08, 1.6, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08, 1e-08],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [10.0694, 10.0279, 10.6002, 11.2721, 11.5118, 12.1151, 12.8285, 13.3686, 13.8683, 14.4299, 14.7659, 10.9801, 11.3271, 6.9926, 7.2155, 7.2831, 7.7503, 8.2705, 8.7795, 9.0156, 9.2867, 9.4551, 9.7806, 10.1955, 10.7378, 10.988],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [12.7726, 11.9613, 12.0353, 12.0898, 12.2345, 12.3187, 12.3862, 12.492, 12.6079, 12.7176, 12.8633, 8.6496, 8.743, 4.5099, 4.5617, 4.6286, 4.6537, 4.6696, 4.6792, 4.7362, 4.7912, 4.856, 4.9088, 4.9553, 4.9922, 5.0553],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning messages:\n1: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n2: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n3: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n4: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n5: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\n6: In nlminb(start = par0, objective = model$fn, gradient = model$gr,  :\n  NA/NaN function evaluation\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "6": {
      "status": "SUCCESS",
      "objective_value": 1.4809
    }
  }
}