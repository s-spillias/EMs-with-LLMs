{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "R script failed with return code 1",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 4 \nPhase 1 \nProblem with these parameter entries:\n     log_K_cots  log_alpha_fast  log_alpha_slow      log_e_fast      log_e_slow \n              2               3               4               5               6 \n     log_r_fast      log_r_slow      log_K_fast      log_K_slow  log_sigma_cots \n              7               8               9              10              11 \n log_sigma_fast  log_sigma_slow     log_sst_opt      log_sst_sd log_immig_scale \n             12              13              15              16              17 \nError in model phases: Only numeric matrices, vectors and arrays can be interfaced",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nError in value[[3L]](cond) : \n  Error in model phases: Only numeric matrices, vectors and arrays can be interfaced\nCalls: tryCatch -> tryCatchList -> tryCatchOne -> <Anonymous>\nExecution halted"
    },
    "2": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 4 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "3": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = double]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2035:7:   required from here\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:58:27: error: no matching function for call to \u2018Value(Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar&)\u2019\n   58 |   Type cots = CppAD::Value(cots_dat(0)); // Initial COTS abundance (indiv/m2)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\nIn file included from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/convert.hpp:45,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/user_ad.hpp:68,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/cppad.hpp:82,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:125,\n                 from POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:1:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:58:27: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar\u2019 {aka \u2018double\u2019}\n   58 |   Type cots = CppAD::Value(cots_dat(0)); // Initial COTS abundance (indiv/m2)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:59:27: error: no matching function for call to \u2018Value(Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar&)\u2019\n   59 |   Type fast = CppAD::Value(fast_dat(0)); // Initial fast coral cover (%)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:59:27: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar\u2019 {aka \u2018double\u2019}\n   59 |   Type fast = CppAD::Value(fast_dat(0)); // Initial fast coral cover (%)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:60:27: error: no matching function for call to \u2018Value(Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar&)\u2019\n   60 |   Type slow = CppAD::Value(slow_dat(0)); // Initial slow coral cover (%)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:60:27: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>::Scalar\u2019 {aka \u2018double\u2019}\n   60 |   Type slow = CppAD::Value(slow_dat(0)); // Initial slow coral cover (%)\n      |               ~~~~~~~~~~~~^~~~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:109:26: error: no matching function for call to \u2018Value(double&)\u2019\n  109 |       cots = CppAD::Value(cots_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:109:26: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018double\u2019\n  109 |       cots = CppAD::Value(cots_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:110:26: error: no matching function for call to \u2018Value(double&)\u2019\n  110 |       fast = CppAD::Value(fast_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:110:26: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018double\u2019\n  110 |       fast = CppAD::Value(fast_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:111:26: error: no matching function for call to \u2018Value(double&)\u2019\n  111 |       slow = CppAD::Value(slow_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note: candidate: \u2018template<class Base> Base CppAD::Value(const AD<Base>&)\u2019\n   83 | Base Value(const AD<Base> &x)\n      |      ^~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/cppad/local/value.hpp:83:6: note:   template argument deduction/substitution failed:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:111:26: note:   mismatched types \u2018const CppAD::AD<Base>\u2019 and \u2018double\u2019\n  111 |       slow = CppAD::Value(slow_next);\n      |              ~~~~~~~~~~~~^~~~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:58:8: error: conversion from \u2018AD<double>\u2019 to non-scalar type \u2018AD<CppAD::AD<double>>\u2019 requested\n   58 |   Type cots = CppAD::Value(cots_dat(0)); // Initial COTS abundance (indiv/m2)\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:59:8: error: conversion from \u2018AD<double>\u2019 to non-scalar type \u2018AD<CppAD::AD<double>>\u2019 requested\n   59 |   Type fast = CppAD::Value(fast_dat(0)); // Initial fast coral cover (%)\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:60:8: error: conversion from \u2018AD<double>\u2019 to non-scalar type \u2018AD<CppAD::AD<double>>\u2019 requested\n   60 |   Type slow = CppAD::Value(slow_dat(0)); // Initial slow coral cover (%)\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:58:8: error: conversion from \u2018AD<AD<double>>\u2019 to non-scalar type \u2018AD<AD<CppAD::AD<double>>>\u2019 requested\n   58 |   Type cots = CppAD::Value(cots_dat(0)); // Initial COTS abundance (indiv/m2)\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:59:8: error: conversion from \u2018AD<AD<double>>\u2019 to non-scalar type \u2018AD<AD<CppAD::AD<double>>>\u2019 requested\n   59 |   Type fast = CppAD::Value(fast_dat(0)); // Initial fast coral cover (%)\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:60:8: error: conversion from \u2018AD<AD<double>>\u2019 to non-scalar type \u2018AD<AD<CppAD::AD<double>>>\u2019 requested\n   60 |   Type slow = CppAD::Value(slow_dat(0)); // Initial slow coral cover (%)\n      |        ^~~~\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "4": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 4 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "5": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp: In member function \u2018Type objective_function<Type>::operator()()\u2019:\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:110:21: error: \u2018CondExpNaN\u2019 is not a member of \u2018CppAD\u2019; did you mean \u2018CondExpOp\u2019?\n  110 |       cots = CppAD::CondExpNaN(cots_next, Type(0.0), cots_next);\n      |                     ^~~~~~~~~~\n      |                     CondExpOp\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:111:21: error: \u2018CondExpNaN\u2019 is not a member of \u2018CppAD\u2019; did you mean \u2018CondExpOp\u2019?\n  111 |       fast = CppAD::CondExpNaN(fast_next, Type(0.0), fast_next);\n      |                     ^~~~~~~~~~\n      |                     CondExpOp\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp:112:21: error: \u2018CondExpNaN\u2019 is not a member of \u2018CppAD\u2019; did you mean \u2018CondExpOp\u2019?\n  112 |       slow = CppAD::CondExpNaN(slow_next, Type(0.0), slow_next);\n      |                     ^~~~~~~~~~\n      |                     CondExpOp\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "6": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_G9W4JH06/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 4 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "7": {
      "status": "BROKEN"
    }
  }
}