{
  "iterations": {
    "1": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nIn file included from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:228,\n                 from POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:1:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:6:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    6 | DATA_VECTOR(Year); // Observation year (integer, years)\n      | ^~~~~~~~~~~\nIn file included from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:161,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:6:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    6 | DATA_VECTOR(Year); // Observation year (integer, years)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:6:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    6 | DATA_VECTOR(Year); // Observation year (integer, years)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:6:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    6 | DATA_VECTOR(Year); // Observation year (integer, years)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:9:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    9 | DATA_VECTOR(cotsimm_dat); // COTS larval immigration rate (individuals/m2/year)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:9:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    9 | DATA_VECTOR(cotsimm_dat); // COTS larval immigration rate (individuals/m2/year)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:9:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    9 | DATA_VECTOR(cotsimm_dat); // COTS larval immigration rate (individuals/m2/year)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:9:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n    9 | DATA_VECTOR(cotsimm_dat); // COTS larval immigration rate (individuals/m2/year)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:10:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   10 | DATA_VECTOR(sst_dat);     // Sea-surface temperature (deg C)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:10:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   10 | DATA_VECTOR(sst_dat);     // Sea-surface temperature (deg C)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:10:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   10 | DATA_VECTOR(sst_dat);     // Sea-surface temperature (deg C)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:10:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   10 | DATA_VECTOR(sst_dat);     // Sea-surface temperature (deg C)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:11:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   11 | DATA_VECTOR(cots_dat);    // Observed adult COTS abundance (individuals/m2)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:11:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   11 | DATA_VECTOR(cots_dat);    // Observed adult COTS abundance (individuals/m2)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:11:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   11 | DATA_VECTOR(cots_dat);    // Observed adult COTS abundance (individuals/m2)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:11:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   11 | DATA_VECTOR(cots_dat);    // Observed adult COTS abundance (individuals/m2)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:12:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   12 | DATA_VECTOR(fast_dat);    // Observed fast-growing coral cover (Acropora, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:12:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   12 | DATA_VECTOR(fast_dat);    // Observed fast-growing coral cover (Acropora, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:12:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   12 | DATA_VECTOR(fast_dat);    // Observed fast-growing coral cover (Acropora, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:12:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   12 | DATA_VECTOR(fast_dat);    // Observed fast-growing coral cover (Acropora, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n  237 | vector<Type> name;                                                      \\\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:13:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   13 | DATA_VECTOR(slow_dat);    // Observed slow-growing coral cover (Faviidae/Porites, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:237:12: error: template argument 1 is invalid\n  237 | vector<Type> name;                                                      \\\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:13:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   13 | DATA_VECTOR(slow_dat);    // Observed slow-growing coral cover (Faviidae/Porites, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:238:1: error: expected unqualified-id before \u2018if\u2019\n  238 | if (!Rf_isNull(getListElement(TMB_OBJECTIVE_PTR -> parameters,#name))){ \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:13:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   13 | DATA_VECTOR(slow_dat);    // Observed slow-growing coral cover (Faviidae/Porites, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:241:3: error: expected unqualified-id before \u2018else\u2019\n  241 | } else {                                                                \\\n      |   ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:13:1: note: in expansion of macro \u2018DATA_VECTOR\u2019\n   13 | DATA_VECTOR(slow_dat);    // Observed slow-growing coral cover (Faviidae/Porites, %)\n      | ^~~~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:18:1: note: in expansion of macro \u2018PARAMETER\u2019\n   18 | PARAMETER(log_r_cots);      // log intrinsic growth rate of COTS (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:19:1: note: in expansion of macro \u2018PARAMETER\u2019\n   19 | PARAMETER(log_K_cots);      // log carrying capacity for COTS (log(indiv/m2))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:20:1: note: in expansion of macro \u2018PARAMETER\u2019\n   20 | PARAMETER(log_alpha_cots);  // log predation efficiency on coral (log(% cover)^-1 year^-1)\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:21:1: note: in expansion of macro \u2018PARAMETER\u2019\n   21 | PARAMETER(log_immig_eff);   // log efficiency of larval immigration (log(indiv/m2)/(indiv/m2/year))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:22:1: note: in expansion of macro \u2018PARAMETER\u2019\n   22 | PARAMETER(log_m_cots);      // log background mortality rate of COTS (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:23:1: note: in expansion of macro \u2018PARAMETER\u2019\n   23 | PARAMETER(logit_phi_outbreak); // logit threshold for outbreak triggering (unitless, 0-1 scaled)\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:24:1: note: in expansion of macro \u2018PARAMETER\u2019\n   24 | PARAMETER(log_sigma_cots);  // log SD for COTS observation error (lognormal, log(indiv/m2))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:27:1: note: in expansion of macro \u2018PARAMETER\u2019\n   27 | PARAMETER(log_r_fast);      // log recovery rate of fast coral (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:28:1: note: in expansion of macro \u2018PARAMETER\u2019\n   28 | PARAMETER(log_r_slow);      // log recovery rate of slow coral (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:29:1: note: in expansion of macro \u2018PARAMETER\u2019\n   29 | PARAMETER(log_K_coral);     // log total coral carrying capacity (% cover)\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:30:1: note: in expansion of macro \u2018PARAMETER\u2019\n   30 | PARAMETER(log_m_fast);      // log background mortality of fast coral (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:31:1: note: in expansion of macro \u2018PARAMETER\u2019\n   31 | PARAMETER(log_m_slow);      // log background mortality of slow coral (log(year^-1))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:32:1: note: in expansion of macro \u2018PARAMETER\u2019\n   32 | PARAMETER(log_sigma_fast);  // log SD for fast coral obs error (lognormal, log(%))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:33:1: note: in expansion of macro \u2018PARAMETER\u2019\n   33 | PARAMETER(log_sigma_slow);  // log SD for slow coral obs error (lognormal, log(%))\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:36:1: note: in expansion of macro \u2018PARAMETER\u2019\n   36 | PARAMETER(beta_sst_cots);   // Effect of SST on COTS growth (year^-1/degC)\n      | ^~~~~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:228:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  228 | Type name(TMB_OBJECTIVE_PTR -> fillShape(                               \\\n      | ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:37:1: note: in expansion of macro \u2018PARAMETER\u2019\n   37 | PARAMETER(beta_sst_coral);  // Effect of SST on coral mortality (year^-1/degC)\n      | ^~~~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:41:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   41 | Type r_cots = exp(log_r_cots);           // Intrinsic COTS growth rate (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:42:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   42 | Type K_cots = exp(log_K_cots);           // COTS carrying capacity (indiv/m2)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:43:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   43 | Type alpha_cots = exp(log_alpha_cots);   // COTS predation efficiency (per % coral per year)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:44:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   44 | Type immig_eff = exp(log_immig_eff);     // Immigration efficiency (indiv/m2 per indiv/m2/year)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:45:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   45 | Type m_cots = exp(log_m_cots);           // Background COTS mortality (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:46:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   46 | Type phi_outbreak = 1/(1+exp(-logit_phi_outbreak)); // Outbreak threshold (0-1, smooth)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:47:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   47 | Type sigma_cots = exp(log_sigma_cots) + Type(1e-8); // SD for COTS obs (lognormal, indiv/m2)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:49:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   49 | Type r_fast = exp(log_r_fast);           // Fast coral recovery rate (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:50:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   50 | Type r_slow = exp(log_r_slow);           // Slow coral recovery rate (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:51:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   51 | Type K_coral = exp(log_K_coral);         // Total coral carrying capacity (% cover)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:52:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   52 | Type m_fast = exp(log_m_fast);           // Fast coral background mortality (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:53:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   53 | Type m_slow = exp(log_m_slow);           // Slow coral background mortality (year^-1)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:54:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   54 | Type sigma_fast = exp(log_sigma_fast) + Type(1e-8); // SD for fast coral obs (lognormal, %)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:55:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n   55 | Type sigma_slow = exp(log_sigma_slow) + Type(1e-8); // SD for slow coral obs (lognormal, %)\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:59:14: error: request for member \u2018size\u2019 in \u2018Year\u2019, which is of non-class type \u2018int\u2019\n   59 | int n = Year.size();\n      |              ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:60:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n   60 | vector<Type> cots_pred(n);  // Predicted COTS abundance (indiv/m2)\n      |        ^~~~\n      |        Eigen::Architecture::Type\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:60:12: error: template argument 1 is invalid\n   60 | vector<Type> cots_pred(n);  // Predicted COTS abundance (indiv/m2)\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:61:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n   61 | vector<Type> fast_pred(n);  // Predicted fast coral cover (%)\n      |        ^~~~\n      |        Eigen::Architecture::Type\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:61:12: error: template argument 1 is invalid\n   61 | vector<Type> fast_pred(n);  // Predicted fast coral cover (%)\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:62:8: error: \u2018Type\u2019 was not declared in this scope; did you mean \u2018Eigen::Architecture::Type\u2019?\n   62 | vector<Type> slow_pred(n);  // Predicted slow coral cover (%)\n      |        ^~~~\n      |        Eigen::Architecture::Type\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Constants.h:471:8: note: \u2018Eigen::Architecture::Type\u2019 declared here\n  471 |   enum Type {\n      |        ^~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:62:12: error: template argument 1 is invalid\n   62 | vector<Type> slow_pred(n);  // Predicted slow coral cover (%)\n      |            ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:65:10: error: expected constructor, destructor, or type conversion before \u2018(\u2019 token\n   65 | cots_pred(0) = cots_dat(0);\n      |          ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:66:10: error: expected constructor, destructor, or type conversion before \u2018(\u2019 token\n   66 | fast_pred(0) = fast_dat(0);\n      |          ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:67:10: error: expected constructor, destructor, or type conversion before \u2018(\u2019 token\n   67 | slow_pred(0) = slow_dat(0);\n      |          ^\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:75:1: error: expected unqualified-id before \u2018for\u2019\n   75 | for(int t=1; t<n; t++) {\n      | ^~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:75:14: error: \u2018t\u2019 does not name a type; did you mean \u2018tm\u2019?\n   75 | for(int t=1; t<n; t++) {\n      |              ^\n      |              tm\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:75:19: error: \u2018t\u2019 does not name a type; did you mean \u2018tm\u2019?\n   75 | for(int t=1; t<n; t++) {\n      |                   ^\n      |                   tm\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:116:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  116 | Type nll = 0.0;\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:117:1: error: expected unqualified-id before \u2018for\u2019\n  117 | for(int t=0; t<n; t++) {\n      | ^~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:117:14: error: \u2018t\u2019 does not name a type; did you mean \u2018tm\u2019?\n  117 | for(int t=0; t<n; t++) {\n      |              ^\n      |              tm\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:117:19: error: \u2018t\u2019 does not name a type; did you mean \u2018tm\u2019?\n  117 | for(int t=0; t<n; t++) {\n      |                   ^\n      |                   tm\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:129:1: error: \u2018Type\u2019 does not name a type; did you mean \u2018typeof\u2019?\n  129 | Type penalty = 0.0;\n      | ^~~~\n      | typeof\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:130:1: error: \u2018penalty\u2019 does not name a type\n  130 | penalty += pow(CppAD::CondExpLt(r_cots, Type(0.01), r_cots-Type(0.01), Type(0.0)), 2); // r_cots >= 0.01\n      | ^~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:131:1: error: \u2018penalty\u2019 does not name a type\n  131 | penalty += pow(CppAD::CondExpGt(r_cots, Type(2.0), r_cots-Type(2.0), Type(0.0)), 2);   // r_cots <= 2\n      | ^~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:132:1: error: \u2018penalty\u2019 does not name a type\n  132 | penalty += pow(CppAD::CondExpLt(K_cots, Type(0.01), K_cots-Type(0.01), Type(0.0)), 2); // K_cots >= 0.01\n      | ^~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:133:1: error: \u2018penalty\u2019 does not name a type\n  133 | penalty += pow(CppAD::CondExpGt(K_cots, Type(10.0), K_cots-Type(10.0), Type(0.0)), 2); // K_cots <= 10\n      | ^~~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:138:1: error: \u2018nll\u2019 does not name a type\n  138 | nll += penalty;\n      | ^~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:316:1: error: expected unqualified-id before \u2018if\u2019\n  316 | if( isDouble<Type>::value &&                                            \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:139:1: note: in expansion of macro \u2018REPORT\u2019\n  139 | REPORT(cots_pred);\n      | ^~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:316:1: error: expected unqualified-id before \u2018if\u2019\n  316 | if( isDouble<Type>::value &&                                            \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:140:1: note: in expansion of macro \u2018REPORT\u2019\n  140 | REPORT(fast_pred);\n      | ^~~~~~\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:316:1: error: expected unqualified-id before \u2018if\u2019\n  316 | if( isDouble<Type>::value &&                                            \\\n      | ^~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:141:1: note: in expansion of macro \u2018REPORT\u2019\n  141 | REPORT(slow_pred);\n      | ^~~~~~\nPOPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp:142:1: error: expected unqualified-id before \u2018return\u2019\n  142 | return nll;\n      | ^~~~~~\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "2": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 3 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "3": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 3 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "4": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 3 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "5": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 3 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "6": {
      "status": "ERROR",
      "message": "R script failed with return code 139",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.cpp -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.so POPULATIONS/POPULATION_0010/INDIVIDUAL_QII74NET/model.o -L/usr/lib/R/lib -lR\nStarting model phases\nNumber of phases: 3 \nPhase 1",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/SCCP-QuantModelling\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\n\n *** caught segfault ***\naddress (nil), cause 'memory not mapped'\n\nTraceback:\n 1: getParameterOrder(data, parameters, new.env(), DLL = DLL)\n 2: MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,     map = map)\n 3: doTryCatch(return(expr), name, parentenv, handler)\n 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 5: tryCatchList(expr, classes, parentenv, handlers)\n 6: tryCatch({    for (m in seq(1, n_phases)) {        cat(\"Phase\", m, \"\\n\")        to_fit <- params[params$priority == m & !is.na(params$priority) &             params$import_type == \"PARAMETER\", ]$parameter        map <- generate_map(to_fit)        if (exists(\"model\")) {            parameters <- model$env$parList(fit$par)        }        model <- MakeADFun(data_in, parameters, DLL = \"model\",             silent = TRUE, map = map)        if (is.null(model)) {            stop(\"Failed to create model\")        }        cat(\"Initial parameter values for phase\", m, \":\\n\")        print(model$par)        fit <- nlminb(model$par, model$fn, model$gr)        if (is.null(fit)) {            stop(\"Failed to fit model\")        }        cat(\"Final parameter values for phase\", m, \":\\n\")        print(fit$par)        cat(\"Convergence message:\", fit$message, \"\\n\")        cat(\"Number of iterations:\", fit$iterations, \"\\n\")        cat(\"Objective function value:\", fit$objective, \"\\n\")        if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {            cat(\"WARNING: NaN or Inf values detected in parameters at phase\",                 m, \"\\n\")        }        cat(\"Gradient at solution for phase\", m, \":\\n\")        grad <- model$gr(fit$par)        print(grad)        if (any(is.nan(grad)) || any(is.infinite(grad))) {            cat(\"WARNING: NaN or Inf values detected in gradient at phase\",                 m, \"\\n\")        }        best <- model$env$last.par.best        model$report()    }    cat(\"Final Phase\\n\")    to_fit <- params[!is.na(params$priority) & params$import_type ==         \"PARAMETER\", ]$parameter    map <- generate_map(to_fit)    parameters <- model$env$parList(fit$par)    model <- MakeADFun(data_in, parameters, DLL = \"model\", silent = TRUE,         map = map)    cat(\"Initial parameter values for final phase:\\n\")    print(model$par)    fit <- nlminb(model$par, model$fn, model$gr)    cat(\"Final parameter values for final phase:\\n\")    print(fit$par)    cat(\"Convergence message:\", fit$message, \"\\n\")    cat(\"Number of iterations:\", fit$iterations, \"\\n\")    cat(\"Objective function value:\", fit$objective, \"\\n\")    if (any(is.nan(fit$par)) || any(is.infinite(fit$par))) {        cat(\"WARNING: NaN or Inf values detected in parameters at final phase\\n\")    }    cat(\"Gradient at solution for final phase:\\n\")    grad <- model$gr(fit$par)    print(grad)    if (any(is.nan(grad)) || any(is.infinite(grad))) {        cat(\"WARNING: NaN or Inf values detected in gradient at final phase\\n\")    }    best <- model$env$last.par.best}, error = function(e) {    error_message <- paste(\"Error in model phases:\", conditionMessage(e))    cat(error_message, \"\\n\")    stop(error_message)})\nAn irrecoverable exception occurred. R is aborting now ...\nSegmentation fault (core dumped)"
    },
    "7": {
      "status": "BROKEN"
    }
  }
}