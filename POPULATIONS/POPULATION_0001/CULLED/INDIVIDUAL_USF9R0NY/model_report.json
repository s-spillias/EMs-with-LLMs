{
  "iterations": {
    "1": {
      "status": "LEAKAGE",
      "message": "Data leakage detected in model equations:\n  Line 139: Missing prediction vector: fast_pred not found in model.\n    Required for response variable: fast_dat\n  Line 139: Missing prediction vector: slow_pred not found in model.\n    Required for response variable: slow_dat\n  Line 139: Missing prediction vector: cots_pred not found in model.\n    Required for response variable: cots_dat\n  Line 245: Missing prediction vector: fast_pred not found in model.\n    Required for response variable: fast_dat\n  Line 245: Missing prediction vector: slow_pred not found in model.\n    Required for response variable: slow_dat\n  Line 245: Missing prediction vector: cots_pred not found in model.\n    Required for response variable: cots_dat",
      "objective_value": "NA"
    },
    "2": {
      "status": "ERROR",
      "message": "Model failed to compile.",
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp -o POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/EMs-with-LLMs\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<double>]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:1312:6:   required from here\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:119:25: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  119 |   Type sigma_cots = fmax(exp(log_sigma_cots), min_sigma);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<double>\nIn file included from /usr/include/c++/13/cmath:47,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/src/Core/util/Macros.h:679,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Core:19,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include/Eigen/Dense:1,\n                 from /home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/TMB.hpp:92,\n                 from POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:1:\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:120:25: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  120 |   Type phi_fast   = fmax(exp(log_phi_fast), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:121:25: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  121 |   Type phi_slow   = fmax(exp(log_phi_slow), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:139:22: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  139 |   Type N_prev = fmax(Type(0.1), Kcots0 * Type(0.5));   // adults m^-2\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:140:21: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  140 |   Type F_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:141:21: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  141 |   Type S_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:176:25: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  176 |     Type dF_cots = fmin(dF_cots_pot, F_prev);                              // cannot consume more than available\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:177:25: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  177 |     Type dS_cots = fmin(dS_cots_pot, S_prev);\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:182:18: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  182 |     crowd = fmax(crowd, Type(-1.0));                                       // avoid extreme negatives\n      |                  ^~~~~\n      |                  |\n      |                  CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:194:19: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  194 |     F_next = fmin(F_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:195:19: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  195 |     S_next = fmin(S_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:199:19: error: cannot convert \u2018CppAD::AD<double>\u2019 to \u2018double\u2019\n  199 |     K_cots = fmax(K_cots, Type(0.0));                                      // capacity cannot be negative\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<double>\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:235:23: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  235 |     Type y_cots = fmax(cots_dat(t), eps);\n      |                   ~~~~^~~~~~~~~~~~~~~~~~\n      |                       |\n      |                       Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:236:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  236 |     Type mu_cots = fmax(cots_pred(t), eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:240:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  240 |     Type y_fast = fmin(fmax(fast_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:241:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  241 |     Type y_slow = fmin(fmax(slow_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:242:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  242 |     Type mu_fast = fmin(fmax(fast_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:243:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<double>\u2019} to \u2018double\u2019\n  243 |     Type mu_slow = fmin(fmax(slow_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<double>, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<double>}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<double> >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2116:26:   required from here\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:119:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  119 |   Type sigma_cots = fmax(exp(log_sigma_cots), min_sigma);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:120:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  120 |   Type phi_fast   = fmax(exp(log_phi_fast), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:121:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  121 |   Type phi_slow   = fmax(exp(log_phi_slow), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:139:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  139 |   Type N_prev = fmax(Type(0.1), Kcots0 * Type(0.5));   // adults m^-2\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:140:21: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  140 |   Type F_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:141:21: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  141 |   Type S_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:176:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  176 |     Type dF_cots = fmin(dF_cots_pot, F_prev);                              // cannot consume more than available\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:177:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  177 |     Type dS_cots = fmin(dS_cots_pot, S_prev);\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:182:18: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  182 |     crowd = fmax(crowd, Type(-1.0));                                       // avoid extreme negatives\n      |                  ^~~~~\n      |                  |\n      |                  CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:194:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  194 |     F_next = fmin(F_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:195:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  195 |     S_next = fmin(S_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:199:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<double> >\u2019 to \u2018double\u2019\n  199 |     K_cots = fmax(K_cots, Type(0.0));                                      // capacity cannot be negative\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<double> >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:235:23: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  235 |     Type y_cots = fmax(cots_dat(t), eps);\n      |                   ~~~~^~~~~~~~~~~~~~~~~~\n      |                       |\n      |                       Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:236:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  236 |     Type mu_cots = fmax(cots_pred(t), eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:240:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  240 |     Type y_fast = fmin(fmax(fast_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:241:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  241 |     Type y_slow = fmin(fmax(slow_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:242:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  242 |     Type mu_fast = fmin(fmax(fast_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:243:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<double> >\u2019} to \u2018double\u2019\n  243 |     Type mu_slow = fmin(fmax(slow_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<double> >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<double> >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp: In instantiation of \u2018Type objective_function<Type>::operator()() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019:\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:917:29:   required from \u2018Type objective_function<Type>::evalUserTemplate() [with Type = CppAD::AD<CppAD::AD<CppAD::AD<double> > >]\u2019\n/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include/tmb_core.hpp:2365:28:   required from here\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:119:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  119 |   Type sigma_cots = fmax(exp(log_sigma_cots), min_sigma);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:120:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  120 |   Type phi_fast   = fmax(exp(log_phi_fast), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:121:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  121 |   Type phi_slow   = fmax(exp(log_phi_slow), min_phi);\n      |                     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:139:22: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  139 |   Type N_prev = fmax(Type(0.1), Kcots0 * Type(0.5));   // adults m^-2\n      |                      ^~~~~~~~~\n      |                      |\n      |                      CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:140:21: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  140 |   Type F_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:141:21: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  141 |   Type S_prev = fmin(Type(0.5) * K_c, Type(0.45));     // fraction of substrate\n      |                 ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |\n      |                     CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:176:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  176 |     Type dF_cots = fmin(dF_cots_pot, F_prev);                              // cannot consume more than available\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:177:25: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  177 |     Type dS_cots = fmin(dS_cots_pot, S_prev);\n      |                         ^~~~~~~~~~~\n      |                         |\n      |                         CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:182:18: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  182 |     crowd = fmax(crowd, Type(-1.0));                                       // avoid extreme negatives\n      |                  ^~~~~\n      |                  |\n      |                  CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:194:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  194 |     F_next = fmin(F_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:195:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  195 |     S_next = fmin(S_next, Type(1.0));\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:336:1: note:   initializing argument 1 of \u2018double fmin(double, double)\u2019\n  336 | __MATHCALLX (fmin,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:199:19: error: cannot convert \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019 to \u2018double\u2019\n  199 |     K_cots = fmax(K_cots, Type(0.0));                                      // capacity cannot be negative\n      |                   ^~~~~~\n      |                   |\n      |                   CppAD::AD<CppAD::AD<CppAD::AD<double> > >\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:235:23: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  235 |     Type y_cots = fmax(cots_dat(t), eps);\n      |                   ~~~~^~~~~~~~~~~~~~~~~~\n      |                       |\n      |                       Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:236:24: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  236 |     Type mu_cots = fmax(cots_pred(t), eps);\n      |                    ~~~~^~~~~~~~~~~~~~~~~~~\n      |                        |\n      |                        Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:240:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  240 |     Type y_fast = fmin(fmax(fast_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:241:28: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  241 |     Type y_slow = fmin(fmax(slow_dat(t), eps), max_prop);\n      |                        ~~~~^~~~~~~~~~~~~~~~~~\n      |                            |\n      |                            Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:242:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  242 |     Type mu_fast = fmin(fmax(fast_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nPOPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp:243:29: error: cannot convert \u2018Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar\u2019 {aka \u2018CppAD::AD<CppAD::AD<CppAD::AD<double> > >\u2019} to \u2018double\u2019\n  243 |     Type mu_slow = fmin(fmax(slow_pred(t), eps), max_prop);\n      |                         ~~~~^~~~~~~~~~~~~~~~~~~\n      |                             |\n      |                             Eigen::DenseCoeffsBase<Eigen::Array<CppAD::AD<CppAD::AD<CppAD::AD<double> > >, -1, 1, 0, -1, 1>, 1>::Scalar {aka CppAD::AD<CppAD::AD<CppAD::AD<double> > >}\n/usr/include/x86_64-linux-gnu/bits/mathcalls.h:333:1: note:   initializing argument 1 of \u2018double fmax(double, double)\u2019\n  333 | __MATHCALLX (fmax,, (_Mdouble_ __x, _Mdouble_ __y), (__const__));\n      | ^\nmake: *** [/usr/lib/R/etc/Makeconf:204: POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o] Error 1\nError in TMB::compile(file.path(individual_dir, model_file), flags = flags,  : \n  Compilation failed\nError: Compilation failed\nExecution halted"
    },
    "3": {
      "status": "SUCCESS",
      "objective_value": 2.7069,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         31     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.4281,
          0.5073,
          0.5146,
          0.4574,
          0.5181,
          0.5419,
          0.5255,
          0.4998,
          0.4963,
          0.7907,
          0.6486,
          1.8023,
          0.9064,
          0.749,
          0.6613,
          0.5736,
          0.5194,
          0.461,
          0.4163,
          0.3849,
          0.3415,
          0.3354,
          0.37,
          0.4518,
          0.4042,
          0.3975
        ],
        "S_pred": [
          0.4433,
          0.4342,
          0.4209,
          0.4075,
          0.3977,
          0.3874,
          0.3751,
          0.3632,
          0.3518,
          0.3407,
          0.3297,
          0.3191,
          0.308,
          0.2979,
          0.2884,
          0.2801,
          0.2712,
          0.2627,
          0.2546,
          0.2467,
          0.239,
          0.2317,
          0.2246,
          0.2183,
          0.2115,
          0.205
        ],
        "N_pred": [
          0.4281,
          0.5073,
          0.5146,
          0.4574,
          0.5181,
          0.5419,
          0.5255,
          0.4998,
          0.4963,
          0.7907,
          0.6486,
          1.8023,
          0.9064,
          0.749,
          0.6613,
          0.5736,
          0.5194,
          0.461,
          0.4163,
          0.3849,
          0.3415,
          0.3354,
          0.37,
          0.4518,
          0.4042,
          0.3975
        ],
        "fast_pred": [
          0.4739,
          0.4906,
          0.5023,
          0.5124,
          0.5294,
          0.5421,
          0.5544,
          0.5666,
          0.5792,
          0.5884,
          0.6012,
          0.6125,
          0.6251,
          0.6353,
          0.6393,
          0.6536,
          0.6616,
          0.6668,
          0.6788,
          0.6895,
          0.696,
          0.7068,
          0.7163,
          0.7243,
          0.7291,
          0.7368
        ],
        "slow_pred": [
          0.4433,
          0.4342,
          0.4209,
          0.4075,
          0.3977,
          0.3874,
          0.3751,
          0.3632,
          0.3518,
          0.3407,
          0.3297,
          0.3191,
          0.308,
          0.2979,
          0.2884,
          0.2801,
          0.2712,
          0.2627,
          0.2546,
          0.2467,
          0.239,
          0.2317,
          0.2246,
          0.2183,
          0.2115,
          0.205
        ],
        "F_pred": [
          0.4739,
          0.4906,
          0.5023,
          0.5124,
          0.5294,
          0.5421,
          0.5544,
          0.5666,
          0.5792,
          0.5884,
          0.6012,
          0.6125,
          0.6251,
          0.6353,
          0.6393,
          0.6536,
          0.6616,
          0.6668,
          0.6788,
          0.6895,
          0.696,
          0.7068,
          0.7163,
          0.7243,
          0.7291,
          0.7368
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4281,
            0.5073,
            0.5146,
            0.4574,
            0.5181,
            0.5419,
            0.5255,
            0.4998,
            0.4963,
            0.7907,
            0.6486,
            1.8023,
            0.9064,
            0.749,
            0.6613,
            0.5736,
            0.5194,
            0.461,
            0.4163,
            0.3849,
            0.3415,
            0.3354,
            0.37,
            0.4518,
            0.4042,
            0.3975
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4739,
            0.4906,
            0.5023,
            0.5124,
            0.5294,
            0.5421,
            0.5544,
            0.5666,
            0.5792,
            0.5884,
            0.6012,
            0.6125,
            0.6251,
            0.6353,
            0.6393,
            0.6536,
            0.6616,
            0.6668,
            0.6788,
            0.6895,
            0.696,
            0.7068,
            0.7163,
            0.7243,
            0.7291,
            0.7368
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4433,
            0.4342,
            0.4209,
            0.4075,
            0.3977,
            0.3874,
            0.3751,
            0.3632,
            0.3518,
            0.3407,
            0.3297,
            0.3191,
            0.308,
            0.2979,
            0.2884,
            0.2801,
            0.2712,
            0.2627,
            0.2546,
            0.2467,
            0.239,
            0.2317,
            0.2246,
            0.2183,
            0.2115,
            0.205
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp -o POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.so POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nOut-of-range checks:\nAny cots_dat < 0?  FALSE \nAny fast_dat outside [0,100]?  FALSE \nAny slow_dat outside [0,100]?  FALSE \n\nPARAMETER starts (first few):\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n      0.4054651      -0.3566749      -1.2039728       0.5000000       5.0000000 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n     -1.3862944       0.1000000      10.0000000      29.0000000       0.4054651 \n     log_Kcots0      log_Kcots1 \n     -2.9957323       0.0000000 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\nlog_r_cots_max  log_alpha_imm        imm_thr     log_r_fast     log_r_slow \n     0.4054651     -1.2039728      0.5000000     -1.2039728     -2.1000000 \nlog_sigma_cots \n    -0.6931472 \nFinal parameter values for phase 1 :\nlog_r_cots_max  log_alpha_imm        imm_thr     log_r_fast     log_r_slow \n  -0.005715429   -3.412550164    0.000000000    0.000000000   -1.204000000 \nlog_sigma_cots \n   1.386294361 \nConvergence message: relative convergence (4) \nNumber of iterations: 13 \nObjective function value: 11548.8 \nGradient at solution for phase 1 :\n             [,1]         [,2]      [,3]      [,4]      [,5]      [,6]\n[1,] 0.0001777735 3.580557e-05 0.1098017 -627.7269 -11.76202 -105.1232\nPhase 2 \nInitial parameter values for phase 2 :\n    log_m_cots     log_Kcots0     log_Kcots1 log_attack_max      logit_K_c \n    -0.3566749     -2.9957323      0.0000000     -1.2039728      0.4054651 \n  log_phi_fast   log_phi_slow  log_m_disease    N_burst_thr        k_burst \n     3.9120230      3.9120230     -0.6931472      0.3000000     10.0000000 \n   log_m_starv \n    -1.2039728 \nFinal parameter values for phase 2 :\n    log_m_cots     log_Kcots0     log_Kcots1 log_attack_max      logit_K_c \n     -4.605170      -2.033753      -4.576674      -4.605170       3.000000 \n  log_phi_fast   log_phi_slow  log_m_disease    N_burst_thr        k_burst \n      1.313939       1.117732      -0.836651       1.798899      10.162684 \n   log_m_starv \n     -6.722444 \nConvergence message: relative convergence (4) \nNumber of iterations: 57 \nObjective function value: 636.5146 \nGradient at solution for phase 2 :\n           [,1]          [,2]          [,3]     [,4]     [,5] [,6] [,7]\n[1,] 0.00318058 -0.0001214396 -0.0001360139 2.358985 -33.3144    0    0\n             [,8]          [,9]         [,10]        [,11]\n[1,] 5.934728e-09 -6.031277e-08 -9.906502e-09 9.754938e-05\nPhase 3 \nInitial parameter values for phase 3 :\n        imm_k logit_Hh_food         E_thr logit_h_type3 tau_pref_fast \n     5.000000     -1.386294      0.100000     -1.386294      2.000000 \n   log_m_fast    log_m_slow \n    -2.995732     -2.899546 \nFinal parameter values for phase 3 :\n        imm_k logit_Hh_food         E_thr logit_h_type3 tau_pref_fast \n    17.916464     -6.000000      0.000000      6.000000     -5.000000 \n   log_m_fast    log_m_slow \n    -6.907755     -3.506558 \nConvergence message: relative convergence (4) \nNumber of iterations: 36 \nObjective function value: 550.6141 \nGradient at solution for phase 3 :\n              [,1]         [,2]        [,3]         [,4]        [,5]     [,6]\n[1,] -3.704805e-08 0.0002621441 0.008954787 -0.002251453 0.001191761 1.103963\n         [,7]\n[1,] 38.68473\nPhase 4 \nInitial parameter values for phase 4 :\n            k_E    sst_opt_cots log_sst_sd_cots    sst_opt_fast log_sst_sd_fast \n     10.0000000      29.0000000       0.4054651      28.5000000       0.8960000 \n   sst_opt_slow log_sst_sd_slow \n     28.5000000      -1.4978660 \nFinal parameter values for phase 4 :\n            k_E    sst_opt_cots log_sst_sd_cots    sst_opt_fast log_sst_sd_fast \n       0.100000       28.000000        1.609438       27.500000        1.099000 \n   sst_opt_slow log_sst_sd_slow \n      28.181144       -0.693147 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 34 \nObjective function value: 545.1636 \nGradient at solution for phase 4 :\n            [,1]         [,2]         [,3]      [,4]      [,5]          [,6]\n[1,] 0.003618279 0.0002399791 -0.002108723 0.6532401 -4.790069 -3.819983e-11\n         [,7]\n[1,] -1.44668\nFinal Phase\nInitial parameter values for final phase:\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n   -0.005715429    -4.605170186    -3.412550164     0.000000000    17.916464391 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n   -6.000000000     0.000000000     0.100000000    28.000000000     1.609437912 \n     log_Kcots0      log_Kcots1  log_attack_max   logit_h_type3   tau_pref_fast \n   -2.033753245    -4.576674011    -4.605170186     6.000000000    -5.000000000 \n     log_r_fast      log_r_slow       logit_K_c      log_m_fast      log_m_slow \n    0.000000000    -1.204000000     3.000000000    -6.907755279    -3.506557897 \n   sst_opt_fast log_sst_sd_fast    sst_opt_slow log_sst_sd_slow  log_sigma_cots \n   27.500000000     1.099000000    28.181144460    -0.693147000     1.386294361 \n   log_phi_fast    log_phi_slow   log_m_disease     N_burst_thr         k_burst \n    1.313939353     1.117731505    -0.836651018     1.798899258    10.162683944 \n    log_m_starv \n   -6.722444257 \nFinal parameter values for final phase:\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n      0.4935408      -2.1457178       1.3862944       0.0121896      17.9191585 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n     -5.9713680       0.1950747       0.7394822      28.1240942       0.2025469 \n     log_Kcots0      log_Kcots1  log_attack_max   logit_h_type3   tau_pref_fast \n     -0.4428097      -4.1768205      -4.6051702       6.0000000      -5.0000000 \n     log_r_fast      log_r_slow       logit_K_c      log_m_fast      log_m_slow \n      0.0000000      -1.2040000       3.0000000      -6.9077553      -3.5065579 \n   sst_opt_fast log_sst_sd_fast    sst_opt_slow log_sst_sd_slow  log_sigma_cots \n     27.5000000       1.0990000      28.1945112      -0.6931470      -1.1058911 \n   log_phi_fast    log_phi_slow   log_m_disease     N_burst_thr         k_burst \n      1.4401243       0.9559712      -0.8210061       1.5708986      10.1618593 \n    log_m_starv \n     -6.7217108 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 492.8173 \nGradient at solution for final phase:\n          [,1]      [,2]      [,3]          [,4]         [,5]        [,6]\n[1,] -0.514667 -3.012808 -2.248281 -0.0001083316 4.158206e-06 -0.01138238\n          [,7]       [,8]     [,9]     [,10]      [,11]       [,12]    [,13]\n[1,] 0.1020958 -0.2941818 2.407005 -7.067929 -0.6053869 -0.05644182 2.172246\n            [,14]       [,15]     [,16]     [,17]     [,18]     [,19]    [,20]\n[1,] -0.009541282 0.007513982 -17.02597 -2.858724 -36.65653 0.8567252 36.08144\n         [,21]     [,22]      [,23]     [,24]    [,25] [,26] [,27]      [,28]\n[1,] 0.6641188 -4.883397 0.05863628 -1.479664 1.103881     0     0 -0.5781806\n         [,29]       [,30]         [,31]\n[1,] 0.4908269 -0.01306913 -0.0004333635\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 6\n $ cots_pred: num [1:26] 0.428 0.507 0.515 0.457 0.518 ...\n $ S_pred   : num [1:26] 0.443 0.434 0.421 0.407 0.398 ...\n $ N_pred   : num [1:26] 0.428 0.507 0.515 0.457 0.518 ...\n $ fast_pred: num [1:26] 0.474 0.491 0.502 0.512 0.529 ...\n $ slow_pred: num [1:26] 0.443 0.434 0.421 0.407 0.398 ...\n $ F_pred   : num [1:26] 0.474 0.491 0.502 0.512 0.529 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"S_pred\"    \"N_pred\"    \"fast_pred\" \"slow_pred\" \"F_pred\"   \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.4280956 0.5073109 0.51464 0.457357 0.5181282 0.5419369 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3354  0.4193  0.5036  0.5655  0.5657  1.8023 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 0.4738912 0.4905523 0.5022501 0.5124032 0.5293745 0.5420937 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.4739  0.5575  0.6302  0.6197  0.6868  0.7368 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 0.4432794 0.4342216 0.4208951 0.407495 0.3976913 0.387353 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2050  0.2486  0.3029  0.3119  0.3722  0.4433 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.4280956 0.5073109 0.51464 0.457357 0.5181282 0.5419369 ...\nMSE (normalized): 0.3328565 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 0.4738912 0.4905523 0.5022501 0.5124032 0.5293745 0.5420937 ...\nMSE (normalized): 3.15031 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 0.4432794 0.4342216 0.4208951 0.407495 0.3976913 0.387353 ...\nMSE (normalized): 4.637428 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.3328565 3.1503100 4.6374276 \n\nDEBUG: Final objective value (mean of MSEs): 2.706865 \n\nFinal objective function value: 2.706865 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 2.7069,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         31     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n    \"S_pred\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n    \"N_pred\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n    \"fast_pred\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368],\n    \"slow_pred\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n    \"F_pred\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/EMs-with-LLMs\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "4": {
      "status": "SUCCESS",
      "objective_value": 2.7069
    },
    "5": {
      "status": "SUCCESS",
      "objective_value": 2.7069,
      "model_summary": [
        "            Length Class  Mode     ",
        "par         31     -none- numeric  ",
        "objective    1     -none- numeric  ",
        "convergence  1     -none- numeric  ",
        "iterations   1     -none- numeric  ",
        "evaluations  2     -none- numeric  ",
        "message      1     -none- character"
      ],
      "model_report": {
        "cots_pred": [
          0.4281,
          0.5073,
          0.5146,
          0.4574,
          0.5181,
          0.5419,
          0.5255,
          0.4998,
          0.4963,
          0.7907,
          0.6486,
          1.8023,
          0.9064,
          0.749,
          0.6613,
          0.5736,
          0.5194,
          0.461,
          0.4163,
          0.3849,
          0.3415,
          0.3354,
          0.37,
          0.4518,
          0.4042,
          0.3975
        ],
        "S_pred": [
          0.4433,
          0.4342,
          0.4209,
          0.4075,
          0.3977,
          0.3874,
          0.3751,
          0.3632,
          0.3518,
          0.3407,
          0.3297,
          0.3191,
          0.308,
          0.2979,
          0.2884,
          0.2801,
          0.2712,
          0.2627,
          0.2546,
          0.2467,
          0.239,
          0.2317,
          0.2246,
          0.2183,
          0.2115,
          0.205
        ],
        "N_pred": [
          0.4281,
          0.5073,
          0.5146,
          0.4574,
          0.5181,
          0.5419,
          0.5255,
          0.4998,
          0.4963,
          0.7907,
          0.6486,
          1.8023,
          0.9064,
          0.749,
          0.6613,
          0.5736,
          0.5194,
          0.461,
          0.4163,
          0.3849,
          0.3415,
          0.3354,
          0.37,
          0.4518,
          0.4042,
          0.3975
        ],
        "fast_pred": [
          0.4739,
          0.4906,
          0.5023,
          0.5124,
          0.5294,
          0.5421,
          0.5544,
          0.5666,
          0.5792,
          0.5884,
          0.6012,
          0.6125,
          0.6251,
          0.6353,
          0.6393,
          0.6536,
          0.6616,
          0.6668,
          0.6788,
          0.6895,
          0.696,
          0.7068,
          0.7163,
          0.7243,
          0.7291,
          0.7368
        ],
        "slow_pred": [
          0.4433,
          0.4342,
          0.4209,
          0.4075,
          0.3977,
          0.3874,
          0.3751,
          0.3632,
          0.3518,
          0.3407,
          0.3297,
          0.3191,
          0.308,
          0.2979,
          0.2884,
          0.2801,
          0.2712,
          0.2627,
          0.2546,
          0.2467,
          0.239,
          0.2317,
          0.2246,
          0.2183,
          0.2115,
          0.205
        ],
        "F_pred": [
          0.4739,
          0.4906,
          0.5023,
          0.5124,
          0.5294,
          0.5421,
          0.5544,
          0.5666,
          0.5792,
          0.5884,
          0.6012,
          0.6125,
          0.6251,
          0.6353,
          0.6393,
          0.6536,
          0.6616,
          0.6668,
          0.6788,
          0.6895,
          0.696,
          0.7068,
          0.7163,
          0.7243,
          0.7291,
          0.7368
        ]
      },
      "plot_data": {
        "cots_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4281,
            0.5073,
            0.5146,
            0.4574,
            0.5181,
            0.5419,
            0.5255,
            0.4998,
            0.4963,
            0.7907,
            0.6486,
            1.8023,
            0.9064,
            0.749,
            0.6613,
            0.5736,
            0.5194,
            0.461,
            0.4163,
            0.3849,
            0.3415,
            0.3354,
            0.37,
            0.4518,
            0.4042,
            0.3975
          ],
          "Observed": [
            0.2615,
            0.5498,
            0.7268,
            0.5523,
            0.8281,
            0.547,
            0.758,
            0.6288,
            0.4762,
            0.6466,
            0.9107,
            2.152,
            0.6446,
            1.6723,
            0.4766,
            0.8075,
            0.3635,
            0.3728,
            0.6173,
            0.3107,
            0.256,
            0.2984,
            0.3362,
            0.2878,
            0.3221,
            0.4308
          ]
        },
        "fast_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4739,
            0.4906,
            0.5023,
            0.5124,
            0.5294,
            0.5421,
            0.5544,
            0.5666,
            0.5792,
            0.5884,
            0.6012,
            0.6125,
            0.6251,
            0.6353,
            0.6393,
            0.6536,
            0.6616,
            0.6668,
            0.6788,
            0.6895,
            0.696,
            0.7068,
            0.7163,
            0.7243,
            0.7291,
            0.7368
          ],
          "Observed": [
            10.0694,
            17.7236,
            23.8276,
            19.4181,
            15.6354,
            32.4596,
            21.5567,
            34.1938,
            18.8708,
            27.3176,
            44.3301,
            13.3275,
            11.3741,
            8.3362,
            15.207,
            12.443,
            11.0666,
            10.6442,
            2.3628,
            2.76,
            3.7236,
            7.0355,
            10.2239,
            8.4754,
            9.0819,
            13.7314
          ]
        },
        "slow_pred": {
          "Year": [
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005
          ],
          "Modeled": [
            0.4433,
            0.4342,
            0.4209,
            0.4075,
            0.3977,
            0.3874,
            0.3751,
            0.3632,
            0.3518,
            0.3407,
            0.3297,
            0.3191,
            0.308,
            0.2979,
            0.2884,
            0.2801,
            0.2712,
            0.2627,
            0.2546,
            0.2467,
            0.239,
            0.2317,
            0.2246,
            0.2183,
            0.2115,
            0.205
          ],
          "Observed": [
            12.7726,
            16.4147,
            12.7773,
            12.2798,
            15.1152,
            12.8194,
            10.4631,
            9.7251,
            13.2014,
            16.4512,
            11.1393,
            18.0832,
            11.5223,
            8.51,
            9.1622,
            5.3353,
            8.6044,
            7.2781,
            2.629,
            4.6951,
            1.5948,
            5.2172,
            2.6041,
            3.3618,
            7.3289,
            4.4014
          ]
        }
      },
      "stdout": "g++ -std=gnu++17 -I\"/usr/share/R/include\" -DNDEBUG -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/TMB/include\" -I\"/home/spi085/R/x86_64-pc-linux-gnu-library/4.4/RcppEigen/include\"   -DTMB_EIGEN_DISABLE_WARNINGS   -DTMB_LIB_INIT=R_init_model  -DCPPAD_FRAMEWORK      -fpic  -O2  -c POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.cpp -o POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o\ng++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -o POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.so POPULATIONS/POPULATION_0074/INDIVIDUAL_USF9R0NY/model.o -L/usr/lib/R/lib -lR\n\nNA counts per required column:\n       Year    cots_dat    fast_dat    slow_dat     sst_dat cotsimm_dat \n          0           0           0           0           0           0 \n\nOut-of-range checks:\nAny cots_dat < 0?  FALSE \nAny fast_dat outside [0,100]?  FALSE \nAny slow_dat outside [0,100]?  FALSE \n\nPARAMETER starts (first few):\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n      0.4054651      -0.3566749      -1.2039728       0.5000000       5.0000000 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n     -1.3862944       0.1000000      10.0000000      29.0000000       0.4054651 \n     log_Kcots0      log_Kcots1 \n     -2.9957323       0.0000000 \nStarting model phases\nNumber of phases: 4 \nPhase 1 \nInitial parameter values for phase 1 :\nlog_r_cots_max  log_alpha_imm        imm_thr     log_r_fast     log_r_slow \n     0.4054651     -1.2039728      0.5000000     -1.2039728     -2.1000000 \nlog_sigma_cots \n    -0.6931472 \nFinal parameter values for phase 1 :\nlog_r_cots_max  log_alpha_imm        imm_thr     log_r_fast     log_r_slow \n  -0.005715429   -3.412550164    0.000000000    0.000000000   -1.204000000 \nlog_sigma_cots \n   1.386294361 \nConvergence message: relative convergence (4) \nNumber of iterations: 13 \nObjective function value: 11548.8 \nGradient at solution for phase 1 :\n             [,1]         [,2]      [,3]      [,4]      [,5]      [,6]\n[1,] 0.0001777735 3.580557e-05 0.1098017 -627.7269 -11.76202 -105.1232\nPhase 2 \nInitial parameter values for phase 2 :\n    log_m_cots     log_Kcots0     log_Kcots1 log_attack_max      logit_K_c \n    -0.3566749     -2.9957323      0.0000000     -1.2039728      0.4054651 \n  log_phi_fast   log_phi_slow  log_m_disease    N_burst_thr        k_burst \n     3.9120230      3.9120230     -0.6931472      0.3000000     10.0000000 \n   log_m_starv \n    -1.2039728 \nFinal parameter values for phase 2 :\n    log_m_cots     log_Kcots0     log_Kcots1 log_attack_max      logit_K_c \n     -4.605170      -2.033753      -4.576674      -4.605170       3.000000 \n  log_phi_fast   log_phi_slow  log_m_disease    N_burst_thr        k_burst \n      1.313939       1.117732      -0.836651       1.798899      10.162684 \n   log_m_starv \n     -6.722444 \nConvergence message: relative convergence (4) \nNumber of iterations: 57 \nObjective function value: 636.5146 \nGradient at solution for phase 2 :\n           [,1]          [,2]          [,3]     [,4]     [,5] [,6] [,7]\n[1,] 0.00318058 -0.0001214396 -0.0001360139 2.358985 -33.3144    0    0\n             [,8]          [,9]         [,10]        [,11]\n[1,] 5.934728e-09 -6.031277e-08 -9.906502e-09 9.754938e-05\nPhase 3 \nInitial parameter values for phase 3 :\n        imm_k logit_Hh_food         E_thr logit_h_type3 tau_pref_fast \n     5.000000     -1.386294      0.100000     -1.386294      2.000000 \n   log_m_fast    log_m_slow \n    -2.995732     -2.899546 \nFinal parameter values for phase 3 :\n        imm_k logit_Hh_food         E_thr logit_h_type3 tau_pref_fast \n    17.916464     -6.000000      0.000000      6.000000     -5.000000 \n   log_m_fast    log_m_slow \n    -6.907755     -3.506558 \nConvergence message: relative convergence (4) \nNumber of iterations: 36 \nObjective function value: 550.6141 \nGradient at solution for phase 3 :\n              [,1]         [,2]        [,3]         [,4]        [,5]     [,6]\n[1,] -3.704805e-08 0.0002621441 0.008954787 -0.002251453 0.001191761 1.103963\n         [,7]\n[1,] 38.68473\nPhase 4 \nInitial parameter values for phase 4 :\n            k_E    sst_opt_cots log_sst_sd_cots    sst_opt_fast log_sst_sd_fast \n     10.0000000      29.0000000       0.4054651      28.5000000       0.8960000 \n   sst_opt_slow log_sst_sd_slow \n     28.5000000      -1.4978660 \nFinal parameter values for phase 4 :\n            k_E    sst_opt_cots log_sst_sd_cots    sst_opt_fast log_sst_sd_fast \n       0.100000       28.000000        1.609438       27.500000        1.099000 \n   sst_opt_slow log_sst_sd_slow \n      28.181144       -0.693147 \nConvergence message: both X-convergence and relative convergence (5) \nNumber of iterations: 34 \nObjective function value: 545.1636 \nGradient at solution for phase 4 :\n            [,1]         [,2]         [,3]      [,4]      [,5]          [,6]\n[1,] 0.003618279 0.0002399791 -0.002108723 0.6532401 -4.790069 -3.819983e-11\n         [,7]\n[1,] -1.44668\nFinal Phase\nInitial parameter values for final phase:\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n   -0.005715429    -4.605170186    -3.412550164     0.000000000    17.916464391 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n   -6.000000000     0.000000000     0.100000000    28.000000000     1.609437912 \n     log_Kcots0      log_Kcots1  log_attack_max   logit_h_type3   tau_pref_fast \n   -2.033753245    -4.576674011    -4.605170186     6.000000000    -5.000000000 \n     log_r_fast      log_r_slow       logit_K_c      log_m_fast      log_m_slow \n    0.000000000    -1.204000000     3.000000000    -6.907755279    -3.506557897 \n   sst_opt_fast log_sst_sd_fast    sst_opt_slow log_sst_sd_slow  log_sigma_cots \n   27.500000000     1.099000000    28.181144460    -0.693147000     1.386294361 \n   log_phi_fast    log_phi_slow   log_m_disease     N_burst_thr         k_burst \n    1.313939353     1.117731505    -0.836651018     1.798899258    10.162683944 \n    log_m_starv \n   -6.722444257 \nFinal parameter values for final phase:\n log_r_cots_max      log_m_cots   log_alpha_imm         imm_thr           imm_k \n      0.4935408      -2.1457178       1.3862944       0.0121896      17.9191585 \n  logit_Hh_food           E_thr             k_E    sst_opt_cots log_sst_sd_cots \n     -5.9713680       0.1950747       0.7394822      28.1240942       0.2025469 \n     log_Kcots0      log_Kcots1  log_attack_max   logit_h_type3   tau_pref_fast \n     -0.4428097      -4.1768205      -4.6051702       6.0000000      -5.0000000 \n     log_r_fast      log_r_slow       logit_K_c      log_m_fast      log_m_slow \n      0.0000000      -1.2040000       3.0000000      -6.9077553      -3.5065579 \n   sst_opt_fast log_sst_sd_fast    sst_opt_slow log_sst_sd_slow  log_sigma_cots \n     27.5000000       1.0990000      28.1945112      -0.6931470      -1.1058911 \n   log_phi_fast    log_phi_slow   log_m_disease     N_burst_thr         k_burst \n      1.4401243       0.9559712      -0.8210061       1.5708986      10.1618593 \n    log_m_starv \n     -6.7217108 \nConvergence message: iteration limit reached without convergence (10) \nNumber of iterations: 150 \nObjective function value: 492.8173 \nGradient at solution for final phase:\n          [,1]      [,2]      [,3]          [,4]         [,5]        [,6]\n[1,] -0.514667 -3.012808 -2.248281 -0.0001083316 4.158206e-06 -0.01138238\n          [,7]       [,8]     [,9]     [,10]      [,11]       [,12]    [,13]\n[1,] 0.1020958 -0.2941818 2.407005 -7.067929 -0.6053869 -0.05644182 2.172246\n            [,14]       [,15]     [,16]     [,17]     [,18]     [,19]    [,20]\n[1,] -0.009541282 0.007513982 -17.02597 -2.858724 -36.65653 0.8567252 36.08144\n         [,21]     [,22]      [,23]     [,24]    [,25] [,26] [,27]      [,28]\n[1,] 0.6641188 -4.883397 0.05863628 -1.479664 1.103881     0     0 -0.5781806\n         [,29]       [,30]         [,31]\n[1,] 0.4908269 -0.01306913 -0.0004333635\nAll phases completed\nSuccessfully updated parameters_metadata.json with optimized values\n[1] \"Train test split:\"\n[1] 1\n\nRunning model validation...\nNo test data available (train_test_split >= 1.0)\nNULL\n\nDEBUG: Report contents:\nList of 6\n $ cots_pred: num [1:26] 0.428 0.507 0.515 0.457 0.518 ...\n $ S_pred   : num [1:26] 0.443 0.434 0.421 0.407 0.398 ...\n $ N_pred   : num [1:26] 0.428 0.507 0.515 0.457 0.518 ...\n $ fast_pred: num [1:26] 0.474 0.491 0.502 0.512 0.529 ...\n $ slow_pred: num [1:26] 0.443 0.434 0.421 0.407 0.398 ...\n $ F_pred   : num [1:26] 0.474 0.491 0.502 0.512 0.529 ...\nNULL\n\nDEBUG: Available variables in report:\n[1] \"cots_pred\" \"S_pred\"    \"N_pred\"    \"fast_pred\" \"slow_pred\" \"F_pred\"   \n\nChecking predictions and calculating objective function...\n\nDEBUG: Processing cots_pred \nDEBUG: First few predictions: 0.4280956 0.5073109 0.51464 0.457357 0.5181282 0.5419369 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3354  0.4193  0.5036  0.5655  0.5657  1.8023 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing fast_pred \nDEBUG: First few predictions: 0.4738912 0.4905523 0.5022501 0.5124032 0.5293745 0.5420937 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.4739  0.5575  0.6302  0.6197  0.6868  0.7368 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Processing slow_pred \nDEBUG: First few predictions: 0.4432794 0.4342216 0.4208951 0.407495 0.3976913 0.387353 \nDEBUG: Summary statistics:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2050  0.2486  0.3029  0.3119  0.3722  0.4433 \nDEBUG: All zeros? FALSE \nDEBUG: Any infinities? FALSE \n\nDEBUG: Using the following variables for objective function:\ncots_dat -> cots_pred\nfast_dat -> fast_pred\nslow_dat -> slow_pred\n\nDEBUG: Calculating MSE for prediction variables only:\n\nDEBUG: cots_pred \nObserved: 0.2615042 0.5498196 0.7268086 0.5522907 0.828121 0.5470078 ...\nPredicted: 0.4280956 0.5073109 0.51464 0.457357 0.5181282 0.5419369 ...\nMSE (normalized): 0.3328565 \n\nDEBUG: fast_pred \nObserved: 10.06939 17.72357 23.82758 19.41812 15.63542 32.45961 ...\nPredicted: 0.4738912 0.4905523 0.5022501 0.5124032 0.5293745 0.5420937 ...\nMSE (normalized): 3.15031 \n\nDEBUG: slow_pred \nObserved: 12.77261 16.41474 12.77729 12.27975 15.11516 12.81941 ...\nPredicted: 0.4432794 0.4342216 0.4208951 0.407495 0.3976913 0.387353 ...\nMSE (normalized): 4.637428 \n\nDEBUG: MSE values:\n cots_dat  fast_dat  slow_dat \n0.3328565 3.1503100 4.6374276 \n\nDEBUG: Final objective value (mean of MSEs): 2.706865 \n\nFinal objective function value: 2.706865 \n\nJSON_REPORT_START\n{\n  \"status\": \"SUCCESS\",\n  \"objective_value\": 2.7069,\n  \"model_summary\": [\"            Length Class  Mode     \", \"par         31     -none- numeric  \", \"objective    1     -none- numeric  \", \"convergence  1     -none- numeric  \", \"iterations   1     -none- numeric  \", \"evaluations  2     -none- numeric  \", \"message      1     -none- character\"],\n  \"model_report\": {\n    \"cots_pred\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n    \"S_pred\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n    \"N_pred\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n    \"fast_pred\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368],\n    \"slow_pred\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n    \"F_pred\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368]\n  },\n  \"plot_data\": {\n    \"cots_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4281, 0.5073, 0.5146, 0.4574, 0.5181, 0.5419, 0.5255, 0.4998, 0.4963, 0.7907, 0.6486, 1.8023, 0.9064, 0.749, 0.6613, 0.5736, 0.5194, 0.461, 0.4163, 0.3849, 0.3415, 0.3354, 0.37, 0.4518, 0.4042, 0.3975],\n      \"Observed\": [0.2615, 0.5498, 0.7268, 0.5523, 0.8281, 0.547, 0.758, 0.6288, 0.4762, 0.6466, 0.9107, 2.152, 0.6446, 1.6723, 0.4766, 0.8075, 0.3635, 0.3728, 0.6173, 0.3107, 0.256, 0.2984, 0.3362, 0.2878, 0.3221, 0.4308]\n    },\n    \"fast_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4739, 0.4906, 0.5023, 0.5124, 0.5294, 0.5421, 0.5544, 0.5666, 0.5792, 0.5884, 0.6012, 0.6125, 0.6251, 0.6353, 0.6393, 0.6536, 0.6616, 0.6668, 0.6788, 0.6895, 0.696, 0.7068, 0.7163, 0.7243, 0.7291, 0.7368],\n      \"Observed\": [10.0694, 17.7236, 23.8276, 19.4181, 15.6354, 32.4596, 21.5567, 34.1938, 18.8708, 27.3176, 44.3301, 13.3275, 11.3741, 8.3362, 15.207, 12.443, 11.0666, 10.6442, 2.3628, 2.76, 3.7236, 7.0355, 10.2239, 8.4754, 9.0819, 13.7314]\n    },\n    \"slow_pred\": {\n      \"Year\": [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005],\n      \"Modeled\": [0.4433, 0.4342, 0.4209, 0.4075, 0.3977, 0.3874, 0.3751, 0.3632, 0.3518, 0.3407, 0.3297, 0.3191, 0.308, 0.2979, 0.2884, 0.2801, 0.2712, 0.2627, 0.2546, 0.2467, 0.239, 0.2317, 0.2246, 0.2183, 0.2115, 0.205],\n      \"Observed\": [12.7726, 16.4147, 12.7773, 12.2798, 15.1152, 12.8194, 10.4631, 9.7251, 13.2014, 16.4512, 11.1393, 18.0832, 11.5223, 8.51, 9.1622, 5.3353, 8.6044, 7.2781, 2.629, 4.6951, 1.5948, 5.2172, 2.6041, 3.3618, 7.3289, 4.4014]\n    }\n  }\n}\nJSON_REPORT_END",
      "stderr": "Loading required package: TMB\nLoading required package: jsonlite\nhere() starts at /home/spi085/Documents/_Projects/EMs-with-LLMs\nusing C++ compiler: \u2018g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0\u2019\nWarning message:\n`aes_string()` was deprecated in ggplot2 3.0.0.\n\u2139 Please use tidy evaluation idioms with `aes()`.\n\u2139 See also `vignette(\"ggplot2-in-packages\")` for more information."
    },
    "6": {
      "status": "SUCCESS",
      "objective_value": 2.7069
    }
  }
}